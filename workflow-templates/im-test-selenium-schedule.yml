# Workflow Code: CosmicFalcon_v1   DO NOT REMOVE
# Purpose:
#    Runs Selenium C# tests in GitHub Actions on a schedule.
#
# Frequency:
#    - Workflow template for running Selenium tests on a schedule. This workflow supports the UI Health Check feature
#
# Projects to use this Template with:
#    - Testing projects that use Selenium C#.
#
# TODO Prerequisites:
#    - Add Application Insights secret (APPLICATIONINSIGHTS_CONNECTION_STRING) to every environment you are testing.
#    - Update your Selenium solution to export test results to Application Insights using the IM.ExportToAppInsights NuGet package. 
#      Detailed setup guidance can be found here: https://github.com/im-practices/techhub/blob/main/docs/Azure/content/Health-Checks/Selenium-UI-Health-Check.md

name: ðŸ§ª Scheduled Selenium C# Tests
run-name: ðŸ§ª Run Scheduled Selenium C# Tests

on:
  schedule: # TODO: Update the schedule to run at the desired frequency. Do not run more than every 30 minutes as to not produce undue load on the system.  
    - cron: '59 * * * *' # Run Every hour # TODO: Update the frequency of the schedule.
    # - cron: '1/30 * * * *' # Run Every 30 minutes # TODO: Uncomment this line if you want to run every 30 minutes.
    # - cron: '1/40 * * * *' # Run Every 40 minutes # TODO: Uncomment this line if you want to run every 40 minutes.
        
permissions:
  id-token: write
  contents: read
  actions: read

env:
  DISPATCH_REF: master
  SELENIUM_TEST_DIR: 'Selenium' # TODO: Update this to the root directory of the Selenium tests
  SELENIUM_RESULTS_DIR: 'Selenium/TestResults' # TODO: Update this to the results output directory
  DOTNET_VERSION: '8.x' # TODO: Specify the .NET SDK version to use
  DOTNET_INSTALL_DIR: './.dotnet'  
  NUGET_CACHE_PATH: '~/.nuget/packages'
  TIMEZONE: America/Denver
  ENVIRONMENTS: '["dev","qa"]' # TODO: Update this to the list of environments you want to run the tests 
  BROWSER: 'Chrome' # TODO: Set the default browser
  TEST_FILTER: 'TestMethod' # TODO: Define test filter if necessary

jobs:
  nuget-cache:
    runs-on: im-linux
    
    outputs:
      NUGET_CACHE_KEY: ${{ env.NUGET_CACHE_KEY }}
      MATRIX: '{ environment: ${{ env.ENVIRONMENTS }} }'

    steps:
      - name: Setup .NET  # TODO: Delete if action runner contains the dotnet version you need.
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        env:
          DOTNET_INSTALL_DIR: ${{ env.DOTNET_INSTALL_DIR }}

      - name: Calculate Ref to Checkout
        id: calculate-ref
        shell: bash
        run: |
          GITHUB_REF="${{ env.DISPATCH_REF }}"
          echo "GITHUB_REF=$GITHUB_REF" >> $GITHUB_ENV

      - name: Annotate Inputs
        shell: bash
        run: |
          echo $'
          | Inputs                  | Value                                                                                     |
          | ----------------------- | ----------------------------------------------------------------------------------------- |
          | Environments            | `${{ env.ENVIRONMENTS }}`                                                                 |
          | Branch/Tag              | `${{ env.GITHUB_REF }}`                                                                   |
          | Browser                 | `${{ env.BROWSER }}`                                                                      |
          | Test Filter             | `${{ env.TEST_FILTER }}`                                                                  |' >> $GITHUB_STEP_SUMMARY

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: Set Cache Keys
        shell: bash
        run: echo "NUGET_CACHE_KEY=nuget-${{ hashFiles('**/*.csproj') }}" >> $GITHUB_ENV
                
      - name: Check for a .NET cache
        id: has-cache
        uses: actions/cache@v4
        with:
          lookup-only: true
          key: ${{ env.NUGET_CACHE_KEY }}
          path: ${{ env.NUGET_CACHE_PATH }}

      - name: Authenticate with GitHub Packages
        if: steps.has-cache.outputs.cache-hit != 'true'
        uses: im-open/authenticate-with-gh-package-registries@v1.1
        with:
          github-token: ${{ secrets.READ_PKG_TOKEN }}

      - name: Restore Dependencies
        if: steps.has-cache.outputs.cache-hit != 'true'
        shell: bash
        run: dotnet restore ${{ env.SELENIUM_TEST_DIR }}

      - name: Save cache for .NET packages
        if: steps.has-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ env.DOTNET_CACHE_KEY }}
          path: ${{ env.NUGET_CACHE_PATH }} 

  build-and-test:
    runs-on: im-linux
    needs: nuget-cache
    
    strategy:
      matrix: ${{ fromJson(needs.nuget-cache.outputs.MATRIX) }}
      fail-fast: false
    environment: ${{ matrix.environment }}

    env:
      NUGET_CACHE_KEY: ${{ needs.nuget-cache.outputs.NUGET_CACHE_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DISPATCH_REF }}

      - name: Setup .NET # TODO: Delete if action runner contains the dotnet version you need.
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download NuGet Cache
        id: restore-nuget-cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ env.NUGET_CACHE_KEY  }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
          path: ${{ env.NUGET_CACHE_PATH }}

      - name: Build Project
        shell: bash
        run: dotnet build ${{ env.SELENIUM_TEST_DIR }} --configuration Release

      - name: Run Selenium Tests
        working-directory: '${{ env.SELENIUM_TEST_DIR }}'
        shell: bash
        env:
          # These environment variables can be accessed in C# using Environment.GetEnvironmentVariable("VARIABLE_NAME")
          # and assigned in your config file to set configuration values dynamically.
          ENVIRONMENT: ${{ matrix.environment }}
          BROWSER: ${{ env.BROWSER }}
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
        run: |
          dotnet test --configuration Release \
          --logger "console;verbosity=detailed" \
          --logger "trx;LogFileName=test-results.trx" \
          --filter "${{ env.TEST_FILTER }}"

      # # Uncomment the following step and remove the previous step to run tests specifically in the QualityPractices_Automation framework.
      # # This configuration allows customization through environment variables such as Browser, BaseUrl, and other settings.
      # - name: Run Selenium Tests (QualityPractices_Automation) # Executes Selenium C# tests using QualityPractices_Automation framework
      #   working-directory: '${{ env.SELENIUM_TEST_DIR }}'
      #   shell: bash
      #   env: 
      #     ASSEMBLY: 'Tests.DemoApp' # TODO: Set the target test assembly here, e.g., replace 'Tests.DemoApp' with the relevant assembly name
      #     ATTRIBUTE: 'HealthCheck' # TODO: Specify the test attribute for filtering (e.g., use 'HealthCheck' to run tests marked with this attribute)
      #     BASE_URL: 'http://localhost:5050' # TODO: Define the base URL for the test environment, e.g., change to the appropriate test server endpoint if needed
      #     BROWSER: 'chromeheadless' # TODO: Configure the browser mode here, e.g., 'chromeheadless' for headless mode in CI/CD
      #     TIMEOUT: '10' # TODO: Specify the maximum timeout in minutes for each test, ensuring tests donâ€™t exceed this duration
      #     CONCURRENCY: '3' # TODO: Define the level of concurrency (e.g., 3 to allow up to 3 tests to run in parallel)
      #   run: |
      #     dotnet run \
      #     --asmb $ASSEMBLY \
      #     --attr $ATTRIBUTE \
      #     --u $BASE_URL \
      #     --b $BROWSER \
      #     --tm $TIMEOUT \
      #     --c $CONCURRENCY \
      #     --aer true \
      #     --aic ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}

      - name: Copy Test Results to Results Folder
        if: ${{ always() }}
        continue-on-error: true
        shell: bash
        run: |
          mkdir -p ${{ env.SELENIUM_RESULTS_DIR }}/reports
          cp -r ${{ env.SELENIUM_TEST_DIR }}/TestResults/*.trx ${{ env.SELENIUM_RESULTS_DIR }}/reports

      - name: Upload Selenium Test Report
        if: ${{ failure() }}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: selenium-test-results
          path: ${{ env.SELENIUM_RESULTS_DIR }}
          retention-days: 5
