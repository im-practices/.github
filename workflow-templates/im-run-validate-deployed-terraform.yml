# Workflow Code: ShinySQUIRREL_v28    DO NOT REMOVE
# Purpose:
#    Validates that the deployed terraform matches what is supposed to be deployed
#    when it runs at a scheduled time or when someone kicks it off manually.
#
# Frequency:
#    - This workflow should only be used once per repository.  It contains a matrix
#      strategy that can be updated for the environments and additional matrix args
#      could be added for different projects if there are more than one in a repo.
#
# Projects to use this Template with:
#    - Terraform (Core Template)
#
# TODO Prerequisites:
#    - Create an entity in this repo's catalog-info.yml that represents what is being deployed if it does not already exist
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.

name: Validate Deployed Terraform
on:
  schedule:
    # See the following site for help creating the right cron syntax: https://crontab.guru/
    # The cron job is specified in UTC.
    # 16:00 every day UTC
    # TODO: Pick a new UTC time to avoid running scheduled scans at the same time as everyone else.  This also generates PD alerts so you probably want it to happen during business hours.
    - cron: 0 16 * * 1-5
  workflow_dispatch:

permissions:
  # Required for secretless azure access and deploys
  id-token: write
  contents: read
  actions: read
  deployments: read

jobs:
  auto-plan-the-tf:
    runs-on: im-linux

    strategy:
      matrix:
        # TODO: verify the environments you want this workflow to check
        environment: [dev, qa, stage, demo, uat, prod]
        
        # TODO:  verify the instances match the possible values used in the im-deploy-* workflows
        instance: [na26, na27]  # Other common values are [dev,qa,stage,prod], [primary,secondary] or [slot1,slot2]

    environment: ${{ matrix.environment }}

    env:
      # The following ARM_* values are env-level secrets/variables
      ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
      ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }} # This is an org-level variable
      ARM_ENVIRONMENT: 'public'
      TF_IN_AUTOMATION: 'true'
      TF_VERSION: '~>1.4.0' #TODO:  Verify your version of terraform.
      TF_WORKING_DIR: './infrastructure/${{ matrix.environment }}' # TODO: Verify this directory is correct for your repository (older projects may not be inside of an infrastructure folder)
      REPO_URL: https://github.com/${{ github.repository }}
      # The following SSH_* secrets are org-level secrets
      SSH_KEY_STORAGE_ACCOUNT: ${{ secrets.SSH_STORAGE_ACCOUNT }}
      SSH_KEY_NETWORK_INFO: ${{ secrets.SSH_NETWORK_INFO }}
      SSH_DEPLOY_KEY_INFO: |
        [
          { "orgAndRepo": "im-platform/storage-account-network-rules", "envName" : "SSH_KEY_STORAGE_ACCOUNT" },
          { "orgAndRepo": "im-platform/network-information", "envName" : "SSH_KEY_NETWORK_INFO" }
        ]

    defaults:
      run:
        shell: bash
        working-directory: '${{ env.TF_WORKING_DIR }}'

    steps:
      - name: Get GitHub Deployments for Entity
        id: get-deployments
        continue-on-error: true
        uses: im-open/get-github-deployments@v1
        with:
          entity: '' # TODO:  Add the entity name from the 'metadata.name' field in the catalog-info.yml file
          instance: ${{ matrix.instance }}
          environment: ${{ matrix.environment }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine latest release
        id: get-latest
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          script: |
            const deployments = JSON.parse('${{ steps.get-deployments.outputs.deployments }}');
            if (!deployments || deployments.length === 0 || !deployments.some(d => d.status === 'SUCCESS')) {
              core.info('No successful deployments found.  Defaulting to main.');
              core.setOutput('VERSION', 'main');
              return;
            }
            
            const successfulDeployments = deployments.filter(d => d.status === 'SUCCESS').sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const latestDeployment = successfulDeployments[0];
            core.setOutput('VERSION', latestDeployment.ref);

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-latest.outputs.VERSION }}

      # Allows pulling modules from the repo instead of artifactory
      - name: Setup SSH Keys and known_hosts
        uses: im-open/setup-deploy-keys@v1.2
        with:
          deploy-key-info: ${{ env.SSH_DEPLOY_KEY_INFO }}

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '${{ env.TF_VERSION }}'

      - name: Terraform Init
        id: init
        run: terraform init

      # TODO: Remove the pagerduty token if not configuring pagerduty.  If using pagerduty verify 'pagerduty_token' is the name of the variable that tf expects
      # TODO: Add any other secrets that would be required for a tf plan to succeed.  Since this is a multi-line command every line except the last will need a \ on the end of it
      # PAGERDUTY_API_KEY is an org-level secret
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -lock-timeout=90s \
            -var="pagerduty_token=${{ secrets.PAGERDUTY_API_KEY }}"
        continue-on-error: true

      - name: Fail the Job if terraform exited
        if: steps.plan.outputs.exitcode == '1'
        run: |
          echo "Terraform plan failed"
          exit 1

      - name: Trigger PagerDuty when there are changes
        if: steps.plan.outputs.exitcode == '2'
        uses: im-open/create-pagerduty-incident@v1.3
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          service-id: ${{ vars.PAGERDUTY_SERVICE_ID }} # This is an env-level variable
          email: 'svc-hubot@extendhealth.com'
          title: 'Your terraform does not match what was expected!'
          body: 'The workflow found changes in the ${{matrix.environment}} environment.  The workflow expected the infrastructure to match the terraform at ${{ steps.get-latest.outputs.VERSION }}.  See workflow run at ${{ env.REPO_URL }}/actions/runs/${{ github.run_id }} for more details.'

      - name: Fail the Job if a PagerDuty incident was created for ${{ matrix.environment }}
        if: steps.plan.outputs.exitcode == '2'
        run: |
          echo "PagerDuty Incident was created."
          exit 1
