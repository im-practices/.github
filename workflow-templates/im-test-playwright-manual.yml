# Workflow Code: SpunkyHamster_v1   DO NOT REMOVE
# Purpose:
#    Runs Playwright tests in Github Actions with a manual trigger.
#    With the workflow the user specifies when they kick it off manually.
#
# Frequency:
#    - This workflow is intended to be reusable, and used once per repository.
#
# Projects to use this Template with:
#    - Testing projects that use Playwright.
# # TODO: Prerequisites:
#    - Add @estruyf/github-actions-reporter reporter to your playwright config when running in CI.  npm install --dev @estruyf/github-actions-reporter.
#       - playwright.config.ts Example:  
#         reporter: process.env.CI ? [
#             ['list'],
#             ['html'],
#             ['@estruyf/github-actions-reporter'] 
#           ] : [['list'],['html']], 

name: ðŸ§ª Run Playwright Tests
run-name: ðŸ§ª Run Playwright Tests on ${{ inputs.environment == 0 && 'dev' || inputs.environment }} with ${{ inputs.browser-project == 0 && 'chromium' || inputs.browser-project }} browser

concurrency:
  group: playwright-${{ github.event_name == 'workflow_dispatch' && github.run_id || github.ref  }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      branch-tag-sha:
        description: Branch/Tag/SHA; The branch, tag or sha of the selenium tests should be run against.
        required: false
      environment:
        description: The environment to test against
        required: true
        type: choice
        options:
          - dev
          - qa
          - stage
          # - prod # Uncomment this line if you want to test against prod
      browser-project:
        description: Browser - what browser project to use. # Browser projects defined in the playwright.config.ts file.
        type: choice
        options: # TODO: Update this list to match the browser projects in the playwright.config.ts file.
          - chromium
          - firefox
          - webkit
          - all
      config-file:
        description: Config File; The config file to use for the tests.
        required: false
        type: choice
        default: playwright.config.ts
        options:
          - playwright.config.ts
          # - playwright.availability.config.ts # TODO: alternative config file name.  Possibly for different reporters.
      test-filter:
        description: Test Filter - input the test name to run.
        required: false
        default: '' # TODO: Add a default test filter if needed.

permissions:
  id-token: write
  contents: read
  actions: read

env:
  DISPATCH_REF: ${{ inputs.tag == 0 && github.ref_name || inputs.branch-tag-sha }}
  PLAYWRIGHT_TEST_DIR: 'tests/playwright' # TODO: Update this to the path of the playwright test root directory
  PLAYWRIGHT_REPORT_DIR: 'tests/playwright/playwright-report' # TODO: Update this to the path of the playwright report directory
  PLAYWRIGHT_RESULTS_DIR: 'tests/playwright/test-results' # TODO: Update this to the path of the playwright test results directory
  TIMEZONE: America/Denver
  NPM_CACHE_PATH: '**/tests/playwright/node_modules' # TODO: Update this to the path of the node_modules directory in the playwright test root directory
  NODE_VERSION: '20.x' # TODO: Update this to the version of node you want to use for the tests

jobs:
  npm-cache:
    runs-on: im-linux

    defaults:
      run:
        shell: bash

    outputs:
      NPM_CACHE_KEY: ${{ env.NPM_CACHE_KEY }}
      GITHUB_REF: ${{ steps.calculate-ref.outputs.GITHUB_REF }}

    steps:
      - name: Calculate Ref to Checkout
        id: calculate-ref
        run: |
          GITHUB_REF="${{ env.DISPATCH_REF }}"
          echo "GITHUB_REF=$GITHUB_REF" >> $GITHUB_ENV
          echo "GITHUB_REF=$GITHUB_REF" >> $GITHUB_OUTPUT

      - name: Annotate Inputs
        run: |
          echo $'
          | Inputs                  | Value                                                                                     |
          | ----------------------- | ----------------------------------------------------------------------------------------- |
          | Environment             | `${{ inputs.environment }}`                                                               |
          | Branch/Tag              | `${{ env.GITHUB_REF }}`                                                                   |
          | Workflow Branch/Tag     | `${{ github.ref_name }}` - SHA: `${{ github.sha }}`                                       |
          | Browser                 | `${{ inputs.browser-project }}`                                                           |
          | Playwright Config File  | `${{ inputs.config-file }}`                                                               |
          | Test Filter             | `${{ inputs.test-filter != 0 && inputs.test-filter || 'NA' }}`                            |' >> $GITHUB_STEP_SUMMARY

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: Set Cache Keys
        # As long as these files don't change the cache will remain in tact and the time
        # to restore the different packages in the various jobs will be reduced.  If one
        # of the files does change though, a new cache will be uploaded the next time
        # it runs, then subsequent runs should be faster.
        run: echo "NPM_CACHE_KEY=playwright_node_modules-${{ hashFiles('**/tests/playwright/package-lock.json') }}" >> $GITHUB_ENV

      - name: Check for an npm cache
        id: has-cache
        uses: actions/cache@v4
        with:
          lookup-only: true
          key: ${{ env.NPM_CACHE_KEY }}
          path: |
            ${{ env.NPM_CACHE_PATH }}

      # The remaining steps will only be executed if the cache was not found, otherwise they will be skipped.
      # This action creates a post-job step that will upload the node_modules dir to the cache if the job
      # completes successfully.  Subsequent jobs and workflow runs can use this cached version of the node_modules
      # folder if the package-lock.json hasn't changed and it uses a ubuntu-20.04 runner to restore the cache from.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        if: steps.has-cache.outputs.cache-hit != 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Authenticate with GitHub Packages
        if: steps.has-cache.outputs.cache-hit != 'true'
        uses: im-open/authenticate-with-gh-package-registries@v1
        with:
          read-pkg-token: ${{ secrets.READ_PKG_TOKEN }} # This is an org-level secret
          orgs: 'im-client,im-enrollment,im-customer-engagement,im-practices,im-open' # TODO: Verify list of orgs packages will be pulled from  


      - name: NPM Install
        if: steps.has-cache.outputs.cache-hit != 'true'
        working-directory: '${{ env.PLAYWRIGHT_TEST_DIR }}'
        run: |
          echo "Installing NPM"
          npm ci

      - name: Save cache for node_modules directory
        if: steps.has-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ env.NPM_CACHE_KEY }}
          enableCrossOsArchive: true
          path: |
            ${{ env.NPM_CACHE_PATH }}

  playwright-test:
    runs-on: im-linux
    needs: npm-cache
    timeout-minutes: 60

    environment: ${{ inputs.environment }}

    env:
      GITHUB_REF: ${{ needs.npm-cache.outputs.GITHUB_REF }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download npm cache
        id: restore-npm-cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.npm-cache.outputs.NPM_CACHE_KEY }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
          path: |
            ${{ env.NPM_CACHE_PATH }}

      - name: Rebuild Node Modules
        if: steps.restore-npm-cache.outputs.cache-hit == 'true'
        working-directory: '${{ env.PLAYWRIGHT_TEST_DIR }}'
        run: npm rebuild

      - name: Install Playwright Browsers
        working-directory: '${{ env.PLAYWRIGHT_TEST_DIR }}'
        run: npx playwright install ${{ inputs.browser-project == 'all' && '' || inputs.browser-project }} --with-deps

      - name: Run Playwright tests
        working-directory: '${{ env.PLAYWRIGHT_TEST_DIR }}'
        env:
          ENVIRONMENT: ${{ inputs.environment }}
        run: npx playwright test --config ${{ inputs.config-file }} ${{ inputs.browser-project == 'all' && '' || format('--project {0}', inputs.browser-project) }}${{ inputs.test-filter == '' && '' || format(' --grep "{0}"', inputs.test-filter) }}

      - name: Copy Playwright Report to test-results folder
        if: ${{ always()}}
        continue-on-error: true
        working-directory: '${{ github.workspace }}'
        shell: bash
        run: cp -r ${{ env.PLAYWRIGHT_REPORT_DIR }} ${{ env.PLAYWRIGHT_RESULTS_DIR }}/reports

      - name: Upload Playwright Report
        if: ${{ !cancelled() && always()}}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ${{ env.PLAYWRIGHT_RESULTS_DIR }}
          retention-days: 5
