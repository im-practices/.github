# Workflow Code: AmazedPiglet_v22    DO NOT REMOVE
# Purpose:
#    Gathers the required approvals from stakeholders and attestors, ensures tags
#    are valid for production deployments and runs the migrations against an on-prem
#    database using a username and password when someone kicks it off manually.
#
# Frequency:
#   - Each deployable on-prem db in the repository should have their own copy of this workflow rather than trying to deploy several
#     on-prem databases with the same workflow.  If the db is deployed as part of a group, the db still needs its own copy of this
#     workflow but it will be streamlined (instructions below) since the Deploy Multiple Items workflow handles many of these checks.
#
# Projects to use this Template with:
#    - On-Prem Database (Core Template)
#
# TODO: Prerequisites:
#    - Work with Data Practices to get an account with the same permissions as were used in the service account you used to deploy with previously
#    - Make sure the database login secrets have been added to Vault and are accessible from our self-hosted runners.
#      See https://github.com/im-practices/git-er-done/blob/main/actions/hashicorp-vault-integration.md for information on how to do that.
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#    - Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
#      Generally one board should be set up per database in the repository.

name: Deploy Database to On-Prem Server # TODO: If there are multiple on prem databases in the repo, append the db name to this workflow's file name and update this name
run-name: Deploy ${{ inputs.tag }} to ${{ inputs.environment }}
on:
  # TODO: If the repository has a single deployable artifact or multiple deployables that are deployed independently:
  #       1. Use the workflow_dispatch trigger
  #       2. Delete the repository_dispatch trigger and comments below.
  workflow_dispatch:
    inputs:
      tag:
        description: The tag for the release that will be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment:
        description: The environment to deploy to
        required: true
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod

  # TODO: If a repository has multiple deployable artifacts that are deployed together through the 'Deploy Multiple Items' workflow:
  #       1. Uncomment the repository_dispatch trigger
  #       2. Delete the workflow_dispatch trigger
  #       3. Change the env.ENVIRONMENT value from "${{ github.event.inputs.environment }}" to: "${{ github.event.client_payload.environment }}"
  #       4. Change the env.RELEASE_TAG value from "${{ github.event.inputs.tag }}" to: "${{ github.event.client_payload.tag }}"
  #       5. Delete the 'stakeholder-approval' job
  #       6. Delete the 'attestor-approval' job
  #       7. Delete the 'validate-tag-is-in-main-for-prod-deploys' job
  #       8. Replace all instances of "${{ env.ENVIRONMENT }}" with "${{ github.event.client_payload.environment }}"
  #       9. Under the 'deploy-on-prem-db' job, delete the needs property
  #       10. Under the 'update-deployment-board-and-send-teams-notification' job, update the needs property to be: "needs: [deploy-on-prem-db]"
  # repository_dispatch:
  #   types: [<deployable_name>_deploy] # TODO: Replace <deployable_name>.  This will be used in the 'Deploy Multiple Items' workflow to target this deployment workflow.

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  RELEASE_TAG: ${{ github.event.inputs.tag  }} # This is the tag that we'll be deploying
  DB_SERVER_PORT: '1433' # TODO: Verify that this is the correct port
  MIGRATIONS_FOLDER: '' # TODO: Add the path to the migrations folder
  MIGRATIONS_HISTORY_TABLE: 'MigrationHistory' # TODO: Verify this table name
  TIMEZONE: 'america/denver' # TODO: Verify timezone
  VAULT_URL: 'https://vault.mktp.io:8200/'

jobs:
  verify-tag-exists:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    steps:
      - run: |
          echo $'
          | Build Arguments | Value                    |
          | ---             |  ---                     |
          | Environment     | `${{ env.ENVIRONMENT }}` |
          | Tag             | `${{ env.RELEASE_TAG }}` |' >> $GITHUB_STEP_SUMMARY
                
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify Tag Exists
        uses: im-open/verify-git-ref@v1.2.0
        with:
          branch-tag-sha: ${{ env.RELEASE_TAG }}

  # Each env has their own stakeholder approval environment.  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  stakeholder-approval:
    needs: [verify-tag-exists]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ github.event.inputs.environment }} Stakeholder Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
      - name: Approval Received
        run: echo "Stakeholder approval was received"

  # Each env has their own attestor approval environment (meant for QA Attestations).  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  attestor-approval:
    needs: [verify-tag-exists]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ github.event.inputs.environment }} Attestor Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Attestor approval was received or no required reviewers were set for this environment."

  # This job needs to run for all environments because deploy-on-prem-db relies
  # on it but the steps inside this job will only run for the Prod env.
  validate-tag-for-prod-deploys:
    needs: [stakeholder-approval, attestor-approval]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    steps:
      # In this job, always checkout the default branch (not the branch that was provided as an input).  Also use
      # fetch-depth: 0 to retrieve the history and tags so we can check if a tag is reachable from the default branch.
      - name: Checkout Repository
        if: env.ENVIRONMENT == 'prod'
        uses: actions/checkout@v3
        with:
          ref: 'main' # TODO: verify the name of your default branch
          fetch-depth: 0

      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      - uses: im-open/is-tag-reachable-from-default-branch@v1.1.0
        if: env.ENVIRONMENT == 'prod'
        with:
          tag: ${{ env.RELEASE_TAG }}

  # If you want to verify that the Jira ticket being deployed has the proper attestations, there is an action for that.
  # https://github.com/im-open/verify-fields-on-jira-task
  # Set up a new job, or add to an existing one that makes sense, and add a step with that action.
  # Details on how to use the action can be found in the action's README.

  deploy-on-prem-db:
    needs: [validate-tag-for-prod-deploys]
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ github.event.inputs.environment }} # Use inputs context because env context is not available to environment:
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_TAG }}

      - name: Setup Flyway
        uses: im-open/setup-flyway@v1.1.0
        with:
          version: 7.9.2

      # TODO: Use this for any variables that change per environment
      - name: Set Environment Specific Vars
        id: environment-specific-vars
        uses: im-open/set-environment-variables-by-scope@v1.1.1
        with:
          scope: ${{ env.ENVIRONMENT }}
          create-output-variables: true
          input-file: '' # TODO: if you have an input file with your variable substitutions, add them here
        env:
          DB_NAME@dev: ''
          DB_NAME@qa: ''
          DB_NAME@stage demo uat: ''
          DB_NAME@prod: ''
          DB_SERVER_NAME@dev: ''
          DB_SERVER_NAME@qa: ''
          DB_SERVER_NAME@stage demo uat: ''
          DB_SERVER_NAME@prod: ''

      - name: AZ Login
        uses: azure/login@v1
        with:
          # TODO: The Service Principal these credentials are for needs to be given access to login to Vault. See this git-er-done article for more information:
          # https://github.com/im-practices/git-er-done/blob/main/actions/hashicorp-vault-integration.md#setup
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Vault Token
        id: vault_token
        uses: im-open/get-vault-token-for-azure-user@v1.1.0
        with:
          # TODO: Add the Azure Auth Method Role that was setup in Vault and has access to your secrets.
          # See this git-er-done article for more information:
          # https://github.com/im-practices/git-er-done/blob/main/actions/hashicorp-vault-integration.md#setup
          vault-role: ''
          vault-url: '${{ env.VAULT_URL }}'

      - name: Import Secrets
        id: vault-secrets
        uses: hashicorp/vault-action@v2.3.1
        with:
          url: '${{ env.VAULT_URL }}'
          token: '${{ steps.vault_token.outputs.client_token }}'
          # Warning! The formatting on the secrets parameter is intentional. The spaces, pipe, and semi-colon. Every secret, except the last one, needs a semi-colon at the end of the line.
          # See the action's documentation for more information: https://github.com/hashicorp/vault-action
          # TODO: Update <role-name> (including the brackets) with your database Vault role name (see https://github.com/im-practices/git-er-done/blob/main/actions/hashicorp-vault-integration.md#setup).
          secrets: |
            database/static-creds/<role-name> username | SQL_AUTH_USERNAME ;
            database/static-creds/<role-name> password | SQL_AUTH_PASSWORD

      - name: Deploy migrations
        uses: im-open/run-flyway-command@v1.4.0
        with:
          db-server-name: '${{ steps.environment-specific-vars.outputs.DB_SERVER_NAME }}'
          db-server-port: '${{ env.DB_SERVER_PORT }}'
          db-name: '${{ steps.environment-specific-vars.outputs.DB_NAME }}'
          migration-files-path: '${{ env.MIGRATIONS_FOLDER }}'
          flyway-command: 'migrate'
          migration-history-table: '${{ env.MIGRATIONS_HISTORY_TABLE }}'
          baseline-version: '0'
          managed-schemas: 'dbo' # TODO: Update this csv with the schemas that flyway manages (e.g. 'dbo,CustomSchema,OtherSchema')
          enable-out-of-order: 'false'
          use-integrated-security: 'false'
          username: '${{ steps.vault-secrets.outputs.SQL_AUTH_USERNAME }}'
          password: '${{ steps.vault-secrets.outputs.SQL_AUTH_PASSWORD }}'

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear

  update-deployment-board-and-send-teams-notification:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    needs: [deploy-on-prem-db]
    if: always()
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      # If you want to automatically transition a deployment task in Jira based on the success or failure of this workflow, this job would be a good place for that.
      # There is an action that can do just that: https://github.com/im-open/transition-jira-tasks-by-query
      # Details on how to set up that action can be found in the action's README.
      # There are secrets for the username and password already set up as org level secrets called JIRA_USERNAME and JIRA_PASSWORD.

      - uses: im-open/workflow-conclusion@v2.1.1
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo

      # https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.5.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          environment: ${{ env.ENVIRONMENT }}
          board-number: '' # TODO: Add the automated deployment board number or remove if not using an automated deployment project board.
          ref: ${{ env.RELEASE_TAG}}
          ref-type: 'tag'
          #deployable-type: '' # TODO:  If there are multiple deployables in the repository, add a string type like MFE/DB/API
          deploy-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          timezone: ${{ env.TIMEZONE }}

      - name: Send Status to Teams
        if: always()
        uses: im-open/post-status-to-teams-action@v1.3.1
        with:
          title: ${{ env.DB_NAME }} Deployment to On-Prem Server
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # This is a repo-level secret (unless 'environment:' has been added to this job)
          timezone: ${{ env.TIMEZONE }}
          custom-facts: |
            [
              { "name": "Workflow", "value": "${{ github.workflow }}" },
              { "name": "Run", "value": "${{ github.run_id }}" },
              { "name": "Actor", "value": "${{ github.actor }}" }
            ]

      - name: Send Status to Deployment Notifications Channel for Prod Deploys
        if: always() && env.ENVIRONMENT == 'prod' && steps.conclusion.outputs.workflow_conclusion == 'success'
        uses: im-open/post-status-to-teams-action@v1.3.1
        with:
          title: ${{ env.DB_NAME }} Deployment to On-Prem Server # TODO Verify this title gives enough info since it will be posted to the Prod Notifications channel
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.DEPLOY_NOTIFICATIONS_CHANNEL }} # This is an org-level secret
          timezone: ${{ env.TIMEZONE }}
          include-default-facts: false # This cuts down on the message size for the prod room
          custom-facts: |
            [
              { "name": "Actor", "value": "${{ github.actor }}" },
              { "name": "Version", "value": "${{ env.RELEASE_TAG }}" }
            ]
