# Workflow Code: AmazedPiglet_v35    DO NOT REMOVE
# Purpose:
#    Gathers the required approvals from stakeholders and attestors, ensures tags
#    are valid for production deployments and runs the migrations against an on-prem
#    database using a username and password when someone kicks it off manually.
#
# Frequency:
#   - Each deployable on-prem db in the repository should have their own copy of this workflow rather than trying to deploy several
#     on-prem databases with the same workflow.  If the db is deployed as part of a group, the db still needs its own copy of this
#     workflow but it will be streamlined (instructions below) since the Deploy Multiple Items workflow handles many of these checks.
#
# Projects to use this Template with:
#    - On-Prem Database (Core Template)
#
# TODO: Prerequisites:
#    - Work with Data Practices to get an account with the same permissions as were used in the service account you used to deploy with previously
#    - Make sure the database login secrets have been added to Vault and are accessible from our self-hosted runners.
#      See https://github.com/im-practices/git-er-done/blob/main/actions/hashicorp-vault-integration.md for information on how to do that.
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#    - Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/docs/actions/deployment-board.md
#      Generally one board should be set up per database in the repository.

name: Deploy Database to On-Prem Server # TODO: If there are multiple on prem databases in the repo, append the db name to this workflow's file name and update this name
run-name: Deploy ${{ inputs.tag }} to ${{ inputs.environment }}
on:
  # TODO: If the repository has a single deployable artifact or multiple deployables that are deployed independently:
  #       1. Use the workflow_dispatch trigger
  #       2. Delete the repository_dispatch trigger and comments below.
  workflow_dispatch:
    inputs:
      tag:
        description: The tag for the release that will be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment:
        description: The environment to deploy to
        required: true
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod

  # TODO: If a repository has multiple deployable artifacts that are deployed together through the 'Deploy Multiple Items' workflow:
  #       1. Uncomment the repository_dispatch trigger
  #       2. Delete the workflow_dispatch trigger
  #       3. Change the env.ENVIRONMENT value from "${{ inputs.environment }}" to: "${{ github.event.client_payload.environment }}"
  #       4. Change the env.RELEASE_TAG value from "${{ inputs.tag }}" to: "${{ github.event.client_payload.tag }}"
  #       5. Delete the 'stakeholder-approval' job
  #       6. Delete the 'attestor-approval' job
  #       7. Delete the 'validate-tag-is-in-main-for-prod-deploys' job
  #       8. Replace all instances of "${{ env.ENVIRONMENT }}" with "${{ github.event.client_payload.environment }}"
  #       9. Under the 'deploy-on-prem-db' job, delete the needs property
  #       10. Under the 'update-github-deployments-and-send-teams-notification' job, update the needs property to be: "needs: [deploy-on-prem-db]"
  # repository_dispatch:
  #   types: [<deployable_name>_deploy] # TODO: Replace <deployable_name>.  This will be used in the 'Deploy Multiple Items' workflow to target this deployment workflow.

permissions:
  # Required for secretless azure access and deploys
  id-token: write
  contents: read
  # Required for create-github-deployment
  deployments: write
  # Required for update-deployment-board
  # TODO: Remove once techhub deployments are fully functional
  repository-projects: write
  issues: write
  actions: read

env:
  ENVIRONMENT: ${{ inputs.environment }}
  RELEASE_TAG: ${{ inputs.tag  }} # This is the tag that we'll be deploying
  DB_SERVER_PORT: '1433' # TODO: Verify that this is the correct port
  MIGRATIONS_FOLDER: '' # TODO: Add the path to the migrations folder
  MIGRATIONS_HISTORY_TABLE: 'MigrationHistory' # TODO: Verify this table name
  VAULT_URL: 'https://vault.mktp.io:8200/'

jobs:
  # This job utilizes a reusable workflow which will:
  #   1 - Verify the tag provided is a valid ref.
  #   2 - If deploying to a production environment, verify the tag is reachable from the default branch.
  setup-deployment-workflow:
    uses: im-practices/.github/.github/workflows/im-reusable-setup-deployment-workflow.yml@v2
    with:
      ref-to-deploy: ${{ inputs.tag }}
      deployment-environment: ${{ inputs.environment }}
      verify-release-production-ready: false # Set to false since db projects generally do not have an associated release
      # production-environments: 'prod,prod-secondary'  # TODO:  Adjust and include the production-environments if necessary (some apps may need to add stage/stage-secondary to this list)
      # default-branch: main # TODO:  Update and include this arg if the default branch is not main
      # workflow-summary : | # TODO:  If desired, the workflow summary that is generated can be overridden by providing this custom value.

  # Each env has their own stakeholder approval environment.  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.

  stakeholder-approval:
    needs: [setup-deployment-workflow]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ inputs.environment }} Stakeholder Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
      - name: Approval Received
        run: echo "Stakeholder approval was received"

  # Each env has their own attestor approval environment (meant for QA Attestations).  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  attestor-approval:
    needs: [setup-deployment-workflow]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ inputs.environment }} Attestor Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Attestor approval was received or no required reviewers were set for this environment."

  deploy-on-prem-db:
    needs: [stakeholder-approval, attestor-approval]
    runs-on: [self-hosted, im-linux]
    environment: ${{ inputs.environment }} # Use inputs context because env context is not available to environment:
    outputs:
      DB_NAME: ${{ steps.environment-specific-vars.outputs.DB_NAME }}

    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_TAG }}

      - name: Setup Flyway
        uses: im-open/setup-flyway@v1.1
        with:
          version: 7.9.2

      # TODO: Use this for any variables that change per environment
      - name: Set Environment Specific Vars
        id: environment-specific-vars
        uses: im-open/set-environment-variables-by-scope@v1.1
        with:
          scope: ${{ env.ENVIRONMENT }}
          create-output-variables: true
          input-file: '' # TODO: if you have an input file with your variable substitutions, add them here
        env:
          DB_NAME@dev: ''
          DB_NAME@qa: ''
          DB_NAME@stage demo uat: ''
          DB_NAME@prod: ''
          DB_SERVER_NAME@dev: ''
          DB_SERVER_NAME@qa: ''
          DB_SERVER_NAME@stage demo uat: ''
          DB_SERVER_NAME@prod: ''

      - name: AZ Login
        id: login
        uses: azure/login@v2
        with:
          # This is an org-level variable
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          # These are env-level variables
          subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          client-id: ${{ vars.ARM_CLIENT_ID }}

      - name: Get Vault Token
        id: vault_token
        uses: im-open/get-vault-token-for-azure-user@v1.1
        with:
          # TODO: Add the Azure Auth Method Role that was setup in Vault and has access to your secrets.
          # See this git-er-done article for more information:
          # https://github.com/im-practices/git-er-done/blob/main/actions/hashicorp-vault-integration.md#setup
          vault-role: ''
          vault-url: '${{ env.VAULT_URL }}'

      - name: Import Secrets
        id: vault-secrets
        uses: hashicorp/vault-action@v3
        with:
          url: '${{ env.VAULT_URL }}'
          token: '${{ steps.vault_token.outputs.client_token }}'
          # Warning! The formatting on the secrets parameter is intentional. The spaces, pipe, and semi-colon. Every secret, except the last one, needs a semi-colon at the end of the line.
          # See the action's documentation for more information: https://github.com/hashicorp/vault-action
          # TODO: Update <role-name> (including the brackets) with your database Vault role name (see https://github.com/im-practices/git-er-done/blob/main/actions/hashicorp-vault-integration.md#setup).
          secrets: |
            database/static-creds/<role-name> username | SQL_AUTH_USERNAME ;
            database/static-creds/<role-name> password | SQL_AUTH_PASSWORD

      - name: Deploy migrations
        uses: im-open/run-flyway-command@v1.5
        with:
          db-server-name: '${{ steps.environment-specific-vars.outputs.DB_SERVER_NAME }}'
          db-server-port: '${{ env.DB_SERVER_PORT }}'
          db-name: '${{ steps.environment-specific-vars.outputs.DB_NAME }}'
          migration-files-path: '${{ env.MIGRATIONS_FOLDER }}'
          flyway-command: 'migrate'
          migration-history-table: '${{ env.MIGRATIONS_HISTORY_TABLE }}'
          baseline-version: '0'
          managed-schemas: 'dbo' # TODO: Update this csv with the schemas that flyway manages (e.g. 'dbo,CustomSchema,OtherSchema')
          enable-out-of-order: 'false'
          use-integrated-security: 'false'
          username: '${{ steps.vault-secrets.outputs.SQL_AUTH_USERNAME }}'
          password: '${{ steps.vault-secrets.outputs.SQL_AUTH_PASSWORD }}'

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear

  # This job utilizes a reusable workflow which will:
  #  1 - Update the deployment board based on the workflow conclusion
  #  2 - Post a deployment status in the repo owner's Teams channel (connected to the MS_TEAMS_URI secret)
  #  3 - Post a deployment status in the Deployment Notifications Teams channel if the deploy is for prod, is successful and the flag to do so is not set to false
  update-github-deployments-and-send-teams-notification:
    needs: [deploy-on-prem-db]
    if: always()
    uses: im-practices/.github/.github/workflows/im-reusable-finish-deployment-workflow.yml@v2
    with:
      # Required Inputs
      deployment-environment: ${{ inputs.environment }} # The environment/target that was deployed to (dev, qa, stage, stage-secondary, uat, demo, prod, prod-secondary)
      gh-secrets-environment: ${{ inputs.environment }} # The GitHub environment that secrets are pulled from
      release-tag: ${{ inputs.tag }}
      title-of-teams-post: 'Deploy ${{ needs.deploy-on-prem-db.outputs.DB_NAME }} ${{ inputs.tag }} to ${{ inputs.environment }}' # TODO:  Verify title to ensure it is descriptive/readable.
      ms-teams-uri: ${{ vars.MS_TEAMS_URI }}
      deploy-notifications-channel: ${{ vars.DEPLOY_NOTIFICATIONS_CHANNEL }}
      # Inputs for TechHub deployment tracking
      # entity: '' # TODO: This the catalog-info.yml value in metadata.name value
      # instance: '' # TODO: This the specific target deployment location, i.e., testing-slot-1, primary-app-service, failover-slot-2, NA26-production-slot

      # Optional Inputs with their default values.  These items can be removed if the default value does not need to be adjusted.
      # post-status-in-deployment-notifications-channel: true # TODO:  Include this arg and set to false if you do not want a status post in the Deployment Notifications channel for prod deploys
      # timezone: 'america/denver'                            # TODO:  Include this argument and update if your timezone is not america/denver
      # deployment-board-number: 1                            # TODO:  Include this argument and update if your deployment board is not 1
      # deployable-type: ''                                   # TODO:  If there are multiple deployables in the repository, add a string type like MFE/DB/API for the deployment board
      # TODO:  These are the custom facts that will be included the different Teams posts by default.  If adjusting the facts that are supplied, they must be a valid JSON array.
      # custom-facts-for-team-channel: |
      #   [
      #     { "name": "Workflow", "value": "${{ github.workflow }}" },
      #     { "name": "Run", "value": "${{ github.run_id }}" },
      #     { "name": "Actor", "value": "${{ github.actor }}" },
      #     { "name": "Version", "value": "${{ inputs.tag }}" }
      #   ]
      # custom-facts-for-deployment-notifications-channel: |
      #   [
      #     { "name": "Actor", "value": "${{ github.actor }}" },
      #     { "name": "Version", "value": "${{ inputs.tag }}" }
      #   ]
