name: 'Package Push Nuget Workflow'

# Note: This workflow has a couple of steps that can be used for determining the version:
# - use package.json value,
# - use current git tag value,
# - increment current git tag value,
# - or a workflow input
# Choose the appropriate strategy and delete the others.  If the version hasn't been incremented properly this action may fail if duplicate versions are detected.

on:
  # TODO:  Verify triggers
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      version:
        description: 'The version for the new published package'

# TODO:  Make sure the .csproj file has been updated with the appropriate values required for GH Packages
# https://github.com/im-practices/git-er-done/blob/main/packages/publish-nuget.md

jobs:
  env:
    #CSPROJ_NAME: '' # TODO:  If you have an older project, add the name of your csproj file so it can be built with the nuget command directly.

  publish-to-gpr:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' # TODO:  Update if using a different trigger
    runs-on: [self-hosted, ubuntu-20.04]
    defaults:
      run:
        shell: bash
        working-directory: '' # TODO:  Add the path to the project that generates a nuget package

    steps:
      - uses: actions/checkout@v2

      # TODO:  If you are using any nuget/npm packages from GitHub Packages uncomment this step
      # - name: Authenticate with GitHub Packages
      #   uses: im-open/authenticate-with-gh-package-registries@v1.0.1
      #   with:
      #     github-token: ${{ secrets.READ_PKG_TOKEN }} # This is an org level secret

      # TODO:  This can be used if you want this workflow to get the current git tag to use as the package version.  Delete if you are using another version method.
      # - name: Set Tag to current git tag
      #   uses: im-open/git-tag@v1.0.1
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     prefix: '' # TODO:  Add the prefix value if you are using it.  Some projects include db- or bff- as the prefix on their tags.

      # TODO:  This can be used if you want to use git tags for the version and you want this workflow to be the one that increments the version.  Delete if you are using another version method.
      # - name: Set Tag to current git tag plus 1 and push tag to repo
      #   uses: im-open/git-tag@v1.0.1
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     push-new-tag-to-repo: true
      #     increment-patch: true
      #     prefix: '' # TODO:  Add the prefix value if you are using it.  Some projects include db- or bff- as the prefix on their tags.

      # TODO:  Choose which pack to use.
      #  - The first pack relies on the version already being updated in the csproj.
      #  - The second pack will rely on one of the tag methods above being uncommented.
      #  - The third pack uses an input from a workflow_dispatch event.  This could be modified to use a payload from a repository_dispatch event as well.

      # - name: Pack with version in csproj
      #   run: dotnet pack --configuration Release

      # - name: Pack with version from env.Tag
      #   run: dotnet pack --configuration Release -p:PackageVersion=${{ env.TAG }}

      # - name: Pack with version input
      #   run: dotnet pack --configuration Release -p:PackageVersion=${{ github.event.inputs.version }}

      # TODO:  If this is an older project you may need to use the nuget command directly and add options as applicable.
      # - run: nuget pack ${{ env.CSPROJ_NAME }} -Build -Properties Configuration=Release;version="${{ env.TAG }}"

      - name: Push
        run: |
          nupkg=$(find . -type f -name "*.nupkg")
          dotnet nuget push "$nupkg" --source "https://nuget.pkg.github.com/im-practices/index.json" --api-key ${{ secrets.GITHUB_TOKEN }}
