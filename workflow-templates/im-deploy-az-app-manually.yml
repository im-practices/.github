# Workflow Code: AmbitiousLizard_v29    DO NOT REMOVE
# Purpose:
#    Gathers various stakeholder and attestor approvals, downloads artifacts from a release
#    with the specified tags, makes changes to any configuration files for the specified
#    environments and deploys the pre-built artifacts to the Azure App Service or Function.
#    Each deployable project in a solution should have their own deployment workflow.
#
# Frequency:
#    - Each deployable app service/function in the repository should have their own copy of
#      this workflow rather than trying to deploy several app services or functions with the
#      same workflow.  If the app is deployed as part of a group, the app still needs its own
#      copy of this workflow but it will be streamlined (instructions below) since the Deploy
#      Multiple Items workflow handles many of these checks.
#
# Projects to use this Template with:
#    - Azure App Service or Function (Core Template)
#
# TODO Prerequisites:
#    - Make sure the az secrets have been added to the environment in GitHub
#    - Make sure the scm restrictions (terraform) include the prod github runners (previously it had just octopus)
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#    - Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
#      Generally one board should be set up per app service/function in the repository.

name: Manually deploy AZ App # TODO: If there are multiple app service/functions in the repo, append the project name (svc/bff/mfe/etc) to this and the actual file name
on:
  # TODO: If the repository has a single deployable artifact or multiple deployables that are deployed independently:
  #       1. Use the workflow_dispatch trigger
  #       2. Delete the repository_dispatch trigger and comments below.
  workflow_dispatch:
    inputs:
      tag:
        description: The tag for the release that will be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment:
        description: The environment to deploy to
        required: true
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod

  # TODO: If a repository has multiple deployable artifacts that are deployed together through the 'Deploy Multiple Items' workflow:
  #       1. Uncomment the repository_dispatch trigger
  #       2. Delete the workflow_dispatch trigger
  #       3. Change the env.ENVIRONMENT value from "${{ github.event.inputs.environment }}" to: "${{ github.event.client_payload.environment }}"
  #       4. Change the env.RELEASE_TAG value from "${{ github.event.inputs.tag }}" to: "${{ github.event.client_payload.tag }}"
  #       5. Under the 'set-vars' job:
  #          a. Delete the 'Checkout Repository' step
  #          b. Delete the 'Verify Tag Exists' step
  #       6. Delete the 'stakeholder-approval' job
  #       7. Delete the 'attestor-approval' job
  #       8. Delete the 'validate-tag-is-in-main-for-prod-deploys' job
  #       9. Under the 'deploy-code' job, update the needs property to be: "needs: [set-vars]"
  # repository_dispatch:
  #   types: [<deployable_name>_deploy] # TODO: Replace <deployable_name>.  This will be used in the 'Deploy Multiple Items' workflow to target this deployment workflow.

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  RELEASE_TAG: ${{ github.event.inputs.tag }} # This is the tag that we'll be deploying
  TIMEZONE: 'america/denver' # TODO: Verify timezone

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    outputs:
      # To use these values: ${{ needs.set-vars.outputs.<OUTPUT_NAME> }}
      RESOURCE_GROUP: ${{ steps.set-variables.outputs.RESOURCE_GROUP }}
      AZ_APP_NAME: ${{ steps.set-variables.outputs.AZ_APP_NAME }}
      APP_INSIGHTS_NAME: ${{ steps.set-variables.outputs.APP_INSIGHTS_NAME }}

    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Verify Tag Exists
        uses: im-open/verify-git-ref@v1.1.0
        with:
          branch-tag-sha: ${{ env.RELEASE_TAG }}

      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables
        id: set-variables
        uses: im-open/set-environment-variables-by-scope@v1.0.6
        with:
          scope: ${{ env.ENVIRONMENT }}
          create-output-variables: true
        env:
          # This variable is used to swap slots and annotate app insights
          RESOURCE_GROUP@dev: ''
          RESOURCE_GROUP@qa: ''
          RESOURCE_GROUP@stage: ''
          RESOURCE_GROUP@demo: ''
          RESOURCE_GROUP@uat: ''
          RESOURCE_GROUP@prod: ''
          # This variable is used to deploy the app, swap slots, annotate app insights and send a teams notification
          AZ_APP_NAME@dev: ''
          AZ_APP_NAME@qa: ''
          AZ_APP_NAME@stage: ''
          AZ_APP_NAME@demo: ''
          AZ_APP_NAME@uat: ''
          AZ_APP_NAME@prod: ''
          # This variable is used to annotate app insights
          APP_INSIGHTS_NAME@dev: ''
          APP_INSIGHTS_NAME@qa: ''
          APP_INSIGHTS_NAME@stage: ''
          APP_INSIGHTS_NAME@demo: ''
          APP_INSIGHTS_NAME@uat: ''
          APP_INSIGHTS_NAME@prod: ''

  # Each env has their own stakeholder approval environment.  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  stakeholder-approval:
    needs: [set-vars]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ github.event.inputs.environment }} Stakeholder Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Stakeholder approval was received or no required reviewers were set for this environment."

  # Each env has their own attestor approval environment (meant for QA Attestations).  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  attestor-approval:
    needs: [set-vars]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ github.event.inputs.environment }} Attestor Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Attestor approval was received or no required reviewers were set for this environment."

  # This job needs to run for all environments because deploy-code relies
  # on it but the steps inside this job will only run for the Prod env.
  validate-tag-is-in-main-for-prod-deploys:
    needs: [set-vars, stakeholder-approval, attestor-approval]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      # In this job, always checkout the default branch (not the tag that was provided as an input).  Also use
      # fetch-depth: 0 to retrieve the history and tags so we can check if a tag is reachable from the default branch.
      - name: Checkout Repository
        if: env.ENVIRONMENT == 'prod'
        uses: actions/checkout@v2
        with:
          ref: 'main' # TODO: verify the name of your default branch
          fetch-depth: 0

      - uses: im-open/is-tag-reachable-from-default-branch@v1.0.1
        if: env.ENVIRONMENT == 'prod'
        with:
          tag: ${{ env.RELEASE_TAG }}

      - uses: im-open/is-release-production-ready@v1.0.1
        if: env.ENVIRONMENT == 'prod'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ env.RELEASE_TAG }}
          fail-for-prerelease: true # This only runs for prod environments, so if the release is not production ready it should fail

  # If you want to verify that the Jira ticket being deployed has the proper attestations, there is an action for that.
  # https://github.com/im-open/verify-fields-on-jira-task
  # Set up a new job, or add to an existing one that makes sense, and add a step with that action.
  # Details on how to use the action can be found in the action's README.

  deploy-code:
    needs: [set-vars, validate-tag-is-in-main-for-prod-deploys]
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ github.event.inputs.environment }} # Use inputs context because env context is not available to environment:

    env:
      PAGERDUTY_WINDOW_IN_MIN: 30
      PAGERDUTY_WINDOW_DESC: 'Deploying Code to ${{ github.event.inputs.environment }} from GitHub Actions'
      TARGET_SLOT: 'Production'
      AZ_SLOT_NAME: '' # TODO: If using slots, set this to the name of the azure deployment slot.  If this differs per environment, add a new section in the set-vars job above where the value can be set per environment
      ASSET_ZIP: 'published_app.zip' # TODO: If you have multiple deployables, this name is probably different and you need to update the value.
      UNZIPPED_ASSET: 'published_app' # TODO: If you have multiple deployables, this name is probably different and you need to update the value.
      DEPLOY_ZIP: 'deploy.zip' # TODO: remove if this workflow is for an azure function
      AZ_APP_TYPE: 'webapp' # TODO: If this workflow is for an azure function, change this value to functionapp

    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      - name: Download artifacts from release
        uses: im-open/download-release-asset@v1.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          asset-name: ${{ env.ASSET_ZIP }}
          tag-name: ${{ env.RELEASE_TAG }}

      - name: Unzip release asset
        run: |
          unzip -qq ${{ env.ASSET_ZIP }} -d ./${{ env.UNZIPPED_ASSET }}
          sudo chmod -R +rw ./${{ env.UNZIPPED_ASSET }}/

      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables for use with Configuration and Substitution Values
        uses: im-open/set-environment-variables-by-scope@v1.0.6
        with:
          scope: ${{ env.ENVIRONMENT }}
          create-output-variables: true
          input-file: '' # TODO: if you have an input file with your variable substitutions, add them here
        env:
          # TODO: Add the values your app/function needs to be configured with (appsettings.json/local.settings.json/octo var substitution/config changes).  Delete envs that are not used.
          #  - The name of the env (left side of @) (ex: Auth0_Domain) should be added.  The env name can be used in the later variable-substitution and octostache actions for replacement.
          #  - The scope (right side of @) should be dev/qa/stage/uat/demo/prod. This action uses the value of env.ENVIRONMENT to match one of the scopes (envs) below.  Multiple items can be added as well (ex: @stage demo)
          #  - The value for the environment should be included in '' after the colon. (ex: 'wtw-im-dev.auth0.com')
          # Auth0_Domain@dev: 'wtw-im-dev.auth0.com'
          # Auth0_Domain@qa: 'wtw-im-qa.auth0.com'
          # Auth0_Domain@stage demo: 'wtw-im-stage.auth0.com'
          # Auth0_Domain@prod: 'wtw-im-prod.auth0.com'

      # TODO: If you need to do any Octopus variable substitution (i.e. replacing #{OCTO_PLACEHOLDER} in files) use the following action.  Delete if not using.
      # This action works well with the im-open/set-environment-variables-by-scope action. Environment variables set in that action can be utilized by this one.
      # https://github.com/im-open/octostache-action
      - uses: im-open/octostache-action@v3.0.0
        with:
          variables-file: '' # TODO: Add the ./path/file containing the variable substitutions to make, you will need to create this file  See the action for more details.
          files-with-substitutions: '' # TODO: Add the paths to the files to make substitutions in, e.g. ./path/file, ./path/another-file
        env: # TODO: Environment variables can be added that will also be used for substitution (good for secrets). These will override any variable in the variables-file with the same name.

      # TODO: If you need any json, yml or xml file (web.config/app.config/nlog.config) substitutions use the following
      #        action, otherwise delete it. This action won't add or remove items, it will just update the values.
      # This action works well with the im-open/set-environment-variables-by-scope action. Environment variables set in that action can be utilized by this one.
      - uses: microsoft/variable-substitution@v1
        with:
          files: '' # TODO: add a comma separated list of files/patterns, like './MyProj/We*.config, ./MyProj/Nlog.config' (this matches the downloaded asset structure, not the original file structure)
        env:
          # TODO: replace examples with actual substitutions
          # Auth0.Domain: ${{ env.Auth0_Domain }} # Example showing replacement at a nested node (left side) & using the env set in the set-environment-variables-by-scope step above (right side)
          # SecretValue: ${{ secrets.VALUE }} # Example showing replacement of a root level value (left side) with a secret (right side)

      # TODO: Remove this zip step if the workflow is for an azure function
      - name: Zip the published app for faster deployment and uploads
        working-directory: ${{ env.UNZIPPED_ASSET }}
        run: zip -r ../${{ env.DEPLOY_ZIP }} .

      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.1.4
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-id: ${{ secrets.PAGERDUTY_SERVICE_ID }} # This is an env-level secret
          #service-ids: '' # TODO: Provide a comma separated list if there are multiple ids. 'PD01,PD02,PD03'

      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # This is an env-level secret

      # TODO: Uncomment if you want to create a slot to deploy to.  Delete if you have a permanent slot or do not wish to use slots.
      # ARM_SUBSCRIPTION_ID is an env-level secret
      # - name: Create a deployment slot
      #   run: |
      #     az ${{ env.AZ_APP_TYPE }} deployment slot create \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --resource-group ${{ needs.set-vars.outputs.RESOURCE_GROUP }} \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --configuration-source ${{ needs.set-vars.outputs.AZ_APP_NAME }}

      # TODO: remove this step if this workflow is for an azure function
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.set-vars.outputs.AZ_APP_NAME }}
          package: ./${{ env.DEPLOY_ZIP }}
          slot-name: ${{ env.AZ_SLOT_NAME }} # TODO: Delete if not using slots

      # TODO: remove this step if this workflow is for an azure app service
      - name: Deploy to Azure Function
        uses: azure/functions-action@v1.4.4
        with:
          app-name: ${{ needs.set-vars.outputs.AZ_APP_NAME }}
          package: ./${{ env.UNZIPPED_ASSET }}
          slot-name: ${{ env.AZ_SLOT_NAME }} # TODO: Delete if not using slots

      # TODO: Uncomment if using slots and you want to swap them now (as opposed to doing it in another workflow).  Delete this block if you don't.
      # ARM_SUBSCRIPTION_ID is an env-level secret
      # - name: Swap slots
      #   run: |
      #     az ${{ env.AZ_APP_TYPE }} deployment slot swap \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{ needs.set-vars.outputs.RESOURCE_GROUP }} \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --target-slot ${{ env.TARGET_SLOT }}

      # TODO: Uncomment if you want to delete the temporary slot.  Delete this block if you don't.
      # ARM_SUBSCRIPTION_ID is an env-level secret
      # - run: |
      #     az ${{ env.AZ_APP_TYPE }} deployment slot delete \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{ needs.set-vars.outputs.RESOURCE_GROUP }}

      - name: Close the PagerDuty Maintenance Window
        if: always() && steps.open-window.outcome == 'success'
        uses: im-open/close-pagerduty-maintenance-window@v1.0.6
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          maintenance-window-id: ${{ steps.open-window.outputs.maintenance-window-id }}

      # TODO: Delete the following step if not using app insights
      - name: Annotate App Insights
        uses: im-open/create-app-insights-annotation@v1.0.1
        with:
          subscriptionId: ${{ secrets.ARM_SUBSCRIPTION_ID }} # This is an env-level secret
          resourceGroupName: ${{ needs.set-vars.outputs.RESOURCE_GROUP }}
          appInsightsResourceName: '${{ needs.set-vars.outputs.APP_INSIGHTS_NAME }}'
          releaseName: '${{ needs.set-vars.outputs.AZ_APP_NAME }}-${{ env.RELEASE_TAG }}'
          category: 'Deployment'
          customMetadata: 'ProjectName=${{ needs.set-vars.outputs.AZ_APP_NAME }},DeployedBy=${{ github.actor }},RunID=${{ github.run_id }}'

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear

      - name: Delete items with potentially sensitive data
        continue-on-error: true
        run: |
          rm -f ${{ env.ASSET_ZIP }}
          rm -rf ${{ env.UNZIPPED_ASSET }}
          rm -f ${{ env.DEPLOY_ZIP }} # TODO: remove this line if this workflow is for a function

      # TODO: Uncomment if you have a separate workflow for swapping slots and you want to trigger it now.  Delete if you don't.
      #        A dispatch event like this could also trigger other workflows that do things like smoke tests
      # - name: Trigger the Slot Swap
      #   uses: actions/github-script@v4
      #   with:
      #     github-token: ${{ secrets.PIPELINE_BOT_PAT }} # This is an org-level secret #TODO:  make sure im-pipeline-bot has at least write access to your repo
      #     script: |
      #       github.repos.createDispatchEvent({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         event_type: "swap_slots", # TODO: verify the other workflow has a repository_dispatch event that accepts the swap_slots type.
      #         client_payload: {
      #           environment: "${{ env.ENVIRONMENT }}"
      #         }
      #       });

  update-deployment-board-and-send-teams-notification:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    needs: [set-vars, deploy-code]
    if: always()
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      # If you want to automatically transition a deployment task in Jira based on the success or failure of this workflow, this job would be a good place for that.
      # There is an action that can do just that: https://github.com/im-open/transition-jira-tasks-by-query
      # Details on how to set up that action can be found in the action's README.
      # There are secrets for the username and password already set up as org level secrets called JIRA_USERNAME and JIRA_PASSWORD.

      - uses: im-open/workflow-conclusion@v2.0.3
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo

      # https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.4.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          environment: ${{ env.ENVIRONMENT }}
          board-number: '' # TODO: Add the automated deployment board number or remove if not using an automated deployment project board.
          ref: ${{ env.RELEASE_TAG }}
          ref-type: 'tag'
          #deployable-type: '' # TODO:  If there are multiple deployables in the repository, add a string type like MFE/DB/API
          deploy-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          timezone: ${{ env.TIMEZONE }}

      - name: Send Status to Teams
        if: always()
        uses: im-open/post-status-to-teams-action@v1.1.4
        with:
          title: ${{ needs.set-vars.outputs.AZ_APP_NAME }} Deployment to Azure
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # This is a repo-level secret (unless 'environment:' has been added to this job)
          timezone: ${{ env.TIMEZONE }}
          custom-facts: |
            [
              { "name": "Workflow", "value": "${{ github.workflow }}" },
              { "name": "Run", "value": "${{ github.run_id }}" },
              { "name": "Actor", "value": "${{ github.actor }}" }
            ]

      - name: Send Status to Deployment Notifications Channel for Prod Deploys
        if: always() && env.ENVIRONMENT == 'prod' && steps.conclusion.outputs.workflow_conclusion == 'success'
        uses: im-open/post-status-to-teams-action@v1.1.4
        with:
          title: ${{ needs.set-vars.outputs.AZ_APP_NAME }} Deployment to Azure # TODO Verify this title gives enough info since it will be posted to the Prod Notifications channel
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.DEPLOY_NOTIFICATIONS_CHANNEL }} # This is an org-level secret
          timezone: ${{ env.TIMEZONE }}
          include-default-facts: false # This cuts down on the message size for the prod room
          custom-facts: |
            [
              { "name": "Actor", "value": "${{ github.actor }}" },
              { "name": "Version", "value": "${{ env.RELEASE_TAG }}" }
            ]
