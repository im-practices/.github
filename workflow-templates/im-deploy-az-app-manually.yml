# Workflow Code: AmbitiousLizard_v44    DO NOT REMOVE
# Purpose:
#    Gathers various stakeholder and attestor approvals, downloads artifacts from a release
#    with the specified tags, makes changes to any configuration files for the specified
#    environments and deploys the pre-built artifacts to the Azure App Service or Function.
#    Each deployable project in a solution should have their own deployment workflow.
#
# Frequency:
#    - Each deployable app service/function in the repository should have their own copy of
#      this workflow rather than trying to deploy several app services or functions with the
#      same workflow.  If the app is deployed as part of a group, the app still needs its own
#      copy of this workflow but it will be streamlined (instructions below) since the Deploy
#      Multiple Items workflow handles many of these checks.
#
# Projects to use this Template with:
#    - Azure App Service or Function (Core Template)
#
# TODO Prerequisites:
#    - Make sure the az secrets have been added to the environment in GitHub
#    - Make sure the scm restrictions (terraform) include the prod github runners (previously it had just octopus)
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#    - Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
#      Generally one board should be set up per app service/function in the repository.

name: Manually deploy AZ App # TODO: If there are multiple app service/functions in the repo, append the project name (svc/bff/mfe/etc) to this and the actual file name
run-name: Deploy ${{ inputs.tag }} to ${{ inputs.environment-or-target }} AZ App
on:
  # TODO: If the repository has a single deployable artifact or multiple deployables that are deployed independently:
  #       1. Use the workflow_dispatch trigger
  #       2. Delete the repository_dispatch trigger and comments below.
  workflow_dispatch:
    inputs:
      tag:
        description: The tag for the release that will be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment-or-target:
        description: The environment or secondary region target to deploy to
        required: true
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod
          - stage-secondary
          - prod-secondary

  # TODO: If a repository has multiple deployable artifacts that are deployed together through the 'Deploy Multiple Items' workflow:
  #       1. Uncomment the repository_dispatch trigger
  #       2. Delete the workflow_dispatch trigger
  #       3. Change the inputs.environment-or-target value from "${{ inputs.environment-or-target }}" to: "${{ github.event.client_payload.environment }}"
  #       4. Change the env.RELEASE_TAG value from "${{ inputs.tag }}" to: "${{ github.event.client_payload.tag }}"
  #       5. Under the 'set-vars' job:
  #          a. Delete the 'Checkout Repository' step
  #          b. Delete the 'Verify Tag Exists' step
  #       6. Delete the 'stakeholder-approval' job
  #       7. Delete the 'attestor-approval' job
  #       8. Delete the 'setup-deployment-workflow' job
  #       9. Under the 'deploy-code' job, update the needs property to be: "needs: [set-vars]"
  # repository_dispatch:
  #   types: [<deployable_name>_deploy] # TODO: Replace <deployable_name>.  This will be used in the 'Deploy Multiple Items' workflow to target this deployment workflow.

env:
  RELEASE_TAG: ${{ inputs.tag }} # This is the tag that we'll be deploying

jobs:
  # This job utilizes a reusable workflow which will:
  #   1 - Verify the tag provided is a valid ref.
  #   2 - If deploying to a production environment, verify the tag is reachable from the default branch 
  #       and that the corresponding release is production ready (not pre-release or a draft).
  setup-deployment-workflow:
    uses: im-practices/.github/.github/workflows/im-reusable-setup-deployment-workflow.yml@v2
    with:
      ref-to-deploy: ${{ inputs.tag }}
      deployment-environment: ${{ inputs.environment-or-target }}
      # production-environments: 'prod,prod-secondary'  # TODO:  Adjust and include the production-environments if necessary (some apps may need to add stage/stage-secondary to this list)
      # default-branch: main # TODO:  Update and include this arg if the default branch is not main
      # workflow-summary : | # TODO:  If desired, the workflow summary that is generated can be overridden by providing this custom value.

  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    needs: [setup-deployment-workflow]
    outputs:
      # To use these values: ${{ needs.set-vars.outputs.<OUTPUT_NAME> }}
      TARGET_RESOURCE_GROUP: ${{ steps.set-variables.outputs.TARGET_RESOURCE_GROUP }}
      PRIMARY_RESOURCE_GROUP: ${{ steps.set-variables.outputs.PRIMARY_RESOURCE_GROUP }}
      AZ_APP_NAME: ${{ steps.set-variables.outputs.AZ_APP_NAME }}
      # AZ_APP_MSI: ${{ steps.set-variables.outputs.AZ_APP_MSI }} # TODO: Uncomment if you use an MSI with your app service
      APP_INSIGHTS_NAME: ${{ steps.set-variables.outputs.APP_INSIGHTS_NAME }}
      GITHUB_SECRETS_ENVIRONMENT: ${{ steps.set-variables.outputs.GITHUB_SECRETS_ENVIRONMENT }}
      # VNET: ${{ steps.set-variables.outputs.VNET }} # TODO: Uncomment if you require networking assignment
      # SUBNET: ${{ steps.set-variables.outputs.SUBNET }} # TODO: Uncomment if you require networking assignment

    steps:
      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables
        id: set-variables
        uses: im-open/set-environment-variables-by-scope@v1.1
        with:
          scope: ${{ inputs.environment-or-target }}
          create-output-variables: true
        env:
          # Resource group you are targeting for deploy.  Also this variable is used to delete and re-create azure locks.
          # TODO: Add the NA27 (West Central US) Resource Group to the stage-secondary/prod-secondary to the variables.
          # TODO: Add the NA26 (West US2) Resource Groups to dev/qa/stage/demo/uat/prod to the variables
          TARGET_RESOURCE_GROUP@dev: ''
          TARGET_RESOURCE_GROUP@qa: ''
          TARGET_RESOURCE_GROUP@stage: ''
          TARGET_RESOURCE_GROUP@stage-secondary: ''
          TARGET_RESOURCE_GROUP@demo: ''
          TARGET_RESOURCE_GROUP@uat: ''
          TARGET_RESOURCE_GROUP@prod: ''
          TARGET_RESOURCE_GROUP@prod-secondary: ''

          # Resource group holding the state storage account and managed service identities
          # TODO: Add the Stage/Prod NA26 (West US2) Resource Groups below.
          PRIMARY_RESOURCE_GROUP@dev: ''
          PRIMARY_RESOURCE_GROUP@qa: ''
          PRIMARY_RESOURCE_GROUP@stage stage-secondary: ''
          PRIMARY_RESOURCE_GROUP@demo: ''
          PRIMARY_RESOURCE_GROUP@prod prod-secondary: ''

          # This variable is used to deploy the app, swap slots, annotate app insights and send a teams notification
          AZ_APP_NAME@dev: ''
          AZ_APP_NAME@qa: ''
          AZ_APP_NAME@stage: ''
          AZ_APP_NAME@stage-secondary: ''
          AZ_APP_NAME@demo: ''
          AZ_APP_NAME@uat: ''
          AZ_APP_NAME@prod: ''
          AZ_APP_NAME@prod-secondary: ''

          # TODO: Uncomment if you use a (User Assigned) MSI with your app service
          # This variable is used to assign a managed identity on slot creation
          # AZ_APP_MSI@dev: ''
          # AZ_APP_MSI@qa: ''
          # AZ_APP_MSI@stage stage-secondary: ''
          # AZ_APP_MSI@demo: ''
          # AZ_APP_MSI@uat: ''
          # AZ_APP_MSI@prod prod-secondary: ''

          # TODO: Add the NA26 (West Us2) AppInsights Instances to the variables
          # This variable is used to annotate app insights
          APP_INSIGHTS_NAME@dev: ''
          APP_INSIGHTS_NAME@qa: ''
          APP_INSIGHTS_NAME@stage stage-secondary: '' # Currently appinsights isn't available in West Central US and you have to use West US 2 AppInsights
          APP_INSIGHTS_NAME@demo: ''
          APP_INSIGHTS_NAME@uat: ''
          APP_INSIGHTS_NAME@prod prod-secondary: '' # Currently appinsights isn't available in West Central US and you have to use West US 2 AppInsights

          # Variables used for referencing secrets
          GITHUB_SECRETS_ENVIRONMENT@dev qa stage prod demo: '${{ inputs.environment-or-target }}'
          GITHUB_SECRETS_ENVIRONMENT@stage-secondary: 'stage'
          GITHUB_SECRETS_ENVIRONMENT@prod-secondary: 'prod'

          # TODO: Uncomment if you require networking assignment
          # Used for assigning SUBNET on AZ App Slot creation
          # VNET@dev: ''
          # VNET@qa: ''
          # VNET@stage: ''
          # VNET@stage-secondary: ''
          # VNET@demo: ''
          # VNET@uat: ''
          # VNET@prod: ''
          # VNET@prod-secondary: ''

          # SUBNET@dev: ''
          # SUBNET@qa: ''
          # SUBNET@stage: ''
          # SUBNET@stage-secondary: ''
          # SUBNET@demo: ''
          # SUBNET@uat: ''
          # SUBNET@prod: ''
          # SUBNET@prod-secondary: ''

  # Each env has their own stakeholder approval environment.  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  
  stakeholder-approval:
    needs: [set-vars]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ needs.set-vars.outputs.GITHUB_SECRETS_ENVIRONMENT }} Stakeholder Approval'
    steps:
      - run: |
          echo "The current environment is ${{ needs.set-vars.outputs.GITHUB_SECRETS_ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Stakeholder approval was received or no required reviewers were set for this environment."

  # Each env has their own attestor approval environment (meant for QA Attestations).  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  attestor-approval:
    needs: [set-vars]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ needs.set-vars.outputs.GITHUB_SECRETS_ENVIRONMENT }} Attestor Approval'
    steps:
      - run: |
          echo "Attestor approval was received or no required reviewers were set for this environment."

  deploy-code:
    needs: [set-vars, stakeholder-approval, attestor-approval]
    runs-on: [self-hosted, im-linux]
    environment: ${{ needs.set-vars.outputs.GITHUB_SECRETS_ENVIRONMENT }}

    env:
      PAGERDUTY_WINDOW_IN_MIN: 30
      PAGERDUTY_WINDOW_DESC: 'Deploying Code to ${{ inputs.environment-or-target }} from GitHub Actions'
      TARGET_SLOT: 'Production'
      AZ_SLOT_NAME: '' # TODO: If using slots, set this to the name of the azure deployment slot.  If this differs per environment, add a new section in the set-vars job above where the value can be set per environment
      ASSET_ZIP: 'published_app.zip' # TODO: If you have multiple deployables, this name is probably different and you need to update the value.
      UNZIPPED_ASSET: 'published_app' # TODO: If you have multiple deployables, this name is probably different and you need to update the value.
      DEPLOY_ZIP: 'deploy.zip' # TODO: remove if this workflow is for an azure function
      AZ_APP_TYPE: 'webapp' # TODO: If this workflow is for an azure function, change this value to functionapp

    steps:
      - name: Download artifacts from release
        uses: im-open/download-release-asset@v1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          asset-name: ${{ env.ASSET_ZIP }}
          tag-name: ${{ env.RELEASE_TAG }}

      - name: Unzip release asset
        shell: pwsh
        run: Expand-Archive -LiteralPath './${{ env.ASSET_ZIP }}' -DestinationPath  './${{ env.UNZIPPED_ASSET }}'

      - run: sudo chmod -R +rw ./${{ env.UNZIPPED_ASSET }}/

      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables for use with Configuration and Substitution Values
        uses: im-open/set-environment-variables-by-scope@v1.1
        with:
          scope: ${{ inputs.environment-or-target }}
          create-output-variables: true
          input-file: '' # TODO: if you have an input file with your variable substitutions, add them here
        env:
          # TODO: Add the values your app/function needs to be configured with (appsettings.json/local.settings.json/octo var substitution/config changes).  Delete envs that are not used.
          #  - The name of the env (left side of @) (ex: FedAuth_Domain) should be added.  The env name can be used in the later variable-substitution and octostache actions for replacement.
          #  - The scope (right side of @) should be dev/qa/stage/uat/demo/prod/stage-secondary/prod-secondary. This action uses the value of inputs.environment-or-target to match one of the scopes below.  Multiple items can be added as well (ex: @stage demo)
          #  - The value for the environment should be included in '' after the colon. (ex: 'fedauth.dev.viabenefits.com')
          # FedAuth_Domain@dev: 'fedauth.dev.viabenefits.com'
          # FedAuth_Domain@qa: 'fedauth.qa.viabenefits.com'
          # FedAuth_Domain@stage stage-secondary: 'fedauth.stage.viabenefits.com'
          # FedAuth_Domain@demo: 'fedauth.demo.viabenefits.com'
          # FedAuth_Domain@prod prod-secondary: 'fedauth.viabenefits.com'

      # TODO: If you need to do any Octopus variable substitution (i.e. replacing #{OCTO_PLACEHOLDER} in files) use the following action.  Delete if not using.
      # This action works well with the im-open/set-environment-variables-by-scope action. Environment variables set in that action can be utilized by this one.
      # https://github.com/im-open/octostache-action
      - uses: im-open/octostache-action@v4.0
        with:
          variables-file: '' # TODO: Add the ./path/file containing the variable substitutions to make, you will need to create this file  See the action for more details.
          files-with-substitutions: '' # TODO: Add the paths to the files to make substitutions in, e.g. ./path/file, ./path/another-file
        env: # TODO: Environment variables can be added that will also be used for substitution (good for secrets). These will override any variable in the variables-file with the same name.

      # TODO: If you need any json, yml or xml file (web.config/app.config/nlog.config) substitutions use the following
      #        action, otherwise delete it. This action won't add or remove items, it will just update the values.
      # This action works well with the im-open/set-environment-variables-by-scope action. Environment variables set in that action can be utilized by this one.
      - uses: im-open/variable-substitution@v2
        with:
          files: '' # TODO: add a comma separated list of files/patterns, like './MyProj/We*.config, ./MyProj/Nlog.config' (this matches the downloaded asset structure, not the original file structure)
        env:
          # TODO: replace examples with actual substitutions
          # FedAuth.Domain: ${{ env.FedAuth_Domain }} # Example showing replacement at a nested node (left side) & using the env set in the set-environment-variables-by-scope step above (right side)
          # SecretValue: ${{ secrets.VALUE }} # Example showing replacement of a root level value (left side) with a secret (right side)

      # TODO: Remove this zip step if the workflow is for an azure function
      - name: Zip the published app for faster deployment and uploads
        working-directory: ${{ env.UNZIPPED_ASSET }}
        run: zip -r ../${{ env.DEPLOY_ZIP }} .

      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.2
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-id: ${{ vars.PAGERDUTY_SERVICE_ID }} # This is an env-level variable
          #service-ids: '' # TODO: Provide a comma separated list if there are multiple ids. 'PD01,PD02,PD03'

      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # This is an env-level secret

      # TODO: Uncomment if you have azure locks in stage and prod
      # - name: Delete RGRP Azure Locks
      #   id: remove-locks
      #   if: needs.set-vars.outputs.GITHUB_SECRETS_ENVIRONMENT == 'prod' || needs.set-vars.outputs.GITHUB_SECRETS_ENVIRONMENT == 'stage'
      #   shell: pwsh
      #   env:
      #     LOCK_NAME: ${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }}-delete-locks
      #     RGRP: ${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }}
      #   run: |
      #     az group lock delete --name $Env:LOCK_NAME --resource-group $Env:RGRP
      #     While(
      #       $(az group lock list --resource-group $Env:RGRP --output tsv --query "[?name=='${$Env:LOCK_NAME}'].id")
      #     ){
      #       Start-Sleep -s 0.5
      #     }

      # TODO: Uncomment if you want to create a slot to deploy to.  Delete if you have a permanent slot or do not wish to use slots.
      # ARM_SUBSCRIPTION_ID is an env-level variable
      # - name: Create a deployment slot
      #   run: |
      #     az ${{ env.AZ_APP_TYPE }} deployment slot create \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --resource-group ${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }} \
      #     --subscription ${{ vars.ARM_SUBSCRIPTION_ID }} \
      #     --configuration-source ${{ needs.set-vars.outputs.AZ_APP_NAME }}

      # TODO: Uncomment if you use User Managed Identity in your app service.
      # - name: Assign MSI to slot
      #   if: steps.create-slot.outcome == 'success'
      #   run: |
      #     az webapp identity assign \
      #       --name ${{ needs.set-vars.outputs.AZ_APP_NAME }} \
      #       --resource-group ${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }} \
      #       --slot ${{ env.AZ_SLOT_NAME }} \
      #       --identities /subscriptions/${{ vars.ARM_SUBSCRIPTION_ID }}/resourcegroups/${{ needs.set-vars.outputs.PRIMARY_RESOURCE_GROUP }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${{ needs.set-vars.outputs.AZ_APP_MSI }}

      # TODO Uncomment if you require networking on bootstrap of application.  IE Eventhub, Hashicorp Vault
      # - name: Assign VNet to slot
      #   if: steps.create-slot.outcome == 'success'
      #   run: |
      #     az webapp vnet-integration add \
      #       --name ${{ needs.set-vars.outputs.AZ_APP_NAME }} \
      #       --resource-group ${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }} \
      #       --vnet ${{ needs.set-vars.outputs.VNET }} \
      #       --subnet ${{ needs.set-vars.outputs.SUBNET }} \
      #       --slot ${{ env.AZ_SLOT_NAME }}

      # TODO: remove this step if this workflow is for an azure function
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.set-vars.outputs.AZ_APP_NAME }}
          package: ./${{ env.DEPLOY_ZIP }}
          slot-name: ${{ env.AZ_SLOT_NAME }} # TODO: Delete if not using slots

      # TODO: remove this step if this workflow is for an azure app service
      - name: Deploy to Azure Function
        uses: azure/functions-action@v1.4.8
        with:
          app-name: ${{ needs.set-vars.outputs.AZ_APP_NAME }}
          package: ./${{ env.UNZIPPED_ASSET }}
          slot-name: ${{ env.AZ_SLOT_NAME }} # TODO: Delete if not using slots

      # TODO: Uncomment if using slots and you want to swap them now (as opposed to doing it in another workflow).  Delete this block if you don't.
      # ARM_SUBSCRIPTION_ID is an env-level variable
      # - name: Swap slots
      #   run: |
      #     az ${{ env.AZ_APP_TYPE }} deployment slot swap \
      #     --subscription ${{ vars.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }} \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --target-slot ${{ env.TARGET_SLOT }}

      # TODO: Uncomment if you want to delete the temporary slot.  Delete this block if you don't.
      # ARM_SUBSCRIPTION_ID is an env-level variable
      # - run: |
      #     az ${{ env.AZ_APP_TYPE }} deployment slot delete \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --name ${{ needs.set-vars.outputs.AZ_APP_NAME }}  \
      #     --subscription ${{ vars.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }}

      # TODO: Uncomment if you have azure locks in stage and prod
      # - name: Add RGRP Azure Locks
      #   id: add-locks
      #   if: inputs.environment-or-target == 'prod' || inputs.environment-or-target == 'stage'
      #   run: |
      #     az group lock create --name "${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }}-delete-locks"  --resource-group "${{ needs.set-vars.outputs.TARGET_RESOURCE_GROUP }}" --lock-type CanNotDelete

      - name: Close the PagerDuty Maintenance Window
        if: always() && steps.open-window.outcome == 'success'
        uses: im-open/close-pagerduty-maintenance-window@v1.1
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          maintenance-window-id: ${{ steps.open-window.outputs.maintenance-window-id }}

      # TODO: Delete the following step if not using app insights
      - name: Annotate App Insights
        uses: im-open/create-app-insights-annotation@v1.0
        with:
          subscriptionId: ${{ vars.ARM_SUBSCRIPTION_ID }} # This is an env-level variable
          resourceGroupName: ${{ needs.set-vars.outputs.PRIMARY_RESOURCE_GROUP }}
          appInsightsResourceName: '${{ needs.set-vars.outputs.APP_INSIGHTS_NAME }}'
          releaseName: '${{ needs.set-vars.outputs.AZ_APP_NAME }}-${{ env.RELEASE_TAG }}'
          category: 'Deployment'
          customMetadata: 'ProjectName=${{ needs.set-vars.outputs.AZ_APP_NAME }},DeployedBy=${{ github.actor }},RunID=${{ github.run_id }}'

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear

      - name: Delete items with potentially sensitive data
        if: always()
        continue-on-error: true
        run: |
          rm -f ${{ env.ASSET_ZIP }}
          rm -rf ${{ env.UNZIPPED_ASSET }}
          rm -f ${{ env.DEPLOY_ZIP }} # TODO: remove this line if this workflow is for a function

      # TODO: Uncomment if you have a separate workflow for swapping slots and you want to trigger it now.  Delete if you don't.
      #        A dispatch event like this could also trigger other workflows that do things like smoke tests
      # - name: Trigger the Slot Swap
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.PIPELINE_BOT_PAT }} # This is an org-level secret #TODO:  make sure im-pipeline-bot has at least write access to your repo
      #     script: |
      #       github.rest.repos.createDispatchEvent({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         event_type: "swap_slots", # TODO: verify the other workflow has a repository_dispatch event that accepts the swap_slots type.
      #         client_payload: {
      #           environment: "${{ inputs.environment-or-target }}"
      #         }
      #       });

  # This job utilizes a reusable workflow which will:
  #  1 - Update the deployment board based on the workflow conclusion
  #  2 - Post a deployment status in the repo owner's Teams channel (connected to the MS_TEAMS_URI secret)
  #  3 - Post a deployment status in the Deployment Notifications Teams channel if the deploy is for prod, is successful and the flag to do so is not set to false
  update-deployment-board-and-send-teams-notification:
    needs: [set-vars, deploy-code]
    if: always()
    uses: im-practices/.github/.github/workflows/im-reusable-finish-deployment-workflow.yml@v2
    with:
      # Required Inputs
      deployment-environment: ${{ inputs.environment-or-target }}                     # The environment/target that was deployed to (dev, qa, stage, stage-secondary, uat, demo, prod, prod-secondary)
      gh-secrets-environment: ${{ needs.set-vars.outputs.GITHUB_SECRETS_ENVIRONMENT}} # The GitHub environment that secrets are pulled from
      release-tag: ${{ inputs.tag }}
      title-of-teams-post: 'Deploy ${{ needs.set-vars.outputs.AZ_APP_NAME }} ${{ inputs.tag }} to ${{ inputs.environment-or-target }}' # TODO:  Verify title to ensure it is descriptive/readable.
      
      # Optional Inputs with their default values.  These items can be removed if the default value does not need to be adjusted.
      # post-status-in-deployment-notifications-channel: true # TODO:  Include this arg and set to false if you do not want a status post in the Deployment Notifications channel for prod deploys
      # timezone: 'america/denver'                            # TODO:  Include this argument and update if your timezone is not america/denver
      # deployment-board-number: 1                            # TODO:  Include this argument and update if your deployment board is not 1
      # deployable-type: ''                                   # TODO:  If there are multiple deployables in the repository, add a string type like MFE/DB/API for the deployment board
      # TODO:  These are the custom facts that will be included the different Teams posts by default.  If adjusting the facts that are supplied, they must be a valid JSON array.
      # custom-facts-for-team-channel: |
      #   [
      #     { "name": "Workflow", "value": "${{ github.workflow }}" },
      #     { "name": "Run", "value": "${{ github.run_id }}" },
      #     { "name": "Actor", "value": "${{ github.actor }}" },
      #     { "name": "Version", "value": "${{ inputs.tag }}" }
      #   ]
      # custom-facts-for-deployment-notifications-channel: |
      #   [
      #     { "name": "Actor", "value": "${{ github.actor }}" },
      #     { "name": "Version", "value": "${{ inputs.tag }}" }
      #   ]
    secrets:
      MS_TEAMS_URI: ${{ vars.MS_TEAMS_URI }}
      DEPLOY_NOTIFICATIONS_CHANNEL: ${{ vars.DEPLOY_NOTIFICATIONS_CHANNEL }}