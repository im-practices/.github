name: Manually apply terraform at branch/tag/sha to Dev Subscription
on:
  workflow_dispatch:
    inputs:
      branch-tag-sha:
        description: The branch, tag or sha of the terraform that should be deployed to the Dev subscription.
        required: true
      environment:
        description: The environment to Deploy To.
        required: true

# TODO:  The terraform needs to be switched from on-prem-egress-ips to network-information.

env:
  PAGERDUTY_SERVICE_IDS: '[ "${{secrets.PAGERDUTY_SERVICE_ID}}" ]' # TODO:  Add your PD Service IDs here, the svc id usually has a format of P0XXXXX
  PAGERDUTY_WINDOW_IN_MIN: 30 # TODO:  Verify the length of your PD Maintenance Window
  PAGERDUTY_WINDOW_DESC: 'Deploying Infrastructure to the ${{ github.event.inputs.environment }} environment from GitHub Actions' # TODO:  Verify this description
  PLAN_STORAGE_CONTAINER: 'tfstate'
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ENVIRONMENT: 'public'
  TF_IN_AUTOMATION: 'true'
  TF_VERSION: '~>0.15.5' #TODO:  Verify your version of terraform.
  TF_WORKING_DIR: './${{ github.event.inputs.environment }}' # TODO:  Verify this directory is correct for your repository
  SSH_KEY_CENTRAL_LOGGING: ${{secrets.SSH_CENTRAL_LOGGING}}
  SSH_KEY_STORAGE_ACCOUNT: ${{secrets.SSH_STORAGE_ACCOUNT}}
  SSH_KEY_NETWORK_INFO: ${{secrets.SSH_NETWORK_INFO}}
  DEPLOY_BOARD_NUM: '' # TODO: Add the automated deployment board number or remove if not using an automated deployment project board.

jobs:
  validate-input:
    runs-on: [ubuntu-20.04]
    steps:
      # TODO:  Update if you don't use all these environments in the Dev subscription
      - name: Clean Environment Input
        id: clean-env
        uses: im-open/map-input-action@v1.0.1
        with:
          input: ${{ github.event.inputs.environment }}
          input_map: '{ "Dev": ["dev", "d", "development"], "QA": ["qa", "q"], "Stage": ["stg", "s", "stage"]  }'
          error_on_no_match: true
          custom_error_message: 'The environment must be Dev, QA or Stage'

  tf-plan:
    needs: [validate-input]
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{github.event.inputs.environment}}

    defaults:
      run:
        shell: bash
        working-directory: '${{ env.TF_WORKING_DIR }}'

    outputs:
      tf_plan_name: ${{steps.upload.outputs.tf_plan_name}}
      maintenance_window_id: ${{ steps.open-window.outputs.maintenance-window-id }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch-tag-sha }}

      - name: Setup SSH Keys and known_hosts
        uses: im-open/setup-deploy-keys@1.0.1
        with:
          deploy-key-info: |
            [
              { "orgAndRepo": "im-platform/central-logging", "envName" : "SSH_KEY_CENTRAL_LOGGING" },
              { "orgAndRepo": "im-platform/storage-account-network-rules", "envName" : "SSH_KEY_STORAGE_ACCOUNT" },
              { "orgAndRepo": "im-platform/network-information", "envName" : "SSH_KEY_NETWORK_INFO" }
            ]

      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-ids: ${{ env.PAGERDUTY_SERVICE_IDS }}

      # TODO:  Set the resource group values for each environment supported in the dev subscription.  Delete any environments you aren't using.
      - name: Set the Resource Group
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'RESOURCE_GROUP'
          current-environment: ${{ github.event.inputs.environment }}
          dev-value: ''
          qa-value: ''
          stage-value: ''

      # TODO:  Set the storage account name for each environment supported in the dev subscription.  Delete any environments you aren't using.
      - name: Set the Storage Account
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'STORAGE_ACCOUNT'
          current-environment: ${{ github.event.inputs.environment }}
          dev-value: ''
          qa-value: ''
          stage-value: ''

      - name: AZ Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: '${{ env.TF_VERSION }}'

      - name: Terraform Init
        id: init
        run: terraform init

      # TODO:  Remove the pagerduty token if not configuring pagerduty
      - name: Terraform Plan
        id: plan
        run: |
          mkdir plans
          terraform plan -no-color \
            -var="pagerduty_token=${{secrets.PAGERDUTY_TOKEN}}" \
            -out=./plans/tfplan

      - name: Upload plan to blob storage
        id: upload
        shell: pwsh
        run: |
          $currentTime = Get-Date -Format "yyyymmdd-HHmmss"
          $terraformPlanName = "$(Get-Date -Format 'yyyymmdd-HHmmss').plan.zip"
          $terraformBlobName = "plans/$terraformPlanName"

          Add-Type -Assembly "System.IO.Compression.FileSystem"
          [System.IO.Compression.ZipFile]::CreateFromDirectory("plans", $terraformPlanName)

          echo "Terraform Plan Name: $terraformPlanName"
          echo "current directory:"
          ls -R

          echo "Uploading tf plan to azure storage account ${{env.STORAGE_ACCOUNT}}"
          $key = az storage account keys list --account-name ${{env.STORAGE_ACCOUNT}} --resource-group ${{env.RESOURCE_GROUP}} --query [0].value -o tsv
          az storage blob upload --no-progress --auth-mode key --account-key $key --account-name ${{env.STORAGE_ACCOUNT}} --container-name ${{env.PLAN_STORAGE_CONTAINER}} --file $terraformPlanName --name $terraformBlobName
          echo "The plan was successfully uploaded"

          echo "::set-output name=tf_plan_name::$terraformPlanName"

      - name: Azure logout
        run: |
          az logout
          az cache purge
          az account clear

  technical-approval:
    needs: tf-plan
    runs-on: [ubuntu-20.04]
    environment: 'Technical Approval'
    steps:
      - name: Technical Approval Received
        run: |
          echo "Technical approval on the tf plan was received"

  tf-apply:
    needs: [technical-approval, tf-plan]
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{github.event.inputs.environment}}

    defaults:
      run:
        shell: bash
        working-directory: '${{ env.TF_WORKING_DIR }}'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch-tag-sha }}

      - name: Setup SSH Keys and known_hosts
        uses: im-open/setup-deploy-keys@1.0.1
        with:
          deploy-key-info: |
            [
              { "orgAndRepo": "im-platform/central-logging", "envName" : "SSH_KEY_CENTRAL_LOGGING" },
              { "orgAndRepo": "im-platform/storage-account-network-rules", "envName" : "SSH_KEY_STORAGE_ACCOUNT" },
              { "orgAndRepo": "im-platform/network-information", "envName" : "SSH_KEY_NETWORK_INFO" }
            ]

      # TODO:  Set the resource group values for each environment supported in the dev subscription.  Delete any environments you aren't using.
      - name: Set the Resource Group
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'RESOURCE_GROUP'
          current-environment: ${{ github.event.inputs.environment }}
          dev-value: ''
          qa-value: ''
          stage-value: ''

      # TODO:  Set the storage account name for each environment supported in the dev subscription.  Delete any environments you aren't using.
      - name: Set the Storage Account
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'STORAGE_ACCOUNT'
          current-environment: ${{ github.event.inputs.environment }}
          dev-value: ''
          qa-value: ''
          stage-value: ''

      - name: AZ Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: '${{ env.TF_VERSION }}'

      - name: Download blob
        shell: pwsh
        run: |
          mkdir plans
          echo "Current working directory: $pwd"
          $terraformBlobName = "plans/${{needs.tf-plan.outputs.tf_plan_name}}"
          echo "The blob name is: $terraformBlobName"

          Write-Host "Download blob to ./plans"
          $key = az storage account keys list --account-name ${{env.STORAGE_ACCOUNT}} --resource-group ${{env.RESOURCE_GROUP}} --query [0].value -o tsv
          az storage blob download --no-progress --auth-mode key --account-key $key --account-name ${{env.STORAGE_ACCOUNT}} --container-name ${{env.PLAN_STORAGE_CONTAINER}} --file $pwd/$terraformBlobName --name $terraformBlobName

          try {
            [System.IO.Compression.ZipFile]::ExtractToDirectory("$pwd/$terraformBlobName", "$pwd/plans")    
          }
          catch {
            # Even though it hits this catch block the archive is extracted as expected.  No good explanation.
          }

          Write-Host "Zip extracted"

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -no-color -input=false ./plans/tfplan

      - name: Azure logout
        run: |
          az logout
          az cache purge
          az account clear

      - name: Close the PagerDuty Maintenance Window
        uses: im-open/close-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          maintenance-window-id: ${{needs.tf-plan.outputs.maintenance_window_id}}

  # TODO: Remove if not using an automated deployment project board
  # https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
  update-deployment-board:
    runs-on: [ubuntu-20.04]
    needs: [validate-input, tf-plan, technical-approval, tf-apply]
    if: always()
    steps:
      - uses: im-open/workflow-conclusion@v1.0.0
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN}}
          environment: ${{ github.event.inputs.environment }}
          board-number: ${{ env.DEPLOY_BOARD_NUM}}
          ref: ${{ github.event.inputs.branch-tag-sha }}
          deploy-status: ${{ steps.conclusion.conclusion }}
          timezone: 'america/denver'
