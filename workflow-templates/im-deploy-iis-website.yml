# Workflow Code: FuzzyDragon_v37    DO NOT REMOVE
# Purpose:
#    Gathers various stakeholder and attestor approvals, downloads artifacts from a release
#    with the specified tags, makes changes to any configuration files for the specified environments,
#    stops the app pool, deploys the pre-built artifacts to a target machine then starts the app pool.
#    Each deployable project in a solution should have their own deployment workflow.
#
# Frequency:
#    Each deployable site in the repository should have their own copy of this workflow rather than trying to deploy several
#    websites with the same workflow.  If the site is deployed as part of a group, the site still needs its own copy of this
#    workflow but it will be streamlined (instructions below) since the Deploy Multiple Items workflow handles many of these checks.
#
# Projects to use this Template with:
#    - IIS Site (Core Template)
#
# TODO: Prerequisites:
#     - Make sure the host IIS server has been prepped to accept incoming WinRM Requests
#     - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#     - Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
#       Generally one board should be set up per IIS site in the repository.
#     - The target server must be domain joined. If this is not the case already, create an ITHD ticket to have it joined to
#       the ExtendHealth domain for service account authentication
#     - Create an ITHD ticket to have an ExtendHealth Active directory service account created for each deployment environment.
#       That service account should then be added to an AD Group Policy Object (GPO); that GPO will then be applied to target
#       servers/deployment environments. If this deployment process and the service accounts are no longer needed at some point, let
#       let infrastructure know that they can remove the accounts and GPOs
#     - Make sure the Service account secrets have been added to the environment
#     - Do not use the instructions in the windows server action to prep the target server for WinRM connections,
#       those instructions are more for an open-source user. Instead, WinRM listeners should already be configured on target servers.
#       If a WinRM connection can't be established create an ITHD ticket to have the WinRM listeners fixed or created

name: Deploy IIS Website # TODO: If there are multiple sites in the repo, append the site name to this workflow's file name and update this name
run-name: Deploy ${{ inputs.tag }} to ${{ inputs.environment }}
on:
  # TODO: If the repository has a single deployable artifact or multiple deployables that are deployed independently:
  #       1. Use the workflow_dispatch trigger
  #       2. Delete the repository_dispatch trigger and comments below.
  workflow_dispatch:
    inputs:
      tag:
        description: The tag for the release that will be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment:
        description: The environment to deploy to.
        required: true
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod

  # TODO: If a repository has multiple deployable artifacts that are deployed together through the 'Deploy Multiple Items' workflow:
  #       1. Uncomment the repository_dispatch trigger
  #       2. Delete the workflow_dispatch trigger
  #       3. Change the env.ENVIRONMENT value from "${{ github.event.inputs.environment }}" to: "${{ github.event.client_payload.environment }}"
  #       4. Change the env.RELEASE_TAG value from "${{ github.event.inputs.tag }}" to: "${{ github.event.client_payload.tag }}"
  #       5. Under the 'set-vars' job:
  #          a. Delete the 'Checkout Repository' step
  #          b. Delete the 'Verify Tag Exists' step
  #       6. Delete the 'stakeholder-approval' job
  #       7. Delete the 'attestor-approval' job
  #       8. Delete the 'validate-tag-is-in-main-for-prod-deploys' job
  #       9. Under the 'deploy-site-to-machine' job, update the needs property to be: "needs: [set-vars]"
  # repository_dispatch:
  #   types: [<deployable_name>_deploy] # TODO: Replace <deployable_name>.  This will be used in the 'Deploy Multiple Items' workflow to target this deployment workflow.

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  RELEASE_TAG: ${{ github.event.inputs.tag }}
  TIMEZONE: 'america/denver' # TODO: Verify timezone
  # TODO: Add any global environment vars that don't change based on deployment environment (dev, qa, stage....)

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    outputs:
      IIS_SERVERS: ${{ steps.set-variables.outputs.IIS_SERVERS }}
      DEPLOYMENT_SA_ID: ${{ steps.set-variables.outputs.DEPLOYMENT_SA_ID }}
      APP_POOL_NAME: ${{ steps.set-variables.outputs.APP_POOL_NAME }}
      APP_POOL_SA_ID: ${{ steps.set-variables.outputs.APP_POOL_SA_ID }}
      WEBSITE_NAME: ${{ steps.set-variables.outputs.WEBSITE_NAME }}
      WEBSITE_HOST_HEADER: ${{ steps.set-variables.outputs.WEBSITE_HOST_HEADER }}
      WEBSITE_PATH: ${{ steps.set-variables.outputs.WEBSITE_PATH }}
      WEBSITE_CERT_PATH: ${{ steps.set-variables.outputs.WEBSITE_CERT_PATH }}
      WEBSITE_CERT_FRIENDLY_NAME: ${{ steps.set-variables.outputs.WEBSITE_CERT_FRIENDLY_NAME }}

    steps:
      - run: |
          echo $'
          | Build Arguments | Value                   |
          | ---             |  ---                    |
          | Environment     | `${{ env.ENVIRONMENT}}` |
          | Tag             | `${{ env.RELEASE_TAG}}` |' >> $GITHUB_STEP_SUMMARY

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify Tag Exists
        uses: im-open/verify-git-ref@v1.2
        with:
          branch-tag-sha: ${{ env.RELEASE_TAG }}

      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables
        id: set-variables
        uses: im-open/set-environment-variables-by-scope@v1.1
        with:
          scope: ${{ env.ENVIRONMENT }}
          create-output-variables: true
        env:
          # Each server should be a FQDN name (target-server.extendhealth.com) for the DNS request
          # Format for IIS_SERVERS: "['env-machine-name-1.extendhealth.com', 'env-machine-name-2.extendhealth.com']"
          # TODO:  Fill in the list of machines for each environment.  Remove environments that are not applicable.
          IIS_SERVERS@dev: "['', '']"
          IIS_SERVERS@qa: "['', '']"
          IIS_SERVERS@stage: "['', '']"
          IIS_SERVERS@demo: "['', '']"
          IIS_SERVERS@uat: "['', '']"
          IIS_SERVERS@prod: "['', '']"

          # TODO: Fill in the deployment service account id and remove the environments that are not used.
          # These are the service accounts that have permission to remotely connect to the machine an execute commands.
          DEPLOYMENT_SA_ID@dev: ''
          DEPLOYMENT_SA_ID@qa: ''
          DEPLOYMENT_SA_ID@stage: ''
          DEPLOYMENT_SA_ID@demo: ''
          DEPLOYMENT_SA_ID@uat: ''
          DEPLOYMENT_SA_ID@prod: ''
          # TODO: Fill in the APP_POOL_NAME and remove the environments that are not used.
          APP_POOL_NAME@dev: ''
          APP_POOL_NAME@qa: ''
          APP_POOL_NAME@stage: ''
          APP_POOL_NAME@demo: ''
          APP_POOL_NAME@uat: ''
          APP_POOL_NAME@prod: ''
          # TODO: Fill in the APP_POOL_SA_ID and remove the environments that are not used if the website has not already been created.
          #       If the site already exists, this does not need to be provided and should be removed.
          # These are the service accounts that the app pool will run under.
          APP_POOL_SA_ID@dev: ''
          APP_POOL_SA_ID@qa: ''
          APP_POOL_SA_ID@stage: ''
          APP_POOL_SA_ID@demo: ''
          APP_POOL_SA_ID@uat: ''
          APP_POOL_SA_ID@prod: ''
          # TODO: Fill in the WEBSITE_PATH and remove the environments that are not used.
          WEBSITE_PATH@dev: ''
          WEBSITE_PATH@qa: ''
          WEBSITE_PATH@stage: ''
          WEBSITE_PATH@demo: ''
          WEBSITE_PATH@uat: ''
          WEBSITE_PATH@prod: ''
          # TODO:  Fill in the website name for each environment.  Remove environments that are not applicable.
          WEBSITE_NAME@dev: ''
          WEBSITE_NAME@qa: ''
          WEBSITE_NAME@stage: ''
          WEBSITE_NAME@demo: ''
          WEBSITE_NAME@uat: ''
          WEBSITE_NAME@prod: ''
          # TODO: Fill in the WEBSITE_HOST_HEADER and remove the environments that are not used if the website has not already been created.
          #       If the site already exists, this does not need to be provided and should be removed.
          WEBSITE_HOST_HEADER@dev: ''
          WEBSITE_HOST_HEADER@qa: ''
          WEBSITE_HOST_HEADER@stage: ''
          WEBSITE_HOST_HEADER@demo: ''
          WEBSITE_HOST_HEADER@uat: ''
          WEBSITE_HOST_HEADER@prod: ''
          # TODO: Fill in the WEBSITE_CERT_PATH and remove the environments that are not used if the website has not already been created.
          #       If the site already exists, this does not need to be provided and should be removed.
          WEBSITE_CERT_PATH@dev: ''
          WEBSITE_CERT_PATH@qa: ''
          WEBSITE_CERT_PATH@stage: ''
          WEBSITE_CERT_PATH@demo: ''
          WEBSITE_CERT_PATH@uat: ''
          WEBSITE_CERT_PATH@prod: ''
          # TODO: Fill in the WEBSITE_CERT_FRIENDLY_NAME and remove the environments that are not used if the website has not already been created.
          #       If the site already exists, this does not need to be provided and should be removed..
          WEBSITE_CERT_FRIENDLY_NAME@dev: ''
          WEBSITE_CERT_FRIENDLY_NAME@qa: ''
          WEBSITE_CERT_FRIENDLY_NAME@stage: ''
          WEBSITE_CERT_FRIENDLY_NAME@demo: ''
          WEBSITE_CERT_FRIENDLY_NAME@uat: ''
          WEBSITE_CERT_FRIENDLY_NAME@prod: ''

  # Each env has their own stakeholder approval environment.  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  stakeholder-approval:
    needs: [set-vars]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ github.event.inputs.environment }} Stakeholder Approval' # Use inputs context because env context is not available to environment:
    steps:
      - name: Approval Received
        run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Stakeholder approval was received or no required reviewers were set for this environment."

  # Each env has their own attestor approval environment (meant for QA Attestations).  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  attestor-approval:
    needs: [set-vars]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ github.event.inputs.environment }} Attestor Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Attestor approval was received or no required reviewers were set for this environment."

  # This job needs to run for all environments because deploy-site-to-machine relies
  # on it but the steps inside this job will only run for the Prod env.
  validate-tag-is-in-main-for-prod-deploys:
    needs: [set-vars, stakeholder-approval, attestor-approval]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      # In this job, always checkout the default branch (not the tag that was provided as an input).  Also use
      # fetch-depth: 0 to retrieve the history and tags so we can check if a tag is reachable from the default branch.
      - name: Checkout Repository
        if: env.ENVIRONMENT == 'prod'
        uses: actions/checkout@v3
        with:
          ref: 'main'
          fetch-depth: 0

      - uses: im-open/is-tag-reachable-from-default-branch@v1.1
        if: env.ENVIRONMENT == 'prod'
        with:
          tag: ${{ env.RELEASE_TAG }}

      - uses: im-open/is-release-production-ready@v1.1
        if: env.ENVIRONMENT == 'prod'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ env.RELEASE_TAG }}
          fail-for-prerelease: true # This only runs for prod environments, so if the release is not production ready it should fail

  # If you want to verify that the Jira ticket being deployed has the proper attestations, there is an action for that.
  # https://github.com/im-open/verify-fields-on-jira-task
  # Set up a new job, or add to an existing one that makes sense, and add a step with that action.
  # Details on how to use the action can be found in the action's README.

  deploy-site-to-machine:
    needs:
      [
        set-vars,
        stakeholder-approval,
        attestor-approval,
        validate-tag-is-in-main-for-prod-deploys,
      ]
    runs-on: [self-hosted, windows-2019]
    environment: ${{ github.event.inputs.environment }} # Use inputs context because env context is not available to 'environment:'

    strategy:
      fail-fast: false # Don't cancel all deploy jobs if one of the deployments fails
      max-parallel: 1 # Only deploy to one machine at a time, to minimize downtime
      matrix:
        # This should be an array of windows iis server machine names.
        # One job will spawn for each server listed in the array
        iis-server: ${{ fromJSON(needs.set-vars.outputs.IIS_SERVERS) }}

    defaults:
      run:
        shell: pwsh

    env:
      PAGERDUTY_WINDOW_IN_MIN: 30 # TODO: Verify the length of your PD Maintenance Window
      PAGERDUTY_WINDOW_DESC: 'Deploying Code to ${{ github.event.inputs.environment }} from GitHub Actions' # TODO: Verify this PD Maintenance Window Description
      ASSET_ZIP: 'published_app.zip' # TODO: Verify that this wasn't changed in the CI build.  This is the value in that workflow by default.
      UNZIPPED_ASSET: 'published_app'
      DEPLOY_ZIP: 'deploy.zip'
      DEPLOYMENT_SA_ID: ${{ needs.set-vars.outputs.DEPLOYMENT_SA_ID }}
      APP_POOL_NAME: ${{ needs.set-vars.outputs.APP_POOL_NAME }}
      APP_POOL_SA_ID: ${{ needs.set-vars.outputs.APP_POOL_SA_ID }}
      WEBSITE_NAME: ${{ needs.set-vars.outputs.WEBSITE_NAME }}
      WEBSITE_HOST_HEADER: ${{ needs.set-vars.outputs.WEBSITE_HOST_HEADER }}
      WEBSITE_PATH: ${{ needs.set-vars.outputs.WEBSITE_PATH }}
      WEBSITE_CERT_PATH: ${{ needs.set-vars.outputs.WEBSITE_CERT_PATH }}
      WEBSITE_CERT_FRIENDLY_NAME: ${{ needs.set-vars.outputs.WEBSITE_CERT_FRIENDLY_NAME }}

    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}.  The current machine is ${{ matrix.iis-server }}"

      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.2
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an env-level secret
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-id: ${{ secrets.PAGERDUTY_SERVICE_ID }} # This is an env-level secret
          #service-ids: '' # TODO: Provide a comma separated list if there are multiple ids. 'PD01,PD02,PD03'

      - name: Download artifacts from release
        uses: im-open/download-release-asset@v1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          asset-name: ${{ env.ASSET_ZIP }}
          tag-name: ${{ github.event.inputs.tag}}

      - name: Unzip release asset
        run: Expand-Archive -LiteralPath ${{ env.ASSET_ZIP }} -DestinationPath ./${{ env.UNZIPPED_ASSET }}

      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Website Configuration and Substitution Values
        uses: im-open/set-environment-variables-by-scope@v1.1
        with:
          scope: ${{ env.ENVIRONMENT }}
          create-output-variables: true
          input-file: '' # TODO: if you have an input file with your variable substitutions, add them here
        env:
          # TODO: Add the values your app/function needs to be configured with (appsettings.json/local.settings.json/octo var substitution/config changes).  Delete envs that are not used.
          #  - The name of the env (left side of @) (ex: FedAuth_Domain) should be added.  The env name can be used in the later variable-substitution and octostache actions for replacement.
          #  - The scope (right side of @) should be dev/qa/stage/uat/demo/prod. This action uses the value of env.ENVIRONMENT to match one of the scopes (envs) below.  Multiple items can be added as well (ex: @stage demo)
          #  - The value for the environment should be included in '' after the colon. (ex: 'fedauth.dev.viabenefits.com')
          # FedAuth_Domain@dev: 'fedauth.dev.viabenefits.com'
          # FedAuth_Domain@qa: 'fedauth.qa.viabenefits.com'
          # FedAuth_Domain@stage demo: 'fedauth.stage.viabenefits.com'
          # FedAuth_Domain@prod: 'fedauth.viabenefits.com'

      # TODO: If you need to do any Octopus variable substitution (i.e. replacing #{OCTO_PLACEHOLDER} in files) use the following action.  Delete if not using.
      # This action works well with the im-open/set-environment-variables-by-scope action. Environment variables set in that action will be utilized by this one.
      # https://github.com/im-open/octostache-action
      - uses: im-open/octostache-action@v4.0
        with:
          variables-file: '' # TODO: Add the ./path/file containing the variable substitutions to make, you will need to create this file  See the action for more details.
          files-with-substitutions: '' # TODO: Add the paths to the files to make substitutions in, e.g. .${{ env.UNZIPPED_ASSET }}/**/*.config
        # env: # TODO: Environment variables can be added that will also be used for substitution (good for secrets). These will override any variable in the variables-file with the same name.

      # TODO: If you need any json, yml or xml file (web.config/app.config/nlog.config) substitutions use the following
      #        action, otherwise delete it. This action won't add or remove items, it will just update the values.
      - uses: im-open/variable-substitution@v2
        with:
          files: '' # TODO: add a comma separated list of files and the patterns, like '${{ env.UNZIPPED_ASSET }}/*.config', ./src/MyProj/We*.config, ./src/MyProj/Nlog.config'
        env:
          # TODO: replace examples with actual substitutions
          # FedAuth.Domain: ${{ env.FedAuth_Domain }} # Example showing replacement at a nested node (left side) & using the env set in the set-environment-variables-by-scope step above (right side)
          # SecretValue: ${{ secrets.VALUE }} # Example showing replacement of a root level value (left side) with a secret (right side)

      - name: Zip the published app for faster deployment and uploads
        run: |
          # On a Windows build runner, the 'zip' commandline tool isn't available. Use PowerShell functions instead.
          Compress-Archive -Path .\${{ env.UNZIPPED_ASSET }}\* -DestinationPath ${{ env.DEPLOY_ZIP }}

      # Uncomment this if the site hasn't been created before
      # This action does work better if the website cert is already installed
      # - name: Create Web Site
      #   uses: im-open/iis-site-create@v3.0
      #   with:
      #     server: '${{ matrix.iis-server }}'
      #     website-name: '${{ env.WEBSITE_NAME }}'
      #     app-pool-name: '${{ env.APP_POOL_NAME }}'
      #     website-host-header: '${{ env.WEBSITE_HOST_HEADER }}'
      #     website-path: '${{ env.WEBSITE_PATH }}'
      #     website-cert-path: '${{ env.WEBSITE_CERT_PATH }}'
      #     website-cert-friendly-name: '${{ env.WEBSITE_CERT_FRIENDLY_NAME }}'
      #     website-cert-password: '${{ secrets.WEBSITE_CERT_PASSWORD }}'
      #     app-pool-service-account-id: ${{ env.APP_POOL_SA_ID }}
      #     app-pool-service-account-secret: ${{ secrets.APP_POOL_SA_SECRET }}
      #     deployment-service-account-id: ${{ env.DEPLOYMENT_SA_ID }}
      #     deployment-service-account-secret: ${{ secrets.DEPLOYMENT_SA_SECRET }}

      - name: Stop App Pool
        id: app-pool-stop
        if: always()
        uses: im-open/app-pool-action@v2.0
        with:
          action: 'stop'
          server: ${{ matrix.iis-server }}
          app-pool-name: ${{ env.APP_POOL_NAME }}
          service-account-id: ${{ env.DEPLOYMENT_SA_ID }}
          service-account-password: ${{ secrets.DEPLOYMENT_SA_SECRET }}

      - name: Deploy deployment package
        if: steps.app-pool-stop.outcome == 'success'
        uses: im-open/deploy-windows-files@v2.0
        with:
          server: ${{ matrix.iis-server }}
          source-zip-file-path: ./${{ env.DEPLOY_ZIP }}
          deployment-folder-path: ${{ env.WEBSITE_PATH }}
          clean-deployment-folder: 'true'
          service-account-id: ${{ env.DEPLOYMENT_SA_ID }}
          service-account-password: ${{ secrets.DEPLOYMENT_SA_SECRET }}

      - name: Start App Pool
        uses: im-open/app-pool-action@v2.0
        with:
          action: 'start'
          server: ${{ matrix.iis-server }}
          app-pool-name: ${{ env.APP_POOL_NAME }}
          service-account-id: ${{ env.DEPLOYMENT_SA_ID }}
          service-account-password: ${{ secrets.DEPLOYMENT_SA_SECRET }}

      - name: Close the PagerDuty Maintenance Window
        if: always() && steps.open-window.outcome == 'success'
        uses: im-open/close-pagerduty-maintenance-window@v1.1
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          maintenance-window-id: ${{ steps.open-window.outputs.maintenance-window-id }}

      - name: Delete .zips and folder that contains sensitive info
        continue-on-error: true
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          rm -f ${{ env.ASSET_ZIP }}
          rm -f ${{ env.DEPLOY_ZIP }}
          rm -rf ${{ env.UNZIPPED_ASSET }}

  update-deployment-board-and-send-teams-notification:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    needs: [set-vars, deploy-site-to-machine]
    if: always()
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      # If you want to automatically transition a deployment task in Jira based on the success or failure of this workflow, this job would be a good place for that.
      # There is an action that can do just that: https://github.com/im-open/transition-jira-tasks-by-query
      # Details on how to set up that action can be found in the action's README.
      # There are secrets for the username and password already set up as org level secrets called JIRA_USERNAME and JIRA_PASSWORD.

      - uses: im-open/workflow-conclusion@v2.1
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo

      # https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          environment: ${{ env.ENVIRONMENT }}
          board-number: '' # TODO: Add the automated deployment board number or remove if not using an automated deployment project board.
          ref: ${{ env.RELEASE_TAG }}
          ref-type: 'tag'
          #deployable-type: '' # TODO:  If there are multiple deployables in the repository, add a string type like MFE/DB/API
          deploy-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          timezone: ${{ env.TIMEZONE }}

      - name: Send Status to Teams
        if: always()
        uses: im-open/post-status-to-teams-action@v1.3
        with:
          title: ${{ needs.set-vars.outputs.WEBSITE_NAME }} Deployment to ${{ env.ENVIRONMENT }} # TODO Verify this title gives enough info since it will be posted to the team channel
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # This is a repo-level secret (unless 'environment:' has been added to the job)
          timezone: ${{ env.TIMEZONE }}
          # TODO: Verify the custom facts you want included
          custom-facts: |
            [
              { "name": "Workflow", "value": "${{ github.workflow }}" },
              { "name": "Run", "value": "${{ github.run_id }}" },
              { "name": "Actor", "value": "${{ github.actor }}" }
            ]

      - name: Send Status to Deployment Notifications Channel for Prod Deploys
        if: always() && env.ENVIRONMENT == 'prod' && steps.conclusion.outputs.workflow_conclusion == 'success'
        uses: im-open/post-status-to-teams-action@v1.3
        with:
          title: ${{ needs.set-vars.outputs.WEBSITE_NAME }} Deployment to ${{ env.ENVIRONMENT }} # TODO Verify this title gives enough info since it will be posted to the Prod Notifications channel
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.DEPLOY_NOTIFICATIONS_CHANNEL }} # This is an org-level secret
          timezone: ${{ env.TIMEZONE }}
          include-default-facts: false # This cuts down on the message size for the prod room
          custom-facts: |
            [
              { "name": "Actor", "value": "${{ github.actor }}" },
              { "name": "Version", "value": "${{ env.RELEASE_TAG }}" }
            ]
