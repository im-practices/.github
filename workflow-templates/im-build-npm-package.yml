# Workflow Code: GloomyBadger_v31    DO NOT REMOVE
# Purpose:
#    Automatically calculates the next semantic version, runs an npm ci, an npm run tests
#    if there is one, an npm publish and then pushes a latest tag for main builds. When the
#    PR is merged, the package versions created for each branch commit in the PR are removed.
#
# Frequency: This workflow should be duplicated once per npm package in the repository
#
# Projects to use this Template with:
#    - npm Package (Core Template)
#
# TODO: Prerequisites:
#    - Update the package.json file required values for GH Packages (name, version, repository, publishConfig.registry)
#      https://github.com/im-practices/git-er-done/blob/main/packages/publish-npm.md
#    - This workflow uses the elevated GH_PACKAGES_TOKEN secret to read/write/delete packages. This is an org-level secret but is
#      only available to select repos.  To use this let a member of SWAT or Infra-Purple know and it can be enabled for your repo.

name: 'Build and Publish npm Package'

on:
  # This workflow will run for the PR events:
  #   opened/reopened: A PR is opened/re-opened,
  #   synchronize: The PR's head branch is updated (commits pushed, the base branch changed or the head is updated from the base branch)
  #   closed: A PR is merged or closed (The setup-build-workflow job makes sure we only run if a merge happened, not when a close happens)
  pull_request:
    # TODO: This will create a new npm package for each push to the PR, determine if that is the desired behavior or if you only
    #        want a package created when a merge to main happens.
    types: [opened, reopened, synchronize, closed]

    # TODO: If there are multiple projects in the repo, add the path to the npm package project so changes to those projects don't trigger this workflow
    #        If the repo only contains the npm package project, delete the paths:
    paths:
      - ''

env:
  TIMEZONE: 'america/denver'
  REPO_URL: '${{ github.server_url }}/${{ github.repository }}'

jobs:
  # This job utilizes a reusable workflow which will:
  #   1 - Examine the triggers and set various flags for subsequent jobs to use when evaluating whether to run
  #   2 - Print a workflow summary
  #   3 - Generate the next version for the repo
  setup-build-workflow:
    uses: im-practices/.github/.github/workflows/im-reusable-setup-build-workflow.yml@v2
    with:
      tag-prefix: 'none' # TODO: verify your prefix, the new ci workflows add v automatically but npm packages typically won't have a prefix
      # default-branch: main # TODO:  Update and include this argument if default branch is different
      # workflow-summary : | # TODO:  If desired, the workflow summary that is generated can be overridden by providing this custom value.
  
  build-and-publish-to-gpr:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    needs: [setup-build-workflow]
    if: needs.setup-build-workflow.outputs.CONTINUE_WORKFLOW == 'true'

    env:
      NEXT_VERSION: ${{ needs.setup-build-workflow.outputs.NEXT_VERSION }}
      IS_PRERELEASE: ${{ needs.setup-build-workflow.outputs.IS_PRERELEASE }}
      CREATE_RELEASE: ${{ needs.setup-build-workflow.outputs.CREATE_RELEASE }}
      DIST_TAG: ${{ needs.setup-build-workflow.outputs.DIST_TAG }}
      REF_TO_BUILD_AND_TAG: ${{ needs.setup-build-workflow.outputs.REF_TO_BUILD_AND_TAG }}

    defaults:
      run:
        shell: bash
        working-directory: '' # TODO: Add the path to the npm package project

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.REF_TO_BUILD_AND_TAG }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16 # TODO: verify node version
          registry-url: https://npm.pkg.github.com/

      # TODO: If the project contains dependencies to other npm packages in GitHub's npm package registry, uncomment this step, otherwise delete
      # - name: Authenticate with GitHub Packages for Restoring Packages
      #   uses: im-open/authenticate-with-gh-package-registries@v1.1
      #   with:
      #     read-pkg-token: ${{ secrets.READ_PKG_TOKEN }} # This is an org-level secret
      #     orgs: 'im-client,im-enrollment,im-practices' # TODO: Verify list of orgs packages will be pulled from

      # TODO: Add any additional flags you need to version your project like --allow-same-version
      - run: npm version ${{ env.NEXT_VERSION }}

      # TODO: Add any additional flags you need to restore packages in  your project like --ignore-scripts
      # TODO: For some projects you may need several commands, one to do this at the root, one to change directories and one to do it in the package dir
      - run: npm ci

      # TODO: If you have tests that run for the npm package, add a new run step with the appropriate npm command
      # - run: npm run tests

      - name: reset .npmrc for publishing
        run: npm set //npm.pkg.github.com/:_authToken '${{ secrets.GITHUB_TOKEN }}'

      - run: npm publish --tag ${{ env.DIST_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo

      - name: Create GitHub Tag and Release
        if: env.CREATE_RELEASE == 'true'
        id: create_release
        uses: im-open/create-release@v3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          delete-existing-release: true # Handy when you hit 're-run jobs' on a workflow run
          tag-name: ${{ env.NEXT_VERSION }}
          prerelease: ${{ env.IS_PRERELEASE }}
          commitish: ${{ env.REF_TO_BUILD_AND_TAG }}

  cleanup-prereleases:
    if: always() && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup the branch pre-releases for all closed PRs
        uses: im-open/delete-prereleases-for-branch@v1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          branch-name: ${{ github.head_ref }}

      - name: Cleanup pre-release packages
        if: always()
        uses: im-open/delete-branch-package-versions@v3.1
        with:
          github-token: ${{ secrets.GH_PACKAGES_TOKEN }} # This is a special org-level secret that needs to be authorized for this repo
          organization: ${{ github.repository_owner }}
          branch-name: ${{ github.head_ref }}
          package-type: 'npm'
          package-names: '' # TODO: Add comma separated list of packages to delete (the base name without any versions, like IdentityCient or Mktp.Logging)

  # This job utilizes a reusable workflow which will:
  #   1 - Send a status to a teams channel
  #   2 - Add a comment to the PR with the status/next version
  #   3 - Check for workflow failures
  finish-build:
    if: always() && needs.setup-build-workflow.outputs.CONTINUE_WORKFLOW == 'true'
    needs: [setup-build-workflow, build-and-publish-to-gpr]
    uses:  im-practices/.github/.github/workflows/im-reusable-finish-build-workflow.yml@v2
    with:
      next-version: ${{ needs.build-and-publish-to-gpr.outputs.NEXT_VERSION }}
      title-of-teams-post: 'Build and Publish <project-name> to GH Packages' # TODO: Replace <project-name> 
      is-merge-to-main: ${{ needs.setup-build-workflow.outputs.IS_MERGE_TO_MAIN }}
      additional-pr-comment-content: | # TODO: Replace <org>/<package-name> below with actual values
        - To test this version try running:
          ```bash
          npm install @<org>/<package-name>@${{ needs.build-and-publish-to-gpr.outputs.NEXT_VERSION }}
          ```
      # timezone: 'america/denver'        # TODO: Include this argument and update if your timezone is not america/denver
      # custom-facts-for-team-channel: |  # TODO: These are the custom facts that will be included the different Teams posts by default.  If adjusting the facts that are supplied, they must be a valid JSON array.
      #   [
      #     { "name": "Workflow", "value": "${{ github.workflow }}" },
      #     { "name": "Run", "value": "${{ github.run_id }}" },
      #     { "name": "Actor", "value": "${{ github.actor }}" },
      #     { "name": "Version", "value": "${{ needs.build-and-publish-to-gpr.outputs.NEXT_VERSION }}" }
      #   ]
      
    secrets:
      MS_TEAMS_URI: ${{ vars.MS_TEAMS_URI }}
