# Workflow Code: IrritableEagle_v23    DO NOT REMOVE
# Purpose:
#    Automatically runs a terraform apply -auto-approve with the changes
#    in the PR against the dev environment when a PR is merged to main.
#
# Frequency:
#    - This workflow should only be used once per repository
#
# Projects to use this Template with:
#    - Terraform (Core Template)
#
# TODO: Prerequisites:
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#    - Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md

name: Auto Apply main branch to Dev on PR Merge
on:
  pull_request:
    types: [closed]
    paths:
      - 'infrastructure/**'

env:
  TIMEZONE: 'america/denver' # TODO: Verify timezone
  PAGERDUTY_WINDOW_IN_MIN: 10 # TODO: Verify the length of your PD Maintenance Window
  PAGERDUTY_WINDOW_DESC: 'Auto apply main branch to Dev environment from GitHub Actions' # TODO: Verify this description
  # The following ARM_* secrets are org-level secrets
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ENVIRONMENT: 'public'
  TF_IN_AUTOMATION: 'true'
  TF_VERSION: '~>1.0.5' #TODO:  Verify your version of terraform.
  TF_WORKING_DIR: './infrastructure/dev' # TODO: Verify this directory is correct for your repository (older projects may not be inside of an infrastructure folder)
  # The following SSH_* secrets are org-level secrets
  SSH_KEY_STORAGE_ACCOUNT: ${{ secrets.SSH_STORAGE_ACCOUNT }}
  SSH_KEY_NETWORK_INFO: ${{ secrets.SSH_NETWORK_INFO }}
  SSH_DEPLOY_KEY_INFO: |
    [
      { "orgAndRepo": "im-platform/storage-account-network-rules", "envName" : "SSH_KEY_STORAGE_ACCOUNT" },
      { "orgAndRepo": "im-platform/network-information", "envName" : "SSH_KEY_NETWORK_INFO" }
    ]

jobs:
  auto-apply-tf:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' # TODO: verify default branch name

    runs-on: [self-hosted, ubuntu-20.04]

    environment: 'Dev'

    defaults:
      run:
        shell: bash
        working-directory: '${{ env.TF_WORKING_DIR }}'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Allows pulling modules from the repo instead of artifactory
      - name: Setup SSH Keys and known_hosts
        uses: im-open/setup-deploy-keys@v1.1.1
        with:
          deploy-key-info: ${{ env.SSH_DEPLOY_KEY_INFO }}

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: '${{ env.TF_VERSION }}'

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.2.1
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-id: ${{ secrets.PAGERDUTY_SERVICE_ID }} # This is an env-level secret
          #service-ids: '' # TODO: Provide a comma separated list if there are multiple ids. 'PD01,PD02,PD03'

      # TODO: Remove the pagerduty token if not configuring pagerduty.  If using pagerduty verify 'pagerduty_token' is the name of the variable that tf expects
      # TODO: Add any other secrets that would be required for a tf plan to succeed.  Since this is a multi-line command every line except the last will need a \ on the end of it
      # PAGERDUTY_API_KEY is an org-level secret
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -lock-timeout=90s \
            -var="pagerduty_token=${{ secrets.PAGERDUTY_API_KEY }}"

      - name: Close the PagerDuty Maintenance Window
        uses: im-open/close-pagerduty-maintenance-window@v1.1.1
        with:
          pagerduty-api-key: ${{ secrets.PAGERDUTY_API_KEY }} # This is an org-level secret
          maintenance-window-id: ${{ steps.open-window.outputs.maintenance-window-id }}

      # TODO: Remove this step if you do not want a teams notification
      - name: Send Status to Teams
        if: always()
        uses: im-open/post-status-to-teams-action@v1.3.1
        with:
          title: Auto-Deploying <project-name> Terraform to Dev # TODO: Replace <project-name> with your project
          workflow-status: ${{ job.status }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # This is a env-level secret (because 'environment:' has been added to the job).  If an env-level secret is not provided, it will look at the repo-level for the secret.
          timezone: ${{ env.TIMEZONE }}
          custom-facts: |
            [
              { "name": "Workflow", "value": "${{ github.workflow }}" },
              { "name": "Run", "value": "${{ github.run_id }}" },
              { "name": "Actor", "value": "${{ github.actor }}" }
            ]

      # https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.5.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          environment: 'Dev'
          board-number: '' # TODO: Add the automated deployment board number
          ref: 'main' # TODO: verify default branch name
          ref-type: 'branch'
          #deployable-type: '' # TODO:  If there are multiple deployables in the repository, add a string type like MFE/DB/API
          deploy-status: ${{ job.status }}
          timezone: ${{ env.TIMEZONE }}
