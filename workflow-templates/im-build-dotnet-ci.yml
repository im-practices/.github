# Workflow Code: LoathsomeSnipe_v46    DO NOT REMOVE
# Purpose:
#    Automatically checks out the code, builds, run tests and creates artifacts
#    which are uploaded to a GH release when commits are pushed to a PR. In the
#    deployment workflows, the release artifacts uploaded in this workflow are
#    downloaded, configured for the environment and deployed.
#
# Frequency:
#    - This workflow should only be used once per repository
#
# Projects to use this Template with:
#    - Azure App Service or Function (Core Template)
#    - On-Prem Service               (Core Template)
#    - On-Prem Site                  (Core Template)
#
# TODO: Prerequisites:
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#    - If the project contains a local nuget.config remove it.  It interferes with restoring packages on the GitHub Action runners.

name: .Net Core CI

on:
  # This workflow will run for the PR events:
  # opened/reopened: A PR is opened/re-opened,
  # synchronize: The PR's head branch is updated (commits pushed, the base branch changed or the head is updated from the base branch)
  # closed: A PR is merged or closed (The setup-build-workflow job makes sure we only run if a merge happened, not when a close happens)
  pull_request:
    types: [opened, reopened, synchronize, closed]

permissions:
  actions: read
  checks: write # allow dependabot-triggered runs to create checks
  contents: write # allow dependabot-triggered runs to create releases
  deployments: read
  issues: read
  discussions: none
  packages: read
  pages: none
  pull-requests: write # allow dependabot-triggered runs to comment on PRs
  repository-projects: read
  security-events: none
  statuses: write

env:
  READ_PKG_TOKEN: ${{ secrets.READ_PKG_TOKEN }} # This is an org-level secret
  DOTNET_VERSION: '' # TODO: Add the .net version
  SOLUTION_FILE: '' # TODO: Fill in the path and name of the solution file
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}
  TIMEZONE: America/Denver # TODO: Verify timezone

jobs:
  # This job utilizes a reusable workflow which will:
  #   1 - Examine the triggers and set various flags for subsequent jobs to use when evaluating whether to run
  #   2 - Print a workflow summary
  #   3 - Generate the next version for the repo
  setup-build-workflow:
    uses: im-practices/.github/.github/workflows/im-reusable-setup-build-workflow.yml@v2
    with:
      tag-prefix: 'v' # TODO: If you prefix your tags like (mfe/db/etc) uncomment and add that value here
      # default-branch: main # TODO:  Update and include this argument if default branch is different
      # workflow-summary : | # TODO:  If desired, the workflow summary that is generated can be overridden by providing this custom value.

  # TODO:  Remove this job and references to this job if the project does not use npm
  npm-cache:
    runs-on: [self-hosted, im-linux]
    needs: [setup-build-workflow]
    if: needs.setup-build-workflow.outputs.CONTINUE_WORKFLOW == 'true'

    defaults:
      run:
        shell: bash

    outputs:
      NPM_CACHE_KEY: ${{ env.NPM_CACHE_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup-build-workflow.outputs.REF_TO_BUILD_AND_TAG }}

      - name: Set Cache Keys
        # As long as these files don't change the cache will remain in tact and the time
        # to restore the different packages in the various jobs will be reduced.  If one
        # of the files does change though, a new cache will be uploaded the next time
        # it runs, then subsequent runs should be faster.
        run: echo "NPM_CACHE_KEY=node_modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_ENV

      - name: Check for an npm cache
        id: has-cache
        uses: im-open/check-for-cache@v1.1
        with:
          path: '**/node_modules'
          key: ${{ env.NPM_CACHE_KEY }}

      # The remaining steps will only be executed if the cache was not found, otherwise they will be skipped.

      # This action creates a post-job step that will upload the node_modules dir to the cache if the job
      # completes successfully.  Subsequent jobs and workflow runs can use this cached version of the node_modules
      # folder if the package-lock.json hasn't changed and it uses a im-linux runner to restore the cache from.
      - name: Setup caching for node_modules directory
        if: steps.has-cache.outputs.cache-hit == 'false'
        uses: actions/cache@v3
        with:
          key: ${{ env.NPM_CACHE_KEY }}
          path: '**/node_modules'

      - uses: actions/setup-node@v3
        if: steps.has-cache.outputs.cache-hit == 'false'
        with:
          node-version: '16'

      # TODO:  If the project contains internal npm packages, uncomment and update the orgs with the needed organizations
      # - name: Authenticate with GitHub Packages
      #   if: steps.has-cache.outputs.cache-hit == 'false'
      #   uses: im-open/authenticate-with-gh-package-registries@v1.0
      #   with:
      #     read-pkg-token: ${{ secrets.READ_PKG_TOKEN }} # This is an org-level secret
      #     orgs: ''

      - run: npm ci
        if: steps.has-cache.outputs.cache-hit == 'false'

  nuget-cache:
    runs-on: [self-hosted, im-linux]
    needs: [setup-build-workflow]
    if: needs.setup-build-workflow.outputs.CONTINUE_WORKFLOW == 'true'

    defaults:
      run:
        shell: bash

    outputs:
      NUGET_CACHE_KEY: ${{ env.NUGET_CACHE_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup-build-workflow.outputs.REF_TO_BUILD_AND_TAG }}

      - name: Set Cache Keys
        # As long as these files don't change the cache will remain in tact and the time
        # to restore the different packages in the various jobs will be reduced.  If one
        # of the files does change though, a new cache will be uploaded the next time
        # it runs, then subsequent runs should be faster.
        # TODO:  If your project makes use of the nuget package.lock.json it can be switched for the csproj files below
        run: echo "NUGET_CACHE_KEY=nuget-${{ hashFiles('**/*.csproj') }}" >> $GITHUB_ENV

      - name: Check for a nuget cache
        id: has-cache
        uses: im-open/check-for-cache@v1.1
        with:
          path: '~/.nuget/packages'
          key: ${{ env.NUGET_CACHE_KEY }}

      # The remaining steps will only be executed if the cache was not found, otherwise they will be skipped.

      # This action creates a post-job step that will upload the ./.nuget/packages dir to the cache if the job
      # completes successfully.  Subsequent jobs and workflow runs can use this cached version of the ./.nuget/packages
      # folder if the csproj files haven't changed and it uses a im-linux runner to restore the cache from.
      - name: Setup caching for nuget packages
        if: steps.has-cache.outputs.cache-hit == 'false'
        uses: actions/cache@v3
        with:
          key: ${{ env.NUGET_CACHE_KEY }}
          path: ~/.nuget/packages

      - name: Setup .NET Core
        if: steps.has-cache.outputs.cache-hit == 'false'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        env:
          DOTNET_INSTALL_DIR: './.dotnet'

      # TODO:  If the project contains internal nuget packages, uncomment and update the orgs with the needed organizations
      # - name: Authenticate with GitHub Packages
      #   if: steps.has-cache.outputs.cache-hit == 'false'
      #   uses: im-open/authenticate-with-gh-package-registries@v1.0
      #   with:
      #     read-pkg-token: ${{ secrets.READ_PKG_TOKEN }} # This is an org-level secret
      #     orgs: ''

      - run: dotnet restore ${{ env.SOLUTION_FILE }}
        if: steps.has-cache.outputs.cache-hit == 'false'

  dotnet-test:
    runs-on: [self-hosted, im-linux]
    needs: [setup-build-workflow, nuget-cache]
    if: needs.setup-build-workflow.outputs.CONTINUE_WORKFLOW == 'true'

    defaults:
      run:
        shell: bash

    outputs:
      coverage: ${{ steps.dotnet_coverage_check.outputs.coverage-outcome }}
      test: ${{ steps.dotnet_test_check.outputs.test-outcome }}

    env:
      REF_TO_BUILD_AND_TAG: ${{ needs.setup-build-workflow.outputs.REF_TO_BUILD_AND_TAG }}
      IS_DEPENDABOT_PR: ${{ needs.setup-build-workflow.outputs.IS_DEPENDABOT_PR }}
      CODE_COVERAGE_REPORT_NAME_DOTNET: '<project-name> .Net Code Coverage' # TODO: Replace <project-name>
      CODE_COVERAGE_CHECK_NAME_DOTNET: 'dotnet code coverage'
      CODE_COVERAGE_DIR_DOTNET: 'coverage-results/dotnet'

      # TODO: Remove the following vars if not setting up a db during ci
      FLYWAY_VERSION: '' # TODO: Add the flyway version
      DB_NAME: '' # TODO: The name of the database
      INSTALL_MOCK_DB_OBJ: '' # TODO: [true|false] Indicates whether you want mock objects installed on the db.  Delete if not using.
      MOCK_DB_OBJ_URL: '' # TODO: The url to the nuget feed that contains your mock db obs.  Delete if not using mock db objects.
      DROP_DB_AFTER_STEP: '' # TODO: [true|false] Indicates whether the db should be dropped after the build step
      SQL_SERVER_PASSWORD: 'StrongPassword!1'

    # TODO:  Remove this services block if you do not setup a database to run tests against during ci
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
          - 1433:1433
        options: -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=StrongPassword!1"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.REF_TO_BUILD_AND_TAG }}

      # TODO: Delete the install flyway and build database steps if not building a database
      - name: Install Flyway
        uses: im-open/setup-flyway@v1.1
        with:
          version: ${{ env.FLYWAY_VERSION }}

      # This cache is only valid if the 'nuget-cache' job that creates the cache and this job that downloads the cache use
      # the same runner OS.  If this job changed runner types, the 'nuget-cache' job should be updated to use the same type.
      - name: Download nuget cache
        uses: im-open/restore-cache@v1.1
        with:
          path: ~/.nuget/packages
          key: ${{ needs.nuget-cache.outputs.NUGET_CACHE_KEY }}

      - name: Build Database
        uses: im-open/build-database-ci-action@v3.2
        with:
          # TODO: These parameters are the most commonly used. They tell the action to create the repo's database on the Action Runner,
          #       validate and run the repo's migration scripts, run tests, and seed data into the database for future needs (like integration tests).
          #       There is more configuration for the action that can happen though, and more it can do.
          #       See https://github.com/im-open/build-database-ci-action for detailed documentation and examples.
          db-server-name: ${{ env.DB_SERVER_NAME }}
          db-name: ${{ env.DB_NAME }}
          create-database-file: '' # TODO: Add the path to the create database file (often called Initialization.sql)
          migration-files-path: '' # TODO: Add the path to the directory with your migration files
          should-validate-migrations: true # This will make flyway validate the migration scripts before running them
          run-tests: true
          test-files-path: '' # TODO: Add the path to the directory with your test files
          seed-data: true
          seed-data-files-path: '' # TODO: Add the path to the directory with your seed data files
          use-integrated-security: false
          db-username: 'sa' # The default system administrator account that comes with SQL Server. This is the only account set up in our self hosted Action Runners' SQL Server instances.
          db-password: ${{ env.SQL_SERVER_PASSWORD }} # This is an org level secret. It is the password for the sa account.

      # TODO:  If you are setting up a sql database, you may need to update connection strings
      #        in appsettings.json or other config to ensure the application can connect properly.
      # - name: Update sql connection string
      #   uses: im-open/variable-substitution@v2
      #   with:
      #     files: '' # TOD:  add file path to appsettings.json
      #   env:
      #     ConnectionStrings.<<PROJECT>>: 'Server=localhost;Database=${{ env.DB_NAME }};Trusted_Connection=False;User ID=SA;Password=${{ env.SQL_SERVER_PASSWORD }}' # TODO:  Verify connectionString name for app setting and any additional properties that need to be added

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        env:
          DOTNET_INSTALL_DIR: './.dotnet'

      - name: dotnet build
        id: build
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release

      # TODO: The TEST projects need a package reference to coverlet.msbuild for this to output the coverage reports correctly:
      #        <PackageReference Include="coverlet.msbuild" Version="3.1.0" />
      # TODO: Filters can be added to exclude certain tests: https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit
      - name: dotnet test with coverage
        id: test
        run: dotnet test ${{ env.SOLUTION_FILE }} --logger trx --no-build --configuration Release /property:CollectCoverage=True /property:CoverletOutputFormat=opencover

      - name: create status check/comment for test results
        if: always()
        id: dotnet_test_check
        uses: im-open/process-dotnet-test-results@v2.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          timezone: ${{ env.TIMEZONE }}
          # TODO: Determine if you would like status checks, pr comments or both
          create-status-check: true
          create-pr-comment: true
          # update-comment-if-one-exists: false # TODO: By default this action creates one comment and updates it for each subsequent workflow run.  Uncomment if you wish to have one new comment for every workflow run.

      - name: create code coverage report
        id: coverage_report
        if: always() && steps.test.outcome == 'success' && env.IS_DEPENDABOT_PR == 'false'
        uses: im-open/code-coverage-report-generator@4.9
        with:
          reports: '*/**/coverage.opencover.xml'
          targetdir: ${{ env.CODE_COVERAGE_DIR_DOTNET }}
          title: ${{ env.CODE_COVERAGE_REPORT_NAME_DOTNET }}
          tag: 'Workflow: ${{ github.workflow }} <br/> Run Number: ${{ github.run_number }} <br/> Run ID: ${{ github.run_id }}'
          # TODO: Add the appropriate filters to each type.
          # The filters are a ; separated list of items to include(+) or exclude(-).  Wildcards are accepted.
          # For instance: -xunit*;-Dapper;-*.Tests
          assemblyfilters: ''
          filefilters: ''
          classfilters: ''

      - name: create status check/comment for code coverage results
        if: always() && steps.coverage_report.outcome == 'success' && env.IS_DEPENDABOT_PR == 'false'
        id: dotnet_coverage_check
        uses: im-open/process-code-coverage-summary@v2.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          summary-file: '${{ env.CODE_COVERAGE_DIR_DOTNET }}/Summary.md'
          report-name: ${{ env.CODE_COVERAGE_REPORT_NAME_DOTNET }}
          check-name: ${{ env.CODE_COVERAGE_CHECK_NAME_DOTNET }}
          # TODO: Determine if you would like status checks, pr comments or both
          create-status-check: true
          create-pr-comment: true
          # update-comment-if-one-exists: false # TODO: By default this action creates one comment and updates it for each subsequent workflow run.  Uncomment if you wish to have one new comment for every workflow run.
          update-comment-key: dotnet
          # TODO: Set the thresholds for branch and line coverage.
          # When set to 0 the outcome is neutral.  Otherwise line/branch coverage will be a 'failure' if actual coverage < threshold.
          line-threshold: 0
          branch-threshold: 0

      - name: Pre-Zip Code Coverage Artifacts
        # GitHub zips whatever we upload but they charge based on the pre-zip size.  
        # The artifact will be double-zipped when downloaded but we will save on storage costs.
        if: always() && steps.dotnet_coverage_check.outcome == 'success' && env.IS_DEPENDABOT_PR == 'false'
        shell: pwsh
        run: Compress-Archive -Path ./${{ env.CODE_COVERAGE_DIR_DOTNET }}/* -DestinationPath "./${{ env.CODE_COVERAGE_DIR_DOTNET }}/${{ env.CODE_COVERAGE_REPORT_NAME_DOTNET }}.zip"
        
      - name: upload dotnet code coverage report
        if: always() && steps.dotnet_coverage_check.outcome == 'success' && env.IS_DEPENDABOT_PR == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CODE_COVERAGE_REPORT_NAME_DOTNET }}
          path: ${{ env.CODE_COVERAGE_DIR_DOTNET }}/${{ env.CODE_COVERAGE_REPORT_NAME_DOTNET }}.zip
          retention-days: 15 # Cannot exceed 30 days.

  # TODO: Remove this job if you do not have jest tests

  jest:
    runs-on: [self-hosted, im-linux]
    needs: [setup-build-workflow, npm-cache]
    if: needs.setup-build-workflow.outputs.CONTINUE_WORKFLOW == 'true'

    defaults:
      run:
        shell: bash

    outputs:
      coverage: ${{ steps.jest_coverage_check.outputs.coverage-outcome }}
      test: ${{ steps.jest_test_check.outputs.test-outcome }}

    env:
      REF_TO_BUILD_AND_TAG: ${{ needs.setup-build-workflow.outputs.REF_TO_BUILD_AND_TAG }}
      IS_DEPENDABOT_PR: ${{ needs.setup-build-workflow.outputs.IS_DEPENDABOT_PR }}
      CODE_COVERAGE_REPORT_NAME_JEST: '<project-name> Jest Code Coverage' # TODO: Replace <project-name>
      CODE_COVERAGE_CHECK_NAME_JEST: 'jest code coverage'
      CODE_COVERAGE_DIR_JEST: 'coverage-results/jest'
      JEST_TEST_DIR: '' # TODO: Add the path to dir containing the package.json file that knows how to run the jest tests.  Like ./src/MyApp.Bff/FrontEnd
      JEST_TEST_RESULTS_FILE: 'jest-results.json'
      JEST_TEST_REPORT_NAME: 'Jest Tests'

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.REF_TO_BUILD_AND_TAG }}

      # This cache is only valid if the 'npm-cache' job that creates the cache and this job that downloads the cache use
      # the same runner OS.  If this job changed runner types, the 'npm-cache' job should be updated to use the same type.
      - name: Download npm cache
        uses: im-open/restore-cache@v1.1
        with:
          key: ${{ needs.npm-cache.outputs.NPM_CACHE_KEY }}
          path: '**/node_modules'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Rebuild Node Modules
        working-directory: ${{ env.JEST_TEST_DIR }}
        run: npm rebuild

      - name: jest test with coverage
        id: test
        working-directory: ${{ env.JEST_TEST_DIR }}
        # TODO: If your script in package.json for running jest is named something besides 'test' update it here
        # TODO: If your script in package.json does not include the --coverage or --json flags, add them to the script in package.json
        run: npm run test -- --outputFile=${{ env.JEST_TEST_RESULTS_FILE }}

      - name: create status check/comment for jest test results
        if: always()
        id: jest_test_check
        uses: im-open/process-jest-test-results@v2.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          timezone: ${{ env.TIMEZONE }}
          results-file: ${{ env.JEST_TEST_DIR }}/${{ env.JEST_TEST_RESULTS_FILE }}
          report-name: ${{ env.JEST_TEST_REPORT_NAME }}
          # TODO: Determine if you would like status checks, pr comments or both
          create-status-check: true
          create-pr-comment: true
          # update-comment-if-one-exists: false # TODO: By default this action creates one comment and updates it for each subsequent workflow run.  Uncomment if you wish to have one new comment for every workflow run.

      - name: create code coverage report
        id: coverage_report
        if: always() && steps.test.outcome == 'success' && env.IS_DEPENDABOT_PR == 'false'
        uses: im-open/code-coverage-report-generator@4.9
        with:
          reports: '*/**/lcov.info'
          targetdir: ${{ env.CODE_COVERAGE_DIR_JEST }}
          title: jest code coverage
          tag: 'Workflow: ${{ github.workflow }} <br/> Run Number: ${{ github.run_number }} <br/> Run ID: ${{ github.run_id }}'
          # TODO: Add the appropriate filters to each type.
          # The filters are a ; separated list of items to include(+) or exclude(-).  Wildcards are accepted.
          # For instance: -xunit*;-Dapper;-*.Tests
          assemblyfilters: ''
          filefilters: ''
          classfilters: ''

      - name: create status check/comment for code coverage results
        if: always() && steps.coverage_report.outcome == 'success' && env.IS_DEPENDABOT_PR == 'false'
        id: jest_coverage_check
        uses: im-open/process-code-coverage-summary@v2.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          summary-file: '${{ env.CODE_COVERAGE_DIR_JEST }}/Summary.md'
          report-name: ${{ env.CODE_COVERAGE_REPORT_NAME_JEST }}
          check-name: ${{ env.CODE_COVERAGE_CHECK_NAME_JEST }}
          # TODO: Determine if you would like status checks, pr comments or both
          create-status-check: true
          create-pr-comment: true
          # update-comment-if-one-exists: false # TODO: By default this creates one comment and updates it for each run.  Uncomment if you wish to have one new comment for every workflow run.
          update-comment-key: jest
          # TODO: Set the thresholds for branch and line coverage.
          # When set to 0 the outcome is neutral.  Otherwise line/branch coverage will be a 'failure' if actual coverage < threshold.
          line-threshold: 0
          branch-threshold: 0

      - name: Pre-Zip Code Coverage Artifacts
        # GitHub zips whatever we upload but they charge based on the pre-zip size.  
        # The artifact will be double-zipped when downloaded but we will save on storage costs.
        if: always() && steps.jest_coverage_check.outcome == 'success' && env.IS_DEPENDABOT_PR == 'false'
        shell: pwsh
        run: Compress-Archive -Path ./${{ env.CODE_COVERAGE_DIR_JEST }}/* -DestinationPath "./${{ env.CODE_COVERAGE_DIR_JEST }}/${{ env.CODE_COVERAGE_REPORT_NAME_JEST }}.zip"
        
      - name: upload jest code coverage report
        if: always() && steps.jest_coverage_check.outcome == 'success' && env.IS_DEPENDABOT_PR == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CODE_COVERAGE_REPORT_NAME_JEST }}
          path: ${{ env.CODE_COVERAGE_DIR_JEST }}/${{ env.CODE_COVERAGE_REPORT_NAME_JEST }}.zip
          retention-days: 15 # Cannot exceed 30 days.

  build-deployment-artifacts:
    runs-on: [self-hosted, im-linux]
    needs: [setup-build-workflow, npm-cache, nuget-cache]
    if: needs.setup-build-workflow.outputs.CONTINUE_WORKFLOW == 'true' && needs.setup-build-workflow.outputs.CREATE_RELEASE == 'true'

    defaults:
      run:
        shell: bash

    env:
      REF_TO_BUILD_AND_TAG: ${{ needs.setup-build-workflow.outputs.REF_TO_BUILD_AND_TAG }}
      IS_PRERELEASE: ${{ needs.setup-build-workflow.outputs.IS_PRERELEASE }}
      NEXT_VERSION: ${{ needs.setup-build-workflow.outputs.NEXT_VERSION }}
      NEXT_VERSION_NO_PREFIX: ${{ needs.setup-build-workflow.outputs.NEXT_VERSION_NO_PREFIX }}

      # TODO: If you have a single deployable in the repo, use these variables and delete the multi-deployable block below
      PROJECT_ROOT: '' # TODO: Fill in the path to the folder containing the project that will be deployed, like ./src/MyBff
      PUBLISHED_APP: 'published_app' # Value will be used in the deployment workflow
      DEPLOY_ZIP: 'published_app.zip' # Value will be used in the deployment workflow

      # TODO: If publishing Azure Event Hubs events, and wishing to create an AsyncAPI Document to describe the events, uncomment and fill out the following two variables
      #       For more information on AsyncAPI Document generation, see https://github.com/im-practices/cloud-events/blob/main/src/Mktp.Messaging.Events.Publisher.AsyncApi/README.md.
      # ASYNCAPI_GENERATION_PROJECT_PATH: '' # TODO: Add the path to the console application that generates the AsyncAPI Document
      # ASYNCAPI_DOCUMENT_PATH: '' # TODO: Add the path to the directory where the AsyncAPI Document should be generated

      # TODO: For multiple deployables, each deployable should have a block with the appropriate values and delete the single-deployable block above.
      # PROJECT_ROOT_SITE: '' # TODO: Fill in the path to the folder containing the project that will be deployed, like ./src/MyBff
      # PUBLISHED_SITE: 'published_site' # Value will be used in the deployment workflow
      # DEPLOY_ZIP_SITE: 'published_site.zip' # Value will be used in the deployment workflow
      # PROJECT_ROOT_API: '' # TODO: Fill in the path to the folder containing the project that will be deployed, like ./src/MyBff
      # PUBLISHED_API: 'published_api' # Value will be used in the deployment workflow
      # DEPLOY_ZIP_API: 'published_api.zip' # Value will be used in the deployment workflow

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.REF_TO_BUILD_AND_TAG }}

      # These caches are only valid if the 'npm-cache' and 'nuget-cache' jobs that creates the cache and
      # this job that downloads the caches use the same runner OS.  If this job changed runner types, the
      # 'npm-cache' and 'nuget-cache' jobs should be updated to use the same type.
      - name: Download nuget cache
        uses: im-open/restore-cache@v1.1
        with:
          path: ~/.nuget/packages
          key: ${{ needs.nuget-cache.outputs.NUGET_CACHE_KEY }}

      - name: Download npm cache
        uses: im-open/restore-cache@v1.1
        with:
          key: ${{ needs.npm-cache.outputs.NPM_CACHE_KEY }}
          path: '**/node_modules'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # TODO:  Remove if the project does not contain node modules that need to be rebuilt.
      - name: Rebuild Node Modules
        working-directory: '.' # TODO:  Update if package-lock.json is not at the root of the project
        run: npm rebuild

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        env:
          DOTNET_INSTALL_DIR: './.dotnet'

      # TODO: If the project being built publishes to Azure Event Hubs, this step is needed to build an AsyncAPI Document.
      #       It runs a console application that calls the Mktp.Messaging.Events.Publisher.AsyncApi library.
      #       See https://github.com/im-practices/cloud-events/blob/main/src/Mktp.Messaging.Events.Publisher.AsyncApi/README.md for more information.
      # - name: Build AsyncAPI Document
      # # TODO: Add the path to your console application that builds the AsyncAPI Document. Double check the directories where the AsyncAPI Document gets copied to/from.
      # run: |
      #   dotnet run ${{ env.ASYNCAPI_GENERATION_PROJECT_PATH }} -- ${{ env.ASYNCAPI_DOCUMENT_PATH }}
      #   mkdir ./${{ env.PUBLISHED_APP }}/AsyncAPI_Document/
      #   cp ${{ env.ASYNCAPI_DOCUMENT_PATH }}/asyncapi-document.yaml ./${{ env.PUBLISHED_APP }}/AsyncAPI_Document/

      # TODO: If there are multiple deployables, duplicate this step once per deployable project and update the PROJECT_ROOT, PUBLISHED_APP and DEPLOY_ZIP variables with the updated names.
      - name: Build and Publish
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: pwsh # On a Windows build runner, the 'zip' commandline tool isn't available. Use PowerShell instead.
        run: |
          dotnet build --configuration Release /p:Version=${{ env.NEXT_VERSION_NO_PREFIX }}
          dotnet publish --configuration Release --no-build -o ./${{ env.PUBLISHED_APP }}
          Compress-Archive -Path ./${{ env.PUBLISHED_APP }}/* -DestinationPath ${{ env.DEPLOY_ZIP }}

      # TODO: If you have multiple deployables and there are different tags for each deployable:
      #        1 - Duplicate the 'Create Release with published_artifacts' step, once per deployable
      #        2 - Remove the ID
      #        3 - Update the step where tag-name gets its value from.  steps.version should be updated to the new deployable-specific id set above
      #        4 - Update the PROJECT_ROOT and DEPLOY_ZIP variables to use the deployable-specific value

      # WARNING!!! This will upload the published artifacts to the release.  If you have done any transformations
      # on the config files and included sensitive information (that isn't already present in committed files)
      # that sensitive info will be available to download by anyone with read access to this repo.
      - name: Create Release with published_artifacts
        id: create_release
        uses: im-open/create-release@v3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          delete-existing-release: true # Handy when you hit 're-run jobs' on a workflow run
          tag-name: ${{ env.NEXT_VERSION }}
          prerelease: ${{ env.IS_PRERELEASE }}
          commitish: ${{ env.REF_TO_BUILD_AND_TAG }}
          # TODO: if there are multiple deployables that use the same tag (and release), delete these three items.
          #        If there is only a single deployable, or multiple deployables that have different tags keep these items.
          asset-path: ${{ env.PROJECT_ROOT }}/${{ env.DEPLOY_ZIP }}
          asset-name: ${{ env.DEPLOY_ZIP }}
          asset-content-type: application/zip

      # TODO: If you have multiple deployables that use the same tag (and release), duplicate this action once per deployable.  It will upload
      #        each release asset individually.  Ensure the variables (PROJECT_ROOT, DEPLOY_ZIP) are updated with the appropriate PROJECT_ROOT and DEPLOY_ZIP
      #        If there is only a single deployable, or multiple deployables that have different tags delete this step.
      # - name: Upload Release Asset for <site/api/mfe/etc>
      #   uses: im-open/upload-release-asset@v1.1
      #   github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
      #   upload-url: ${{ steps.create_release.outputs.asset-upload-url }}
      #   asset-path: ${{ env.PROJECT_ROOT }}/${{ env.DEPLOY_ZIP }}
      #   asset-name: ${{ env.DEPLOY_ZIP }}
      #   asset-content-type: application/zip

  cleanup-prereleases:
    if: always() && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup the branch pre-releases for all closed PRs
        uses: im-open/delete-prereleases-for-branch@v1.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          branch-name: ${{ github.head_ref }}

  # This job utilizes a reusable workflow which will:
  #   1 - Send a status to a teams channel
  #   2 - Add a comment to the PR with the status/next version
  #   3 - Check for workflow failures
  finish-build:
    if: always() && needs.setup-build-workflow.outputs.CONTINUE_WORKFLOW == 'true'
    needs: [dotnet-test, jest, build-deployment-artifacts]
    uses: im-practices/.github/.github/workflows/im-reusable-finish-build-workflow.yml@v2
    with:
      next-version: ${{ needs.build-deployment-artifacts.outputs.NEXT_VERSION }}
      title-of-teams-post: '<project-name> CI Build' # TODO: Replace <project-name>
      is-merge-to-main: ${{ needs.setup-build-workflow.outputs.IS_MERGE_TO_MAIN }}
      additional-conclusions: | # TODO: Determine if there are any additional step outcomes/outputs you want considered or remove some items if they do not apply (like jest)
        [
          { "name": "dotnet test", "conclusion" : "${{ needs.dotnet-test.outputs.test }}" },
          { "name": "dotnet coverage", "conclusion" : "${{ needs.dotnet-test.outputs.coverage }}" },
          { "name": "jest test", "conclusion" : "${{ needs.jest.outputs.test }}" },
          { "name": "jest coverage", "conclusion" : "${{ needs.jest.outputs.coverage }}" }
        ]
      # additional-pr-comment-content: |  # TODO: Additional PR content can be added if desired.  Links for the workflow run and text for the next version/tag are included by default
      # timezone: 'america/denver'        # TODO: Include this argument and update if your timezone is not america/denver
      # custom-facts-for-team-channel: |  # TODO: These are the custom facts that will be included the different Teams posts by default.  If adjusting the facts that are supplied, they must be a valid JSON array.
      #   [
      #     { "name": "Workflow", "value": "${{ github.workflow }}" },
      #     { "name": "Run", "value": "${{ github.run_id }}" },
      #     { "name": "Actor", "value": "${{ github.actor }}" },
      #     { "name": "Version", "value": "${{ needs.build-deployment-artifacts.outputs.NEXT_VERSION }}" }
      #   ]
    secrets:
      MS_TEAMS_URI: ${{ vars.MS_TEAMS_URI }}
