# Workflow Code: MercifulLlama_v15    DO NOT REMOVE
# Purpose:
#    This is only required when teams have separate deployable artifacts (db/mfe/api/etc.)
#    but they need each item to be deployed together.
#
#    This workflow coordinates setting up environment variables, getting various stakeholder
#    and attestor approvals, ensuring the tag is valid for prod deployments and then initiates
#    individual deployments via repository_dispatch events.
#
# Note:
#    This workflow is intended to be used with repos that have multiple deployable artifacts which are deployed together.  It is not
#    intended for repos that have a single deployable or repos with multiple deployable artifacts that are deployed independently.
#    This workflow initiates multiple deployments but each deployable item should have their own streamlined deployment workflow set up.
#    The streamlined deployment uses the normal workflow (app service/function, database, windows service, iis site, etc) but has
#    instructions above the repository_dispatch trigger around the changes that need to be made.
#
# Frequency:
#    - This workflow can be duplicated.  A new workflow should be setup
#      for each distinct group of items that needs to be deployed together.
#
# Projects to use this Template with:
#    -  Any project that needs to be deployed at the same time as others

name: Deploy Multiple Items
run-name: Deploy ${{ inputs.tag }} to ${{ inputs.environment }}
on:
  workflow_dispatch:
    inputs:
      tag:
        description: The tag for the release that will be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment:
        description: The environment to deploy to
        required: true
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod

env:
  ENVIRONMENT: ${{ inputs.environment }}
  RELEASE_TAG: ${{ inputs.tag }} # This is the tag that we'll be deploying

jobs:
  # This job utilizes a reusable workflow which will:
  #   1 - Verify the tag provided is a valid ref.
  #   2 - If deploying to a production environment, verify the tag is reachable from the default branch 
  #       and that the corresponding release is production ready (not pre-release or a draft).
  setup-deployment-workflow:
    uses: im-practices/.github/.github/im-reusable-setup-deployment-workflow.yml@v2
    with:
      ref-to-deploy: ${{ inputs.tag }}
      deployment-environment: ${{ inputs.environment }}
      # production-environments: 'prod,prod-secondary'  # TODO:  Adjust and include the production-environments if necessary (some apps may need to add stage/stage-secondary to this list)
      # default-branch: main # TODO:  Update and include this arg if the default branch is not main
      # workflow-summary : | # TODO:  If desired, the workflow summary that is generated can be overridden by providing this custom value.

  # Each env has their own stakeholder approval environment.  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  stakeholder-approval:
    needs: [setup-deployment-workflow]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ github.event.inputs.environment }} Stakeholder Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Stakeholder approval was received or no required reviewers were set for this environment."

  # Each env has their own attestor approval environment (meant for QA Attestations).  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  attestor-approval:
    needs: [setup-deployment-workflow]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ github.event.inputs.environment }} Attestor Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Attestor approval was received or no required reviewers were set for this environment."

  initiate-deployments:
    needs: [stakeholder-approval, attestor-approval]
    runs-on: [self-hosted, im-linux]

    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      # The 'start deployment' blocks below will initiate the deployment of a single item by creating a repository dispatch event that tells GitHub to
      # kick off a particular workflow.  Each deployable item that will be started this way should have a streamlined copy of the appropriate workflow
      # (app service/function, database, windows service, iis site, etc).  The streamlined copy has a repository_dispatch event of a certain type that
      # should match what is specified here.  The streamlined workflow also won't have any of the tag verification/approvals/etc.
      #
      # Something to keep in mind is Actions doesn't wait for the streamlined workflow to finish, it will move on as soon as GitHub indicates the
      # request has been received.  If your use case is to have one streamlined deployment completely finish before starting the next one, the
      # 'start deployment' block below should be copied to the bottom of the workflow that acts as a gate to the next deployment workflow.

      # TODO: Add a 'start deployment' block for each item that needs to be deployed.  This is a 'fire and forget' method
      - name: Start Deployment for <deployable-name> # TODO: Add the name of the deployable
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PIPELINE_BOT_PAT }} # This is an org-level secret #TODO:  make sure im-pipeline-bot has at least write access to your repo
          script: |
            github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "", // TODO:  Get the type from the streamlined workflow that will be kicked off.  This is listed in the types:[] under the repository_dispatch trigger.
              client_payload: {
                environment: "${{ env.ENVIRONMENT }}",
                tag: "${{ env.RELEASE_TAG }}"
              }
            });

      # TODO:  If you need one deployment to wait for one to finish before it begins, consider
      #        using reusable workflows rather than the repository_dispatch event above
      #        https://docs.github.com/en/actions/learn-github-actions/reusing-workflows
