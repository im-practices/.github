# Workflow Code: MysteriousStranger_v11    DO NOT REMOVE
# Purpose:
#    Gathers various stakeholder and attestor approvals, downloads artifacts from a release with the
#    specified tags, makes changes to any configuration files for the specified environments, stops
#    the service, deploys the pre-built artifacts to a target machine then starts the service. Each
#    deployable project in a solution should have their own deployment workflow.
#
# Frequency:
#    If files from this repository are being deployed at different intervals to one or more places, having a seperate deployment
#    workflow is preferable.  The same workflow can be used even if multple server targets are deployed to during the same deployment
#    cycle.
#
# TODO: Prerequisites:
#     - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#     - Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
#       Generally one board should be set up per windows service in the repository.
#     - The target server must be domain joined. If this is not the case already, create an ITHD ticket to have it joined to
#       the ExtendHealth domain for service account authentication
#     - Create an ITHD ticket to have an ExtendHealth Active directory service account created for each deployment environment.
#       That service account should then be added to an AD Group Policy Object (GPO); that GPO will then be applied to target
#       servers/deployment environments. If this deployment process and the service accounts are no longer needed at some point,
#       let infrastructure know that they can remove the accounts and GPOs
#     - Make sure the Service account secrets have been added to the environment
#     - Do not use the instructions in the windows server action to prep the target server for WinRM connections,
#       those instructions are more for an open-source user. Instead, WinRM listeners should already be configured on target servers.
#       If a WinRM connection can't be established create an ITHD ticket to have the WinRM listeners fixed or created

name: Deploy Windows Server Files
run-name: Deploy ${{ inputs.tag }} to ${{ inputs.environment }} Windows Server
on:
  # TODO: If the repository has a single deployable artifact or multiple deployables that are deployed independently:
  #       1. Use the workflow_dispatch trigger
  #       2. Delete the repository_dispatch trigger and comments below.
  workflow_dispatch:
    inputs:
      tag:
        description: The tag for the release that will be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment:
        description: The environment to deploy to.
        required: true
        type: choice
        options: # TODO:  Update for your available environments
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod

  # TODO: If a repository has multiple deployable artifacts that are deployed together through the 'Deploy Multiple Items' workflow:
  #       1. Uncomment the repository_dispatch trigger
  #       2. Delete the workflow_dispatch trigger
  #       3. Change the env.ENVIRONMENT value from "${{ inputs.environment }}" to: "${{ github.event.client_payload.environment }}"
  #       4. Change the env.RELEASE_TAG value from "${{ inputs.tag }}" to: "${{ github.event.client_payload.tag }}"
  #       5. Under the 'setup-deployment-workflow' job:
  #          a. Delete the 'Checkout Repository' step
  #          b. Delete the 'Verify Tag Exists' step
  #       6. Delete the 'stakeholder-approval' job
  #       7. Delete the 'attestor-approval' job
  #       8. Delete the 'setup-deployment-workflow' job
  #       9. Under the 'deploy-service' job, update the needs property to be: "needs: [setup-deployment-workflow]"
  # repository_dispatch:
  #   types: [<deployable_name>_deploy] # TODO: Replace <deployable_name>.  This will be used in the 'Deploy Multiple Items' workflow to target this deployment workflow.

env:
  ENVIRONMENT: ${{ inputs.environment }}
  RELEASE_TAG: ${{ inputs.tag }}
  # TODO: Add any global environment vars that don't change based on deployment environment (dev, qa, stage....)

jobs:
  # This job utilizes a reusable workflow which will:
  #   1 - Verify the tag provided is a valid ref.
  #   2 - If deploying to a production environment, verify the tag is reachable from the default branch 
  #       and that the corresponding release is production ready (not pre-release or a draft).
  setup-deployment-workflow:
    uses: im-practices/.github/.github/im-reusable-setup-deployment-workflow.yml@v2
    with:
      ref-to-deploy: ${{ inputs.tag }}
      deployment-environment: ${{ inputs.environment }}
      # production-environments: 'prod,prod-secondary'  # TODO:  Adjust and include the production-environments if necessary (some apps may need to add stage/stage-secondary to this list)
      # default-branch: main # TODO:  Update and include this arg if the default branch is not main
      # workflow-summary : | # TODO:  If desired, the workflow summary that is generated can be overridden by providing this custom value.

  # Each env has their own stakeholder approval environment.  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  stakeholder-approval:
    needs: [setup-deployment-workflow]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ inputs.environment }} Stakeholder Approval' # Use inputs context because env context is not available to environment:
    steps:
      - name: Approval Received
        run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Stakeholder approval was received or no required reviewers were set for this environment."

  # Each env has their own attestor approval environment (meant for QA Attestations).  If no required reviewers are set for
  # that environment, the workflow will continue without requiring anyone to approve the deployment.
  attestor-approval:
    needs: [setup-deployment-workflow]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    environment: '${{ inputs.environment }} Attestor Approval' # Use inputs context because env context is not available to environment:
    steps:
      - run: |
          echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."
          echo "Attestor approval was received or no required reviewers were set for this environment."

  deploy-files:
    needs: |
      - stakeholder-approval
      - attestor-approval
    runs-on: [self-hosted, windows-2019] # In order to use WinRM this must remain as a windows runner
    environment: ${{ inputs.environment }} # Use inputs context because env context is not available to environment:

    env:
      ASSET_ZIP: 'published_app.zip'
      UNZIPPED_ASSET: 'published_app'
      DEPLOY_ZIP: 'deploy.zip'
      # TODO: If a variable is the same for all environments add it here

    outputs:
      WINDOWS_SERVER: ${{ steps.set-vars.outputs.WINDOWS_SERVER }}

    steps:
      # TODO: If any of the following deployment vars do not vary from environment to environment, they should
      #      be converted to a global env var at the top of the workflow and the output in this job should be removed

      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables
        id: set-vars
        uses: im-open/set-environment-variables-by-scope@v1.1
        with:
          scope: ${{ env.ENVIRONMENT }}
        env:
          # TODO: Verify the target server name, postfixed with "extendhealth.com", i.e. target-server.extendhealth.com.
          #   This will allow the runners to look up the ip address by dns.
          WINDOWS_SERVER@dev: ''
          WINDOWS_SERVER@qa: ''
          WINDOWS_SERVER@stage: ''
          WINDOWS_SERVER@prod: ''
          # TODO: Verify the local path on the target server to deploy files to
          DEPLOYMENT_PATH@dev: ''
          DEPLOYMENT_PATH@qa: ''
          DEPLOYMENT_PATH@stage: ''
          DEPLOYMENT_PATH@prod: ''
          # TODO: Verify the local path on the target server to deploy files to
          DEPLOYMENT_SA_ID@dev: ''
          DEPLOYMENT_SA_ID@qa: ''
          DEPLOYMENT_SA_ID@stage: ''
          DEPLOYMENT_SA_ID@prod: ''
          # TODO: Add any other scope/environment specific variable that needs selected here
          #  If a variable is possible to more than one environment then this format can be used:
          #    SCOPED_VAR@scope1 scope2: 'Lower Scope Value'
          #    SCOPED_VAR@scope3 scope4: 'Higher Scope Value'

      - name: Download artifacts from release
        uses: im-open/download-release-asset@v1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          asset-name: ${{ env.ASSET_ZIP }}
          tag-name: ${{ inputs.tag}}

      - name: Unzip release asset
        shell: powershell
        run: Expand-Archive -LiteralPath ${{ env.ASSET_ZIP }} -DestinationPath ./${{ env.UNZIPPED_ASSET }}

      # TODO: If there are Octostache style placeholders in the files that need replacements before deployment, use this action
      #       otherwise, this action can be deleted.
      # This action works well with the im-open/set-environment-variables-by-scope action. Environment variables set in that action will be utilized by this one.
      # https://github.com/im-open/octostache-action
      - uses: im-open/octostache-action@v4.0
        with:
          variables-file: '' # TODO: Add the ./path/file containing the variabl¬e substitutions to make, you will need to create this file  See the action for more details.
          files-with-substitutions: './${{ env.UNZIPPED_ASSET }}/**' # TODO: Add the paths to the files to make substitutions in, e.g. ./path/file, ./path/another-file
        # env: # TODO: Environment variables can be added that will also be used for substitution (good for secrets). These will override any variable in the variables-file with the same name.

      # TODO: If you need any json, yml or xml file (web.config/app.config/nlog.config) substitutions use the following
      #        action, otherwise delete it. This action won't add or remove items, it will just update the values.
      - uses: im-open/variable-substitution@v2
        with:
          files: '' # TODO: add a comma separated list of files and the patterns, like './src/MyProj/We*.config, ./src/MyProj/Nlog.config'
        env:
          # TODO: replace examples with actual substitutions
          Value1: 'Value1' # Example showing replacement at a root level node
          Nested.Value.Name: 'Value2' # Example showing replacement at a nested node
          SecretValue: ${{ secrets.VALUE }} # Example showing replacement with a secret

      - name: Zip the published app for faster deployment and uploads
        working-directory: ./${{ env.UNZIPPED_ASSET }}
        run: 7z a -tzip ../${{ env.DEPLOY_ZIP }} .

      - name: Deploy Deployment Package
        id: deploy
        uses: im-open/deploy-windows-files@v2.0
        with:
          server: ${{ env.WINDOWS_SERVER }}
          service-account-id: ${{ env.DEPLOYMENT_SA_ID }}
          service-account-password: ${{ secrets.DEPLOYMENT_SA_SECRET }}
          source-zip-file-path: ./${{ env.DEPLOY_ZIP }}
          deployment-folder-path: '${{ env.DEPLOYMENT_PATH }}'
          clean-deployment-folder: 'true' # TODO: Verify that all files not in the deployment package should be removed.

      - name: Delete .zips and folder that contains sensitive info
        continue-on-error: true
        working-directory: ./
        run: |
          rm -f ${{ env.ASSET_ZIP }}
          rm -f ${{ env.DEPLOY_ZIP }}
          rm -rf ${{ env.UNZIPPED_ASSET }}

  # This job utilizes a reusable workflow which will:
  #  1 - Update the deployment board based on the workflow conclusion
  #  2 - Post a deployment status in the repo owner's Teams channel (connected to the MS_TEAMS_URI secret)
  #  3 - Post a deployment status in the Deployment Notifications Teams channel if the deploy is for prod, is successful and the flag to do so is not set to false
  update-deployment-board-and-send-teams-notification:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    needs: [setup-deployment-workflow, deploy-files]
    if: always()
    uses: im-practices/.github/.github/workflows/im-reusable-finish-deployment-workflow.yml@v2
    with:
      # Required Inputs
      deployment-environment: ${{ inputs.environment }} # The environment/target that was deployed to (dev, qa, stage, stage-secondary, uat, demo, prod, prod-secondary)
      gh-secrets-environment: ${{ inputs.environment }} # The GitHub environment that secrets are pulled from
      release-tag: ${{ inputs.tag }}
      title-of-teams-post: 'Deploy <<PROJECT NAME>> files @${{ inputs.tag }} to ${{ inputs.environment }}' # TODO:  Replace <<PROJECT_NAME>> and verify title to ensure it is descriptive/readable.
      
      # Optional Inputs with their default values.  These items can be removed if the default value does not need to be adjusted.
      # post-status-in-deployment-notifications-channel: true # TODO:  Include this arg and set to false if you do not want a status post in the Deployment Notifications channel for prod deploys
      # timezone: 'america/denver'                            # TODO:  Include this argument and update if your timezone is not america/denver
      # deployment-board-number: 1                            # TODO:  Include this argument and update if your deployment board is not 1
      # deployable-type: ''                                   # TODO:  If there are multiple deployables in the repository, add a string type like MFE/DB/API for the deployment board
      # TODO:  These are the custom facts that will be included the different Teams posts by default.  If adjusting the facts that are supplied, they must be a valid JSON array.
      # custom-facts-for-team-channel: |
      #   [
      #     { "name": "Workflow", "value": "${{ github.workflow }}" },
      #     { "name": "Run", "value": "${{ github.run_id }}" },
      #     { "name": "Actor", "value": "${{ github.actor }}" },
      #     { "name": "Version", "value": "${{ inputs.tag }}" }
      #   ]
      # custom-facts-for-deployment-notifications-channel: |
      #   [
      #     { "name": "Actor", "value": "${{ github.actor }}" },
      #     { "name": "Version", "value": "${{ inputs.tag }}" }
      #   ]
    secrets:
      MS_TEAMS_URI: ${{ vars.MS_TEAMS_URI }}
      DEPLOY_NOTIFICATIONS_CHANNEL: ${{ vars.DEPLOY_NOTIFICATIONS_CHANNEL }}    
