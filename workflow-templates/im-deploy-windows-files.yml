# Workflow Code: MysteriousStranger_v1    DO NOT REMOVE
# Purpose:
#    Gathers various stakeholder and attestor approvals, downloads artifacts from a release with the
#    specified tags, makes changes to any configuration files for the specified environments, stops
#    the service, deploys the pre-built artifacts to an on-prem machine then starts the service. Each
#    deployable project in a solution should have their own deployment workflow.
#
# Frequency:
#    Each deployable on-prem service in the repository should have their own copy of this workflow rather than trying to deploy several
#    on-prem service with the same workflow.  If the service is deployed as part of a group, the service still needs its own copy of this
#    workflow but it will be streamlined (instructions below) since the Deploy Multiple Items workflow handles many of these checks.
#
# TODO: Prerequisites:
#     - Make sure the Service account secrets have been added to the environment.
#       For example 'extendhealth\svc-appToDeploy-env'
#     - Make sure the host windows server has been prepped to accept incoming WinRM Requests
#     - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#     - Set up a deployment board if it does not already exist: https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
#       Generally one board should be set up per windows service in the repository.

name: Deploy On Prem Windows Files
on:
  # TODO: If the repository has a single deployable artifact or multiple deployables that are deployed independently:
  #       1. Use the workflow_dispatch trigger
  #       2. Delete the repository_dispatch trigger and comments below.
  workflow_dispatch:
    inputs:
      tag:
        description: The tag for the release that will be deployed.  For Production, only tags reachable by the default branch will be accepted.
        required: true
      environment:
        description: The environment to deploy to.
        required: true
        type: choice
        options:
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  RELEASE_TAG: ${{ github.event.inputs.tag }}
  TIMEZONE: 'america/denver' # TODO: Verify timezone
  # TODO: Add any global environment vars that don't change based on deployment environment (dev, qa, stage....)

jobs:
  set-vars:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Verify Tag Exists
        uses: im-open/verify-git-ref@v1.1.0
        with:
          branch-tag-sha: ${{ env.RELEASE_TAG }}

      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

  # TODO: If any of the following deployment vars do not vary from environment to environment, they should
  #      be converted to a global env var at the top of the workflow and the output in this job should be removed

  # This job needs to run for all environments because deploy-files relies
  # on it but the steps inside this job will only run for the Prod env.
  validate-tag-is-in-main-for-prod-deploys:
    needs: [set-vars]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}." >> $GITHUB_STEP_SUMMARY

      # In this job, always checkout the default branch (not the tag that was provided as an input).  Also use
      # fetch-depth: 0 to retrieve the history and tags so we can check if a tag is reachable from the default branch.
      - name: Checkout Repository
        if: env.ENVIRONMENT == 'prod'
        uses: actions/checkout@v2
        with:
          ref: 'main' # TODO: verify the name of your default branch
          fetch-depth: 0

      - uses: im-open/is-tag-reachable-from-default-branch@v1.0.1
        if: env.ENVIRONMENT == 'prod'
        with:
          tag: ${{ env.RELEASE_TAG }}

      - uses: im-open/is-release-production-ready@v1.0.1
        if: env.ENVIRONMENT == 'prod'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.RELEASE_TAG }}
          fail-for-prerelease: true # This only runs for prod environments, so if the release is not production ready it should fail

  # If you want to verify that the Jira ticket being deployed has the proper attestations, there is an action for that.
  # https://github.com/im-open/verify-fields-on-jira-task
  # Set up a new job, or add to an existing one that makes sense, and add a step with that action.
  # Details on how to use the action can be found in the action's README.

  deploy-files:
    needs: [set-vars]
    runs-on: [self-hosted, windows-2019]
    environment: ${{ github.event.inputs.environment }} # Use inputs context because env context is not available to environment:

    env:
      ASSET_ZIP: 'published_app.zip'
      UNZIPPED_ASSET: 'published_app'
      DEPLOY_ZIP: 'deploy.zip'
      DEPLOY_DIRECTORY: 'C:\FILE_SHARE' # TODO: Verify the target directory of the files to be deployed

    steps:
      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables
        id: set-vars
        uses: im-open/set-environment-variables-by-scope@v1.0.4
        with:
          scope: ${{ env.ENVIRONMENT }}
        env:
          # TODO: Fill in the iis-server and remove the environments that are not used.
          # This should be a FQDN name (on-prem-server.extendhealth.com) for the DNS request
          # to resolve correctly
          WINDOWS_SERVER@dev: ''
          WINDOWS_SERVER@qa: ''
          WINDOWS_SERVER@stage: ''
          WINDOWS_SERVER@prod: ''
          # TODO: Add any deployment environment specific variables

      - name: Download artifacts from release
        uses: im-open/download-release-asset@v1.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          asset-name: ${{ env.ASSET_ZIP }}
          tag-name: ${{ github.event.inputs.tag}}

      - name: Unzip release asset
        shell: powershell
        run: Expand-Archive -LiteralPath ${{ env.ASSET_ZIP }} -DestinationPath ./${{ env.UNZIPPED_ASSET }}

      # TODO: If you need to do any Octopus variable substitution (i.e. replacing #{OCTO_PLACEHOLDER} in files) use the following action.  Delete if not using.
      # This action works well with the im-open/set-environment-variables-by-scope action. Environment variables set in that action will be utilized by this one.
      # https://github.com/im-open/octostache-action
      - uses: im-open/octostache-action@v4.0.0
        with:
          variables-file: '' # TODO: Add the ./path/file containing the variable substitutions to make, you will need to create this file  See the action for more details.
          files-with-substitutions: '' # TODO: Add the paths to the files to make substitutions in, e.g. ./path/file, ./path/another-file
        # env: # TODO: Environment variables can be added that will also be used for substitution (good for secrets). These will override any variable in the variables-file with the same name.

      - name: Zip the published app for faster deployment and uploads
        working-directory: ./${{ env.UNZIPPED_ASSET }}
        run: 7z a -tzip ../${{ env.DEPLOY_ZIP }} .

      - name: Deploy Deployment Package
        id: deploy
        uses: im-open/deploy-windows-files@v2.0.2
        with:
          server: ${{ env.WINDOWS_SERVER }}
          service-account-id: ${{ secrets.DEPLOYMENT_SA_ID }}
          service-account-password: ${{ secrets.DEPLOYMENT_SA_SECRET }}
          source-zip-file-path: ./${{ env.DEPLOY_ZIP }}
          deployment-folder-path: ${{ env.DEPLOY_DIRECTORY }}
          clean-deployment-folder: 'true'

      - name: Delete .zips and folder that contains sensitive info
        continue-on-error: true
        working-directory: ./
        run: |
          rm -f ${{ env.ASSET_ZIP }}
          rm -f ${{ env.DEPLOY_ZIP }}
          rm -rf ${{ env.UNZIPPED_ASSET }}

  update-deployment-board-and-send-teams-notification:
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    needs: [set-vars, deploy-service]
    if: always()
    steps:
      - run: echo "The current environment is ${{ env.ENVIRONMENT }}.  The Tag is ${{ env.RELEASE_TAG }}."

      # If you want to automatically transition a deployment task in Jira based on the success or failure of this workflow, this job would be a good place for that.
      # There is an action that can do just that: https://github.com/im-open/transition-jira-tasks-by-query
      # Details on how to set up that action can be found in the action's README.
      # There are secrets for the username and password already set up as org level secrets called JIRA_USERNAME and JIRA_PASSWORD.

      - uses: im-open/workflow-conclusion@v2.0.2
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo

      # https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.3.8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          environment: ${{ env.ENVIRONMENT }}
          board-number: '' # TODO: Add the automated deployment board number or remove if not using an automated deployment project board.
          ref: ${{ env.RELEASE_TAG }}
          ref-type: 'tag'
          #deployable-type: '' # TODO:  If there are multiple deployables in the repository, add a string type like MFE/DB/API
          deploy-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          timezone: ${{ env.TIMEZONE }}

      - name: Send Status to Teams
        if: always()
        uses: im-open/post-status-to-teams-action@v1.1.2
        with:
          title: ${{ needs.set-vars.outputs.WEBSITE_NAME }} Deployment to ${{ needs.set-vars.outputs.IIS_SERVER }}
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # This is a repo-level secret (unless 'environment:' has been added to the job)
          timezone: ${{ env.TIMEZONE }}
          # TODO: Verify the custom facts you want included
          custom-facts: |
            [
              { "name": "Workflow", "value": "${{ github.workflow }}" },
              { "name": "Run", "value": "${{ github.run_id }}" },
              { "name": "Actor", "value": "${{ github.actor }}" }
            ]

      - name: Send Status to Deployment Notifications Channel for Prod Deploys
        if: always() && env.ENVIRONMENT == 'prod' && steps.conclusion.outputs.workflow_conclusion == 'success'
        uses: im-open/post-status-to-teams-action@v1.1.2
        with:
          title: ${{ needs.set-vars.outputs.WEBSITE_NAME }} Deployment to ${{ needs.set-vars.outputs.IIS_SERVER }} # TODO Verify this title gives enough info since it will be posted to the Prod Notifications channel
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.DEPLOY_NOTIFICATIONS_CHANNEL }} # This is an org-level secret
          timezone: ${{ env.TIMEZONE }}
          include-default-facts: false # This cuts down on the message size for the prod room
          custom-facts: |
            [
              { "name": "Actor", "value": "${{ github.actor }}" },
              { "name": "Version", "value": "${{ env.RELEASE_TAG }}" }
            ]
