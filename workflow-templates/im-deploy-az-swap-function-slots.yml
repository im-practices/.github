name: Swap Azure Function Slots

# This workflow can be kicked off manually and it can also be kicked off automatically from
# another workflow by using the repository_dispatch event trigger.  This workflow is designed
# to know about each of your environments, so the only thing you need to input is the
# environment where slots will be toggled.

#TODO: Remove the pagerduty items if you do not want a window to be opened when this workflow is invoked
on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment where slots are being swapped
        required: true
      open-pagerduty-window:
        description: Flag indicating whether a pagerduty maintenance window should be opened
        required: true
        default: 'false'
  repository_dispatch:
    types: [swap_slots]

# TODO:  If any of these env variables change between environments, add a new set-variable-based-on-environment step to set the env var
env:
  TARGET_SLOT: 'Production'
  SOURCE_SLOT: '' # TODO:  Add the name of the source slot
  PAGERDUTY_SERVICE_IDS: '[ "${{secrets.PAGERDUTY_SERVICE_ID}}" ]' # TODO:  Add your PD Service IDs here, the svc id usually has a format of P0XXXXX
  PAGERDUTY_WINDOW_IN_MIN: 30 # TODO:  Verify the length of your PD Maintenance Window
  PAGERDUTY_WINDOW_DESC: 'Deploying Code to ${{ github.event.inputs.environment }} from GitHub Actions' # TODO:  Verify this PD Maintenance Window Description

jobs:
  get-inputs-from-event:
    runs-on: ubuntu-20.04
    outputs:
      environment: ${{steps.get-inputs.outputs.environment}}
      open-window: ${{steps.get-inputs.outputs.openWindow}}
    steps:
      - id: get-inputs
        run: |
          eventName=${{ github.event_name }}
          if [ "$eventName" == "workflow_dispatch" ]; then
            environment=${{ github.event.inputs.environment }}
            openWindow=${{ github.event.inputs.open-window }}
          elif [ "$eventName" == "repository_dispatch" ]; then
            environment=${{ github.event.client_payload.environment }}
            openWindow=${{ github.event.client_payload.open-window }}
          fi
          echo "The environment input is: $environment"
          echo "::set-output name=environment::$environment"
          echo "The open-window input is: $openWindow"
          echo "::set-output name=openWindow::$openWindow"

  swap-slots:
    runs-on: [self-hosted, ubuntu-20.04]
    needs: [get-inputs-from-event]
    environment: ${{ needs.get-inputs-from-event.outputs.environment }}
    steps:
      - name: Open a PagerDuty Maintenance Window
        if: needs.get-inputs-from-event.outputs.open-window == 'true'
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-ids: ${{ env.PAGERDUTY_SERVICE_IDS }}

      - uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'RESOURCE_GROUP'
          current-environment: ${{ needs.get-inputs-from-event.outputs.environment }}
          dev-value: '' # TODO: Add the dev rgrp name or delete if env does not exist
          qa-value: '' # TODO: Add the qa rgrp name or delete if env does not exist
          stage-value: '' # TODO: Add the stage rgrp name or delete if env does not exist
          prod-value: '' # TODO: Add the prod rgrp name or delete if env does not exist
          demo-value: '' # TODO: Add the demo rgrp name or delete if env does not exist
          uat-value: '' # TODO: Add the uat rgrp name or delete if env does not exist

      - uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'AZ_FUNC_NAME'
          current-environment: ${{ needs.get-inputs-from-event.outputs.environment }}
          dev-value: '' # TODO: Add the dev func name or delete if env does not exist
          qa-value: '' # TODO: Add the qa func name or delete if env does not exist
          stage-value: '' # TODO: Add the stage func name or delete if env does not exist
          prod-value: '' # TODO: Add the prod func name or delete if env does not exist
          demo-value: '' # TODO: Add the demo func name or delete if env does not exist
          uat-value: '' # TODO: Add the uat func name or delete if env does not exist

      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap
        run: |
          az functionapp  deployment slot swap \
          --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
          --resource-group ${{env.RESOURCE_GROUP}} \
          --name ${{ env.AZ_FUNC_NAME }}  \
          --slot ${{ env.SOURCE_SLOT }} \
          --target-slot ${{ env.TARGET_SLOT }}

      # TODO:  Uncomment if you want to destroy the slot after swap.  Delete if you don't.
      # - run: |
      #     az functionapp  deployment slot delete \
      #     --slot ${{ env.SOURCE_SLOT }} \
      #     --name ${{ env.AZ_FUNC_NAME }}  \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{env.RESOURCE_GROUP}}

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear

      - name: Close the PagerDuty Maintenance Window
        if: always() && needs.get-inputs-from-event.outputs.open-window == 'true' && steps.open-window.outcome == 'success'
        uses: im-open/close-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          maintenance-window-id: ${{steps.open-window.outputs.maintenance-window-id}}
