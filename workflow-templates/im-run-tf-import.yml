# Workflow Code: DrearyBuck_v16    DO NOT REMOVE

# Purpose:
#    Imports a specified resource into the terraform state when someone kicks it off manually.
#
# Frequency:
#    - This workflow should only be used once per repository
#
# Projects to use this Template with:
#    -  Terraform (Optional Template)
#
# TODO Prerequisites:
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.

name: Import Terraform State
run-name: Import ${{ inputs.environment }} ${{ inputs.tf-resource-address }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment the import should be done in.
        required: true
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod
      branch-tag-sha:
        description: The branch, tag or sha of the terraform that has the configuration for the resource(s) to import.
        required: true
      tf-resource-address:
        description: The address of the resource to import. E.g. module.common.azurerm_mssql_server.server
        required: true
      tf-resource-id:
        description: The id of the resource to import. It should look something like /subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/{provider_name}/{...etc...}.
        required: true

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  GITHUB_REF: ${{ github.event.inputs.branch-tag-sha  }}
  # The following ARM_* secrets are org-level secrets
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ENVIRONMENT: 'public'
  TF_IN_AUTOMATION: 'true'
  TF_VERSION: '~>1.0.5' #TODO:  Verify your version of terraform.
  TF_WORKING_DIR: './infrastructure/${{ github.event.inputs.environment }}' # TODO: Verify this directory is correct for your repository (older projects may not be inside of an infrastructure folder)
  # The following SSH_* secrets are org-level secrets
  SSH_KEY_STORAGE_ACCOUNT: ${{ secrets.SSH_STORAGE_ACCOUNT }}
  SSH_KEY_NETWORK_INFO: ${{ secrets.SSH_NETWORK_INFO }}
  SSH_DEPLOY_KEY_INFO: |
    [
      { "orgAndRepo": "im-platform/storage-account-network-rules", "envName" : "SSH_KEY_STORAGE_ACCOUNT" },
      { "orgAndRepo": "im-platform/network-information", "envName" : "SSH_KEY_NETWORK_INFO" }
    ]

jobs:
  tf-import-state:
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ github.event.inputs.environment }} # Use inputs context because env context is not available to environment:

    defaults:
      run:
        shell: bash
        working-directory: '${{ env.TF_WORKING_DIR }}'

    steps:
      - run: |
          echo $'
          | Build Arguments  | Value                                            |
          | ---              |  ---                                             |
          | Environment      | `${{ env.ENVIRONMENT }}`                         |
          | Branch/Tag/Sha   | `${{ env.GITHUB_REF }}`                          |
          | Resource Address | `${{ github.event.inputs.tf-resource-address }}` |
          | Resource ID      | `${{ github.event.inputs.tf-resource-id }}`      |' >> $GITHUB_STEP_SUMMARY
          
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}

      # Allows pulling modules from the repo instead of artifactory
      - name: Setup SSH Keys and known_hosts
        uses: im-open/setup-deploy-keys@v1.1
        with:
          deploy-key-info: ${{ env.SSH_DEPLOY_KEY_INFO }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: '${{ env.TF_VERSION }}'

      - name: Terraform Init
        run: terraform init

      - name: Terraform Import
        # TODO: Add any additional parameters that are needed
        run: terraform import ${{ github.event.inputs.tf-resource-address }} ${{ github.event.inputs.tf-resource-id }}
