# Workflow Code: TrustingCockroach_v29    DO NOT REMOVE
# Purpose:
#    Automatically builds the project and runs tests with code coverage. If
#    everything is green, a new semantic version is calculated and a new package
#    version and tag are pushed to the repository. When the PR is merged, the
#    package versions created for each branch commit in the PR are removed.
#
# Frequency: This workflow should be duplicated once per nuget package in the repository
#
# Projects to use this Template with:
#    - Nuget Package (Core Template)
#
# TODO Prerequisites:
#    - If the project contains a local nuget.config remove it.  It interferes with restoring packages on the GitHub Action runners.
#    - Make sure the .csproj file has been updated with the appropriate values required for GH Packages (PackageId, Version, RepositoryUrl)
#      https://github.com/im-practices/git-er-done/blob/main/packages/publish-nuget.md
#    - This workflow uses the elevated GH_PACKAGES_TOKEN secret to read/write/delete packages.  It is at the organization level but only
#      available to select repos.  To use this let a member of the SWAT team or Infra-Purple know and it can be enabled for your repository.

name: 'Build and Publish Nuget package'

on:
  # This workflow will run for the PR events:
  #   opened/reopened: A PR is opened/re-opened,
  #   synchronize: The PR's head branch is updated (commits pushed, the base branch changed or the head is updated from the base branch)
  #   closed: A PR is merged or closed (The examine-triggers job makes sure we only run if a merge happened, not when a close happens)
  pull_request:
    # TODO: This will create a new nuget package for each push to the PR, determine if that is the desired behavior or if you only
    #        want a package created when a merge to main happens.
    types: [opened, reopened, synchronize, closed]

    # TODO: If there are multiple projects in the repo, add the path to the nuget package project so changes to those projects don't trigger this workflow
    #        If the repo only contains the nuget package project, delete the paths:
    paths:
      - ''

env:
  READ_PKG_TOKEN: ${{ secrets.READ_PKG_TOKEN }} # This is an org-level secret # TODO: this env can be removed if the project does not contain an .npmrc/nuget.config file that needs this value
  TIMEZONE: 'america/denver' # TODO: Verify timezone

jobs:
  examine-triggers:
    runs-on: ubuntu-latest
    outputs:
      CONTINUE_WORKFLOW: ${{ env.CONTINUE_WORKFLOW }}
      IS_MERGE_TO_MAIN: ${{ env.IS_MERGE_TO_MAIN }}
      PRERELEASE: ${{ env.PRERELEASE }}

    steps:
      - run: |
          echo "CONTINUE_WORKFLOW=true" >> $GITHUB_ENV
          echo "IS_MERGE_TO_MAIN=false" >> $GITHUB_ENV
          echo "PRERELEASE=true" >> $GITHUB_ENV

      - if: github.event.action == 'closed' && github.event.pull_request.merged == false
        run: echo "CONTINUE_WORKFLOW=false" >> $GITHUB_ENV

      - if: github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' # TODO: verify default branch name
        run: |
          echo "IS_MERGE_TO_MAIN=true" >> $GITHUB_ENV
          echo "PRERELEASE=false" >> $GITHUB_ENV

  build-test-publish:
    runs-on: [self-hosted, ubuntu-20.04] # TODO: decide whether to run on a self-hosted runner. It's only necessary if pushing the package to Artifactory.
    needs: [examine-triggers]
    if: needs.examine-triggers.outputs.CONTINUE_WORKFLOW == 'true'

    defaults:
      run:
        shell: bash

    outputs:
      NEXT_VERSION: ${{ steps.version.outputs.NEXT_VERSION }}

    env:
      IS_MERGE_TO_MAIN: ${{ needs.examine-triggers.outputs.IS_MERGE_TO_MAIN }}
      PRERELEASE: ${{ needs.examine-triggers.outputs.PRERELEASE }}
      CODE_COVERAGE_CHECK_NAME_DOTNET: 'dotnet code coverage'
      CODE_COVERAGE_DIR_DOTNET: 'coverage-results/dotnet'
      CODE_COVERAGE_REPORT_NAME_DOTNET: '<project-name> .Net Code Coverage' # TODO: Replace <project-name>
      DOTNET_VERSION: '' # TODO: Add the .net version
      NUGET_PROJ_DIR: '' # TODO: Add the directory containing the nuget package project like, ./src/MyNugetProj
      NUGET_PROJ_NAME: '' # TODO: Add the name of the csproj for the nuget package
      NUGET_TEST_PROJECT: '' # TODO: Add the filename including path of the test project for your nuget package like ./tests/nugetTest/nugetTest.csproj
      PKG_NAME: '' # TODO: If dual publishing to artifactory, add the name of the nuget package in Artifactory, otherwise delete
      # CSPROJ_NAME: '' # TODO: For older projects that must be built with nuget pack (instead of dotnet pack) add the name of your csproj file, otherwise delete

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # TODO: If you are using any nuget/npm packages from GitHub Packages uncomment this step
      # - name: Authenticate with GitHub Packages
      #   uses: im-open/authenticate-with-gh-package-registries@v1.0.5
      #   with:
      #     read-pkg-token: ${{ secrets.READ_PKG_TOKEN }}  # This is an org-level secret
      #     orgs: 'im-client,im-enrollment,im-practices' # TODO: Verify list of orgs packages will be pulled from

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        env:
          DOTNET_INSTALL_DIR: './.dotnet'

      - name: Calculate next version
        id: version
        uses: im-open/git-version-lite@v2.1.2
        with:
          calculate-prerelease-version: ${{ env.PRERELEASE }}
          branch-name: ${{ github.head_ref }} # This is only populated when the trigger is pull_request, otherwise it is empty
          tag-prefix: 'none' # TODO: verify your prefix, the new ci workflows add v automatically but nuget packages typically won't have a prefix

      - name: dotnet build and pack nuget project
        # dotnet pack also builds by default, so just go ahead and create the package.
        # Set "PackageOutputPath" to place the resulting .nupkg file where the "Push to GH Packages" step can find it later.
        # Set "Version" which, by default, becomes both the assembly and Package version.
        # TODO: There are other methods for setting the version besides specifying it here.  You can update the value in the .csproj before building
        #        and remove the -p:Version property below, or the version could be passed in from a workflow_dispatch input if desired.
        # Set "RepositoryUrl" so the resulting nupkg is ready to be uploaded to GitHub packages and so the repo name and location doesn't need to be hard-coded in the .csproj.
        run: dotnet pack ${{ env.NUGET_PROJ_DIR }}/${{ env.NUGET_PROJ_NAME }} --configuration Release -p:PackageOutputPath=${{ env.NUGET_PROJ_DIR }} -p:Version=${{ steps.version.outputs.NEXT_VERSION_NO_PREFIX }} -p:RepositoryUrl=${{ github.repositoryUrl }}

      # TODO: If this is an older project you may need to use the nuget command directly and add options as applicable.
      # - name: Nuget Pack
      #   working-directory: ${{ env.NUGET_PROJ_DIR }}
      #   run: nuget pack ${{ env.CSPROJ_NAME }} -Build -Properties Configuration=Release;version="${{ steps.version.outputs.NEXT_VERSION_NO_PREFIX }}"

      - name: dotnet build test project
        run: dotnet build ${{ env.NUGET_TEST_PROJECT }} --configuration Release

      # TODO: The test projects need a package reference to coverlet.msbuild for this to output the coverage reports correctly:
      # <PackageReference Include="coverlet.msbuild" Version="3.1.0" />
      # TODO: Filters can be added to exclude certain tests: https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit
      - name: dotnet test with coverage
        continue-on-error: true
        run: dotnet test ${{ env.NUGET_TEST_PROJECT }} --logger trx --no-build --configuration Release /property:CollectCoverage=True /property:CoverletOutputFormat=opencover

      - name: create status check/comment for test results
        id: dotnet_test_check
        uses: im-open/process-dotnet-test-results@v2.2.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          timezone: ${{ env.TIMEZONE }}
          # TODO: Determine if you would like status checks, pr comments or both
          create-status-check: true
          create-pr-comment: true
          # update-comment-if-one-exists: false # TODO: By default this creates one comment and updates it for each run.  Uncomment if you wish to have one new comment for every workflow run.

      - name: create code coverage report
        uses: im-open/code-coverage-report-generator@4.9.0
        with:
          reports: '*/**/coverage.opencover.xml'
          targetdir: ${{ env.CODE_COVERAGE_DIR_DOTNET }}
          title: ${{ env.CODE_COVERAGE_REPORT_NAME_DOTNET }}
          tag: 'Workflow: ${{ github.workflow }} <br/> Run Number: ${{ github.run_number }} <br/> Run ID: ${{ github.run_id }}'
          # TODO: Add the appropriate filters to each type.
          # The filters are a ; separated list of items to include(+) or exclude(-).  Wildcards are accepted.
          # For instance: -xunit*;-Dapper;-*.Tests
          assemblyfilters: ''
          filefilters: ''
          classfilters: ''

      - name: create status check/comment for code coverage results
        id: dotnet_coverage_check
        uses: im-open/process-code-coverage-summary@v2.2.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          summary-file: '${{ env.CODE_COVERAGE_DIR_DOTNET }}/Summary.md'
          report-name: ${{ env.CODE_COVERAGE_REPORT_NAME_DOTNET }}
          check-name: ${{ env.CODE_COVERAGE_CHECK_NAME_DOTNET }}
          # TODO: Determine if you would like status checks, pr comments or both
          create-status-check: true
          create-pr-comment: true
          # update-comment-if-one-exists: false # TODO: By default this creates one comment and updates it for each run.  Uncomment if you wish to have one new comment for every workflow run.
          # TODO: Set the thresholds for branch and line coverage.
          # When set to 0 the outcome is neutral.  Otherwise line/branch coverage will be a 'failure' if actual coverage < threshold.
          line-threshold: 0
          branch-threshold: 0

      - name: upload dotnet code coverage report
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CODE_COVERAGE_REPORT_NAME_DOTNET }}
          path: ${{ env.CODE_COVERAGE_DIR_DOTNET }}

      - name: Check for Test Failures
        if: steps.dotnet_test_check.outputs.test-outcome != 'Passed' || steps.dotnet_coverage_check.outputs.coverage-outcome != 'Passed'
        run: |
          echo "There were test or code coverage failures.  A release will not be created."
          exit 1

      # If this version already exists in GitHub Packages, this step will fail.
      - name: Push to GH Packages
        working-directory: ${{ env.NUGET_PROJ_DIR }}
        run: |
          # Searches for all nuget packages
          nupkg=$(find . -type f -name "*.nupkg")

          # GITHUB_TOKEN is a special per-job token generated by GH for interacting with the repo
          dotnet nuget push "$nupkg" --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --api-key ${{ secrets.GITHUB_TOKEN }}

      # TODO: Remove this step if you do not wish to publish to Artifactory
      # - name: Push to Artifactory
      #   working-directory: ${{ env.NUGET_PROJ_DIR }}
      #   run: |
      #     # Searches for all nuget packages
      #     nupkg=$(find . -type f -name "*.nupkg")

      #     isMergeToMain=${{ env.IS_MERGE_TO_MAIN }}
      #     if [ "$isMergeToMain" == "true" ]; then
      #       nugetFeed='nuget-master'
      #     else
      #       nugetFeed='nuget-branches'
      #     fi

      #     # ARTIFACTORY_USERNAME and ARTIFACTORY_API_KEY are org level secrets
      #     dotnet nuget push "$nupkg" --source "https://artifacts.mktp.io/artifactory/api/nuget/$nugetFeed/${{ env.PKG_NAME }}" --api-key "${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_API_KEY }}"

      - name: Create a tag for main builds
        uses: actions/github-script@v6
        if: ${{ env.IS_MERGE_TO_MAIN }} == 'true'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{ steps.version.outputs.NEXT_VERSION }}`,
              sha: context.sha
            });

      - name: Cleanup pre-release package versions
        if: env.IS_MERGE_TO_MAIN == 'true'
        uses: im-open/delete-branch-package-versions@v2.2.1
        with:
          github-token: ${{ secrets.GH_PACKAGES_TOKEN }} # This is a special org-level secret that needs to be authorized for this repo
          organization: ${{ github.repository_owner }}
          branch-name: ${{ github.head_ref }}
          package-type: 'nuget'
          package-names: '' # TODO: Add comma separated list of packages to delete (the base name without any versions, like IdentityCient or Mktp.Logging)

  finish-build:
    if: always() && needs.examine-triggers.outputs.CONTINUE_WORKFLOW == 'true'
    needs: [examine-triggers, build-test-publish]
    runs-on: ubuntu-latest # Force this to run on github-hosted runner by using a tag that does not exist on self-hosted runners
    env:
      NEXT_VERSION: ${{ needs.build-and-publish-to-gpr.outputs.NEXT_VERSION }}
      IS_MERGE_TO_MAIN: ${{ needs.examine-triggers.outputs.IS_MERGE_TO_MAIN }}

    steps:
      - uses: im-open/workflow-conclusion@v2.1.1
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo

      - name: Send Status to Teams
        if: always()
        uses: im-open/post-status-to-teams-action@v1.3.1
        with:
          title: 'Build and Publish <project-name> to GH Packages' # TODO: Replace <project-name>
          workflow-status: ${{ steps.conclusion.outputs.workflow_conclusion }}
          workflow-type: Build
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # This is a repo-level secret
          timezone: ${{ env.TIMEZONE }}
          custom-facts: |
            [
              { "name": "Workflow", "value": "${{ github.workflow }}" },
              { "name": "Run", "value": "${{ github.run_number }}" },
              { "name": "Actor", "value": "${{ github.actor }}" },
              { "name": "Version", "value": "${{ env.NEXT_VERSION }}" }
            ]

      - name: Comment on PR with version ${{ env.NEXT_VERSION }}
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          script: |
            let nextVersion = '${{ env.NEXT_VERSION }}';
            let isMergeToMain = '${{ env.IS_MERGE_TO_MAIN }}' == 'true';

            let tagText = '- Tag - N/A';
            let testPackageText = '';
            if (nextVersion && nextVersion.length > 0) {
              tagText =  isMergeToMain ?
                `- [Tag - ${nextVersion}](${{ github.repositoryUrl }}/releases/tag/${nextVersion})` :
                `- Next Version - ${nextVersion}`;
            }

            const commentBody = `
            - [Workflow Run - ${{ steps.conclusion.outputs.workflow_conclusion }}](${{ github.repositoryUrl }}/actions/runs/${{ github.run_id }})
            ${tagText}
              `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Check for Failures
        if: steps.conclusion.outputs.workflow_conclusion == 'failure'
        run: |
          echo "There were errors in the workflow.  Check the workflow-conclusion step above for more details on what failed."
          exit 1
