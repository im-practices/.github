# Prerequisites
# 1 - Make sure the az secrets have been added to the environment
# 2 - Make sure the scm restrictions include the prod github runners (previously it had just octopus)

name: Manually deploy AZ Function by ref in Dev subscription
on:
  workflow_dispatch:
    inputs:
      branch-tag-sha:
        description: Ref (branch/tag/sha) for the code that should be deployed to the Dev subscription.
        required: true
      environment:
        description: The environment to Deploy To.
        required: true

env:
  PAGERDUTY_SERVICE_IDS: '[ "${{secrets.PAGERDUTY_SERVICE_ID}}" ]' # TODO:  Add your PD Service IDs here, the svc id usually has a format of P0XXXXX
  PAGERDUTY_WINDOW_IN_MIN: 30 # TODO:  Verify the length of your PD Maintenance Window
  PAGERDUTY_WINDOW_DESC: 'Deploying Code to ${{ github.event.inputs.environment }} from GitHub Actions' # TODO:  Verify this PD Maintenance Window Description
  DEPLOY_BOARD_NUM: '' # TODO: Add the automated deployment board number or remove if not using an automated deployment project board.
  AZ_SLOT_NAME: '' # TODO:  If using slots, set this to the name of the azure deployment slot.  If this is different per environment use the 'set-variable-based-on-environment' action to provide different values like AZ_FUNC_NAME below.
  DOTNET_VERSION: '' # TODO:  Set the .net core version of your project
  PROJECT_ROOT: '' # TODO:  set this to the folder of your function. For most projects this will be ./src/ProjectName
  ARTIFACT_NAME: 'Published Function' #TODO:  Set this to the name of the artifact that shows in the workflow's summary section

jobs:
  validate-input:
    runs-on: [ubuntu-20.04]
    steps:
      # TODO:  Update these steps if you don't use all these environments in the Development Subscription
      - name: Clean Environment Input
        id: clean-env
        uses: im-open/map-input-action@v1.0.1
        with:
          input: ${{ github.event.inputs.environment }}
          input_map: '{ "Dev": ["dev", "d", "development"], "QA": ["qa", "q"], "Stage": ["stg", "s", "stage"]  }'
          error_on_no_match: true
          custom_error_message: 'The environment must be Dev, QA or Stage'

  deploy-code:
    needs: validate-input
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{github.event.inputs.environment}}

    outputs:
      maintenance_window_id: ${{ steps.open-window.outputs.maintenance-window-id }}

    steps:
      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-ids: ${{ env.PAGERDUTY_SERVICE_IDS }}

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch-tag-sha }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # TODO:  If you are using any nuget/npm packages from GitHub Packages uncomment this step
      # - name: Authenticate with GitHub Packages
      #   uses: im-open/authenticate-with-gh-package-registries@v1.0.1
      #   with:
      #     github-token: ${{ secrets.READ_PKG_TOKEN }} # This is an org level secret

      - name: Build and Publish
        working-directory: ${{ env.PROJECT_ROOT }}
        run: |
          dotnet build --configuration Release
          dotnet publish -c Release -o ./published_func --no-restore

      # TODO:  You do not need to upload artifacts for this workflow.  Some teams may wish to keep artifacts
      # for other reasons though.  If needed, uncomment this step to upload the artifacts.  Delete if not needed.
      # - name: Upload artifact for deployment job
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{env.ARTIFACT_NAME}}
      #     path: ${{env.PROJECT_ROOT}}/published_func

      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'RESOURCE_GROUP'
          current-environment: ${{github.event.inputs.environment}}
          dev-value: '' # TODO: Add the dev rgrp name or delete if env does not exist in subscription
          qa-value: '' # TODO: Add the qa rgrp name or delete if env does not exist
          stage-value: '' # TODO: Add the stage rgrp name or delete if env does not exist

      - name: Set the Azure Function Name
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'AZ_FUNC_NAME'
          current-environment: ${{ github.event.inputs.environment }}
          dev-value: '' # TODO: Add the dev azure func name or delete if env does not exist in subscription
          qa-value: '' # TODO: Add the qa azure func name or delete if env does not exist
          stage-value: '' # TODO: Add the stage azure func name or delete if env does not exist

      # TODO:  Uncomment if you want to create a slot to deploy to.  Delete if you have a permanent slot or do not wish to use slots.
      # - name: Create a deployment slot
      #   run: |
      #     az functionapp  deployment slot create \
      #     --name ${{ env.AZ_FUNC_NAME }}  \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --resource-group ${{ env.RESOURCE_GROUP }} \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --configuration-source ${{ env.AZ_FUNC_NAME }}

      - name: Deploy to Azure Function
        uses: azure/functions-action@v2
        with:
          app-name: ${{env.AZ_FUNC_NAME}}
          package: ${{ env.PROJECT_ROOT }}/published_func
          # slot-name: ${{env.AZ_SLOT_NAME}}  # TODO:  Uncomment if using slots, delete if not

      # TODO:  Uncomment if using slots and you want to swap right away.  Delete this block if you don't.
      # - name: Swap slots
      #   run: |
      #     az functionapp  deployment slot swap \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{env.RESOURCE_GROUP}} \
      #     --name ${{ env.AZ_FUNC_NAME }}  \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --target-slot ${{ env.TARGET_SLOT }}

      # TODO:  Uncomment if you want to delete the slot.  Delete this block if you don't.
      # - run: |
      #     az functionapp  deployment slot delete \
      #     --slot ${{ env.AZ_SLOT_NAME }} \
      #     --name ${{ env.AZ_FUNC_NAME }}  \
      #     --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} \
      #     --resource-group ${{env.RESOURCE_GROUP}}

      # TODO: Delete the following two steps if not using app insights
      - name: Set the Azure Insights Resource Name
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'AZ_INSIGHTS_NAME'
          current-environment: ${{ github.event.inputs.environment }}
          dev-value: '' # TODO: Add the dev azure app insights resource name or delete if env does not exist in subscription
          qa-value: '' # TODO: Add the qa azure app insights resource name or delete if env does not exist
          stage-value: '' # TODO: Add the stage azure app insights resource name or delete if env does not exist

      - name: Annotate App Insights
        uses: im-open/create-app-insights-annotation@v1.0.0
        with:
          subscriptionId: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          appInsightsResourceName: '${{ env.AZ_INSIGHTS_NAME }}'
          releaseName: ${{ github.run_id }} # TODO:  Verify release name
          category: 'Deployment'
          customMetadata: 'ProjectName=${{env.AZ_FUNC_NAME}},DeployedBy=${{github.actor}}'

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear

      - name: Close the PagerDuty Maintenance Window
        if: always() && steps.open-window.outcome == 'success'
        uses: im-open/close-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          maintenance-window-id: ${{steps.open-window.outputs.maintenance-window-id}}

  update-deployment-board-and-send-teams-notification:
    runs-on: [ubuntu-20.04]
    needs: [deploy-code]
    if: always()
    steps:
      - uses: im-open/workflow-conclusion@v1.0.0
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Remove if not using an automated deployment project board
      # https://github.com/im-practices/git-er-done/blob/main/actions/deployment-board.md
      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN}}
          environment: ${{ github.event.inputs.environment }}
          board-number: ${{ env.DEPLOY_BOARD_NUM}}
          ref: ${{ github.event.inputs.branch-tag-sha }}
          deploy-status: ${{ steps.conclusion.conclusion }}
          timezone: 'america/denver'

      # TODO: Remove the following two steps if not sending Teams notifications
      - name: Set the Azure Function Name
        uses: im-open/set-variable-based-on-environment@v1.0.0
        with:
          variable-name: 'AZ_FUNC_NAME'
          current-environment: ${{ github.event.inputs.environment }}
          dev-value: '' # TODO: Add the dev azure func name or delete if env does not exist in subscription
          qa-value: '' # TODO: Add the qa azure func name or delete if env does not exist
          stage-value: '' # TODO: Add the stage azure func name or delete if env does not exist

      - name: Send Status to Teams
        if: always()
        uses: im-open/microsoft-teams-status-update-action@v1.0.0
        with:
          title: Deploying ${{env.AZ_FUNC_NAME}} to Azure # TODO:  Verify title
          workflow-status: ${{ steps.conclusion.conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # TODO:  Verify this secret exists
          timezone: America/Denver # TODO:  Verify timezone
          # TODO:  Verify the custom facts you want included
          custom-facts: |
            [
              { "name": "Event", "value": "${{github.event_name}}" },
              { "name": "Workflow", "value": "${{github.workflow}}" },
              { "name": "Run", "value": "${{github.run_id}}" }
            ]
          # TODO:  Verify the buttons you want included
          custom-actions: |
            [
              { "name": "View Build Log", "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
            ]
