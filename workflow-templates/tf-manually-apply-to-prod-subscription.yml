name: Manually apply terraform at tag to Prod environment
on: 
  workflow_dispatch:
    inputs:
      tag:
        description:  The tag (which must be reachable by master/main) for the terraform that should be deployed to the Prod environment.
        required: true
      environment:
        description:  The environment to Deploy To.
        required: true

env: 
  STORAGE_ACCOUNT: 'bdaimpna26yourappsa'                            # TODO:  Add your STG Account Here
  RESOURCE_GROUP: 'BDAIM-P-NA26-your-app-here-RGRP'                 # TODO:  Add your RGRP here
  PAGERDUTY_SERVICE_IDS: '[ "P0XXXXX", "ADD_YOUR_SERVICE_ID(S)" ]'  # TODO:  Add your PD Service IDs here
  PAGERDUTY_WINDOW_IN_MIN: 30                                       # TODO:  Verify the length of your PD Maintenance Window
  PLAN_STORAGE_CONTAINER: 'tfstate'
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ENVIRONMENT: 'public'
  TF_IN_AUTOMATION: 'true'
  SSH_KEY_CENTRAL_LOGGING: ${{secrets.SSH_CENTRAL_LOGGING}}
  SSH_KEY_STORAGE_ACCOUNT: ${{secrets.SSH_STORAGE_ACCOUNT}}
  SSH_KEY_ON_PREM_EGRESS: ${{secrets.SSH_ON_PREM_EGRESS}}


jobs:
  stakeholder-approval:
    runs-on: [ubuntu-20.04]
    environment: 'Stakeholder Approval'
    steps:
      - name: Approval Received
        run: echo "Stakeholder approval was received"
  
  validate-input:
    needs: stakeholder-approval
    runs-on: [ubuntu-20.04]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Clean Environment Input
        id: clean-env
        uses: im-open/map-input-action@v1
        with:
          input: ${{ github.event.inputs.environment }}
          input_map: "{ \"Stage\": [\"stg\", \"s\", \"stage\"], \"Prod\": [\"prod\", \"production\", \"p\"] }"

      # TODO:  Update if you don't use all these environments in the Production subscription
      - name: Check if environment is Stage or Prod
        if: ${{ steps.clean-env.outputs.mapped_input != 'Stage' &&  steps.clean-env.outputs.mapped_input != 'Prod'}}
        run: |
            echo "::error::The environment must be Stage or Prod";
            exit 1
          
      - name: Check if tag is on master
        run: |
          mergedTags=$(git tag --merged)
          tag=${{github.event.inputs.tag}}

          echo "Requesting to deploy tag: $tag"
          echo "::group::The repository contains the following tags on the master branch"
          printf '%s\n' "${mergedTags[@]}"
          echo "::endgroup::"

          if printf '%s\n' "${mergedTags[@]}" | grep -q -w $tag ; 
          then
            echo "The tag appears in the list of master tags"
          else
            echo "::error::The tag does not appear to be reachable by master.  Only tags on merged code can be deployed to Production environments."
            exit 1
          fi
    
  tf-plan:
    needs: validate-input
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{github.events.inputs.environment}}

    defaults:
      run:
        shell: bash
        working-directory: ${{ github.events.inputs.environment }} # TODO:  Verify this is correct for your repository
    
    outputs:
      tf_plan_name: ${{steps.upload.outputs.tf_plan_name}}
      maintenance_window_id: ${{ steps.open-window.outputs.maintenance-window-id }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: Setup SSH Keys and known_hosts
        uses: im-open/setup-deploy-keys@1.0.1
        with:
          deploy-key-info: |
            [
              { "orgAndRepo": "im-platform/central-logging", "envName" : "SSH_KEY_CENTRAL_LOGGING" },
              { "orgAndRepo": "im-platform/storage-account-network-rules", "envName" : "SSH_KEY_STORAGE_ACCOUNT" },
              { "orgAndRepo": "im-platform/on-prem-egress-ips", "envName" : "SSH_KEY_ON_PREM_EGRESS" }
            ]

      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          description: 'Deploying Infrastructure to the ${{ github.event.inputs.environment }} environment from GitHub Actions' # TODO:  Verify this description
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-ids: ${{ env.PAGERDUTY_SERVICE_IDS }}

      - name: AZ Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ~>0.15.5 # TODO:  Verify the tf version
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: |
          mkdir plans
          terraform plan -no-color \
            -var="pagerduty_token=${{secrets.PAGERDUTY_TOKEN}}" \
            -out=./plans/tfplan
        
      - name: Upload plan to blob storage
        id: upload
        shell: pwsh
        run: |
          $currentTime = Get-Date -Format "yyyymmdd-HHmmss"
          $terraformPlanName = "$(Get-Date -Format 'yyyymmdd-HHmmss').plan.zip"
          $terraformBlobName = "plans/$terraformPlanName"

          Add-Type -Assembly "System.IO.Compression.FileSystem"
          [System.IO.Compression.ZipFile]::CreateFromDirectory("plans", $terraformPlanName)

          echo "Terraform Plan Name: $terraformPlanName"
          echo "current directory:"
          ls -R

          echo "Uploading tf plan to azure storage account ${{env.STORAGE_ACCOUNT}}"
          $key = az storage account keys list --account-name ${{env.STORAGE_ACCOUNT}} --resource-group ${{env.RESOURCE_GROUP}} --query [0].value -o tsv
          az storage blob upload --no-progress --auth-mode key --account-key $key --account-name ${{env.STORAGE_ACCOUNT}} --container-name ${{env.PLAN_STORAGE_CONTAINER}} --file $terraformPlanName --name $terraformBlobName
          echo "The plan was successfully uploaded"
          
          echo "::set-output name=tf_plan_name::$terraformPlanName"
      
  technical-approval:
    needs: tf-plan
    runs-on: [ubuntu-20.04]
    environment: 'Technical Approval'
    steps:
      - name: Technical Approval Received
        run: |
          echo "Technical approval on the tf plan was received"

  tf-apply:
    needs: [technical-approval, tf-plan]
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{github.events.inputs.environment}}

    defaults:
      run:
        shell: bash
        working-directory: ${{ github.events.inputs.environment }} # TODO:  Verify this is correct for your repository
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: Setup SSH Keys and known_hosts
        uses: im-open/setup-deploy-keys@1.0.1
        with:
          deploy-key-info: |
            [
              { "orgAndRepo": "im-platform/central-logging", "envName" : "SSH_KEY_CENTRAL_LOGGING" },
              { "orgAndRepo": "im-platform/storage-account-network-rules", "envName" : "SSH_KEY_STORAGE_ACCOUNT" },
              { "orgAndRepo": "im-platform/on-prem-egress-ips", "envName" : "SSH_KEY_ON_PREM_EGRESS" }
            ]

      - name: AZ Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ~>0.15.5 # TODO:  Verify the tf version
      
      - name: Download blob
        shell: pwsh
        run: |
          mkdir plans
          echo "Current working directory: $pwd"
          $terraformBlobName = "plans/${{needs.tf-plan.outputs.tf_plan_name}}"
          echo "The blob name is: $terraformBlobName"
          
          Write-Host "Download blob to ./plans"
          $key = az storage account keys list --account-name ${{env.STORAGE_ACCOUNT}} --resource-group ${{env.RESOURCE_GROUP}} --query [0].value -o tsv
          az storage blob download --no-progress --auth-mode key --account-key $key --account-name ${{env.STORAGE_ACCOUNT}} --container-name ${{env.PLAN_STORAGE_CONTAINER}} --file $pwd/$terraformBlobName --name $terraformBlobName
          
          try {
            [System.IO.Compression.ZipFile]::ExtractToDirectory("$pwd/$terraformBlobName", "$pwd/plans")    
          }
          catch {
            # Even though it hits this catch block the archive is extracted as expected.  No good explanation.
          }

          Write-Host "Zip extracted"

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -no-color -input=false ./plans/tfplan

      - name: Close the PagerDuty Maintenance Window
        uses: im-open/close-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          maintenance-window-id: ${{needs.tf-plan.outputs.maintenance_window_id}} 