# Workflow Code: LazySnorlax_v1   DO NOT REMOVE
# Purpose:
#       Runs Java Selenium UI Health Check tests in Github Actions on a schedule.
#       With the workflow you specify when to run this test.
#
# Frequency:
#    - This workflow can be duplicated once per testng project that you wish to run independently.
#
# Projects to use this Template with:
#    - Testing projects that use Selenium Java with TestNg.
#
# TODO Prerequisites:
#    - Make sure you have the Javaagent and applicationinsights.json in resources folder.
#    - Update your java selenium solution to export test results to Application Insights using the im.exporttoappinsights jar dependencies. 
#    - Add secret APPLICATIONINSIGHTS_CONNECTION_STRING to every environment you are testing.
#    - Modify your Maven profile fetch artifacts from github packages.
#      Detailed setup guidance can be found here:  https://github.com/im-practices/techhub/blob/main/docs/Azure/content/Health-Checks/TestNG-UI-Health-Check.md
#    - Create the shell script to setup Maven with the modified settings.xml file.details are at the following link Step 4,5
#    - https://github.com/im-practices/techhub/blob/main/docs/Azure/content/Health-Checks/TestNG-UI-Health-Check.md
name: 🧪 Run Java Selenium TestNG tests on Schedule
run-name: 🧪 Run Java Selenium TestNG tests on Schedule

# TODO: Verify Triggers
on:
  schedule: # TODO: Update the schedule to run at the desired frequency. Do not run more than every 30 minutes as to not produce undue load on the system.
    - cron: '59 * * * *' # Run Every hour # TODO: Update the frequency of the schedule.  Do not run more than every 30 minutes as to not produce undue load on the system.
    # - cron: '1/30 * * * *' # Run Every 30 minutes # TODO: Uncomment this line if you want to run every 30 minutes.
    # - cron: '1/40 * * * *' # Run Every 40 minutes # TODO: Uncomment this line if you want to run every 40 minutes.

env:
  GITHUB_REF: 'main' # Default branch to run against.
  JAVA_VERSION: '21' # TODO: Update this to the version of Java required for the tests.
  # Steps to modify the maven settings are available at   https://github.com/im-practices/techhub/blob/main/docs/Azure/content/Health-Checks/TestNG-UI-Health-Check.md Step no 4,5
  MAVEN_SETTINGS_PATH: './path/to/setup-custom-maven.sh' # TODO: Update this to the Maven setup script.
  MAVEN_BIN: 'embedded/maven/bin/mvn' # TODO: Update only if you are modifying the path at shell script.
  MAVEN_CACHE_PATH: '~/.m2/repository' # Maven Repo path.
  JAVA_AGENT: 'resources/app-insights/applicationinsights-agent.jar' # # TODO: Update this to the App Insights Java agent JAR location.
  ENV_TEST_RUN_NAME: '' # TODO: Update this with the name of the health check test run.
  JAVA_TEST_DIR: '' # TODO: Update this to the name of Java test directory.
  TESTNG_RESULTS_FILE: '' # TODO: Update this to the TestNG results file.
  TESTNG_SCREENSHOTS_DIR: '' # TODO: Update this to the path of screenshots directory.
  TESTNG_REPORT_DIR: '' # TODO: Update this to the path to TestNG reports directory.

jobs:
  maven-cache:
    # Sets up the Maven cache to speed up dependency installation
    runs-on: im-linux

    defaults:
      run:
        shell: bash

    outputs:
      MAVEN_CACHE_KEY: ${{ env.MAVEN_CACHE_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: Setup Java
        uses: actions/setup-java@v4
        if: steps.has-cache.outputs.cache-hit != 'true'
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Set up Maven Cache Keys
         # Generate a cache key based on the pom.xml file. If it changes, a new cache will be created.
        run: echo "MAVEN_CACHE_KEY=maven_repo-${{ hashFiles('**/pom.xml') }}" >> $GITHUB_ENV

      - name: Check for Maven Cache
        id: has-cache
        uses: actions/cache@v4
        with:
           lookup-only: true
           key: ${{ env.MAVEN_CACHE_KEY }}
           path: ${{ env.MAVEN_CACHE_PATH }} # Cache path for Maven dependencies.

      - name: Set up Maven
        if: steps.has-cache.outputs.cache-hit != 'true'
        # Steps to generate the shell script is available at  https://github.com/im-practices/techhub/blob/main/docs/Azure/content/Health-Checks/TestNG-UI-Health-Check.md Step no 6
        # This step will run the shell script to setup Maven with the modified settings.xml file.
        run: |
          echo "Setting up Maven and installing dependencies"
          chmod +x ${{ env.MAVEN_SETTINGS_PATH }}
          ${{ env.MAVEN_SETTINGS_PATH }}
        shell: bash

      - name: Build Project using Maven 
        if: steps.has-cache.outputs.cache-hit != 'true'
        run: ${{ env.MAVEN_BIN }} clean install


  testng-tests:
    # Main job to build and run the tests
    runs-on: im-linux
    needs: setup-cache
    
    strategy:
      matrix:
        environment: [dev, qa, stage] # TODO: Add environments you want your tests to run in
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.JAVA_TEST_DIR }}

    environment: ${{ matrix.environment }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: Set up Java
        # Sets up the specified Java version.
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Download Maven Cache
        id: restore-maven-cache
        # Restore the cached Maven dependencies if available.
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.maven-cache.outputs.MAVEN_CACHE_KEY }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
          path: ${{ env.MAVEN_CACHE_PATH }}

      - name: Build Project with Maven
        # Compiles the project and packages it with Maven.
        run: ${{ env.MAVEN_BIN }} clean package

      - name: Run TestNG Tests
        # TODO: Executes TestNG tests ,you can modify running using other approaches to run test.
        run: |
            ${{ env.MAVEN_BIN }} exec:java 
            -D"exec.mainClass"="org.testng.TestNG" 
            -D"exec.args"="-javaagent:${{ env.JAVA_AGENT }} -cp %classpath test.xml"
        #TODO: Please remove this below environment variable if you are not using this workflow for UI Healthchecks
        env:
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}


      - name: Upload TestNG Screenshots if Tests Fail
        if: steps.process-testng.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: TestNG Screenshots ${{ github.run_number }}
          path: ${{ env.TESTNG_SCREENSHOTS_DIR }}/
          if-no-files-found: ignore
          retention-days: 5

      - name: Upload TestNG Report if Tests Fail
        if: steps.process-testng.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: TestNG Report ${{ github.run_number }}
          path: |
            ${{ env.TESTNG_REPORT_DIR }}/
            ${{ env.TESTNG_RESULTS_FILE }}
          retention-days: 5

      - name: Fail if Tests Have Failures
        if: steps.process-testng.outcome == 'failure'
        run: |
          echo "The TestNG tests have failures"
          exit 1
