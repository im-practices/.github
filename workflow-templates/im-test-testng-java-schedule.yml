# Workflow Code: LazySnorlax_v1   DO NOT REMOVE
# Purpose:
#       Runs Java Selenium UI Health Check tests in Github Actions on a schedule.
#       With the workflow you specify when to run this test.
#
# Frequency:
#    - Workflow template for running Selenium-Java tests on a schedule. This workflow supports the UI Health Check feature
#
# Projects to use this Template with:
#    - Testing projects that use Selenium Java.
#
# TODO Prerequisites:
#    - Make sure you have the Javaagent and applicationinsights.json in resources folder.
#    - Update your java selenium solution to export test results to Application Insights using the im.exporttoappinsights jar dependencies. 
#    - Modify your Maven profile fetch artifacts from github packages.
#      Detailed setup guidance can be found here: https://github.com/im-practices/techhub/blob/implementation-doc-functional-healthcheck/docs/Azure/content/Health-Checks/Azure-Monitor-Functional-Health-Check.md

name: 🧪 Run Java Selenium HealthCheck tests on Schedule
run-name: 🧪 Run Java Selenium HealthCheck tests on Schedule

# TODO: Verify Triggers
on:
  schedule: # TODO: Update the schedule to run at the desired frequency. Do not run more than every 30 minutes as to not produce undue load on the system.
    - cron: '59 * * * *' # Run Every hour # TODO: Update the frequency of the schedule.  Do not run more than every 30 minutes as to not produce undue load on the system.
    # - cron: '1/30 * * * *' # Run Every 30 minutes # TODO: Uncomment this line if you want to run every 30 minutes.
    # - cron: '1/40 * * * *' # Run Every 40 minutes # TODO: Uncomment this line if you want to run every 40 minutes.

env:
  GITHUB_REF: 'main' # Default branch to run against.
  JAVA_VERSION: '21' # TODO: Update this to the version of Java required for the tests.
  MAVEN_SETTINGS_PATH: './shells/setup-maven.sh' # Path to the Maven setup script.
  MAVEN_BIN: 'embedded/maven/bin/mvn' # Path to Maven binary, update if different.
  JAVA_AGENT: 'resources/app-insights/applicationinsights-agent.jar' # Path to the App Insights Java agent JAR.
  ENV_TEST_RUN_NAME: 'UI Health Check Tests' # Name for the health check test run.
  TESTNG_RESULTS_FILE: 'target/surefire-reports/testng-results.xml' # Path to TestNG results file.
  TESTNG_SCREENSHOTS_DIR: 'target/screenshots' # Path to screenshots directory.
  TESTNG_REPORT_DIR: 'target/surefire-reports' # Path to TestNG reports directory.

jobs:
  setup-cache:
    # Sets up the Maven cache to speed up dependency installation
    runs-on: im-linux

    defaults:
      run:
        shell: bash

    outputs:
      MAVEN_CACHE_KEY: ${{ env.MAVEN_CACHE_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: Set up Cache Keys
        # Generate a cache key based on the pom.xml file. If it changes, a new cache will be created.
        run: echo "MAVEN_CACHE_KEY=maven_repo-${{ hashFiles('**/pom.xml') }}" >> $GITHUB_ENV

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Check for Maven Cache
        id: has-cache
        uses: actions/cache@v4
        with:
          lookup-only: true
          key: ${{ env.MAVEN_CACHE_KEY }}
          path: ~/.m2 # Cache path for Maven dependencies.

      - name: Install Maven and Dependencies
        # Installs Maven dependencies if the cache is not found.
        if: steps.has-cache.outputs.cache-hit != 'true'
        run: |
          echo "Setting up Maven and installing dependencies"
          chmod +x ${{ env.MAVEN_SETTINGS_PATH }}
          ${{ env.MAVEN_SETTINGS_PATH }}

  run-tests:
    # Main job to build and run the health check tests
    runs-on: im-linux
    needs: setup-cache

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: Set up Java
        # Sets up the specified Java version.
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Download Maven Cache
        id: restore-maven-cache
        # Restore the cached Maven dependencies if available.
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.setup-cache.outputs.MAVEN_CACHE_KEY }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
          path: ~/.m2

      - name: Build Project with Maven
        # Compiles the project and packages it with Maven.
        run: ${{ env.MAVEN_BIN }} clean package

      - name: Run Health Check Tests
        # Executes health check tests.
        run: |
          ${{ env.MAVEN_BIN }} exec:java -D"exec.mainClass"="com.extendhealth.runners.Main" -D"exec.args"="-javaagent:${{ env.JAVA_AGENT }} -cp %classpath com.healthcheck.runners.Main --update-health-check packages:com.extendhealth.ui.healthcheck.tests.*"
        env:
          ENV_IS_HEALTH_CHECK: true
          ENV_CONFIG_FILE: ${{ env.ENV_CONFIG_FILE }}

      - name: Process TestNG Results
        id: process-testng
        uses: im-open/process-test-results@v3.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          results-file: '${{ env.TESTNG_RESULTS_FILE }}'
          report-name: 'TestNG Health Check ${{ github.run_number }}'
          create-status-check: false
          create-pr-comment: false
          ignore-test-failures: true
          timezone: 'america/denver'

      - name: Upload TestNG Screenshots if Tests Fail
        if: steps.process-testng.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: TestNG Screenshots ${{ github.run_number }}
          path: ${{ env.TESTNG_SCREENSHOTS_DIR }}/
          if-no-files-found: ignore
          retention-days: 5

      - name: Upload TestNG Report if Tests Fail
        if: steps.process-testng.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: TestNG Report ${{ github.run_number }}
          path: |
            ${{ env.TESTNG_REPORT_DIR }}/
            ${{ env.TESTNG_RESULTS_FILE }}
          retention-days: 5

      - name: Fail if Tests Have Failures
        if: steps.process-testng.outcome == 'failure'
        run: |
          echo "The TestNG tests have failures"
          exit 1

      - name: Close Processes
        # Runs a cleanup script to close any remaining processes.
        run: |
          echo "Cleaning up processes"
          chmod +x ./shells/close-process.sh
          ./shells/close-process.sh
