# Prerequisites
# 1 - Make sure the az secrets have been added to the environment
# 2 - Make sure the host IIS server has been prepped to accept incoming WinRM Requests
#     See the IIS App Pool action README for more details: https://github.com/im-open/iis-service-action/#readme

name: Deploy On Prem Web App
on:
  workflow_dispatch:
    inputs:
      branch-tag-sha:
        description: The branch, tag or sha of the terraform that should be deployed to the Dev environment.
        required: true
      environment:
        description: The environment to Deploy To.
        required: true

env:
  PAGERDUTY_SERVICE_IDS: '[ "${{secrets.PAGERDUTY_SERVICE_ID}}" ]' # TODO:  Add your PD Service IDs here, the svc id usually has a format of P0XXXXX
  PAGERDUTY_WINDOW_IN_MIN: 30 # TODO:  Verify the length of your PD Maintenance Window
  PAGERDUTY_WINDOW_DESC: 'Deploying Code to ${{ github.event.inputs.environment }} from GitHub Actions' # TODO:  Verify this PD Maintenance Window Description
  DEPLOY_BOARD_NUM: '' # TODO: Add the automated deployment board number or remove if not using an automated deployment project board.
  DOTNET_VERSION: '' # TODO:  Set the .net core version of your project
  PROJECT_ROOT: '' # TODO:  set this to the folder of your web app project. For most projects this will be ./src/ProjectName
  ARTIFACT_NAME: 'Published App' # TODO:  Set this to the name of the artifact that shows in the workflow's summary section
  ARTIFACT_ZIP: 'artifacts.zip'
  DEPLOY_ZIP: 'published_app.zip'
  IIS_SERVER_CERT_PATH: '' # TODO:  The path to the cert for the IIS server remote management
  WEBSITE_NAME: '' # TODO:  The unique name of the site particularly for IIS server display
  WEBSITE_HOST_HEADER: '' # TODO:  The IIS server host header that the site responds to
  WEBSITE_CERT_PATH: '' # TODO:  The path to the private key cert for the IIS server site binding
  WEBSITE_CERT_FRIENDLY_NAME: '' # TODO:  The friendly name encoded in the IIS private key cert
  DEPLOYMENT_FOLDER: '' # TODO:  The local target directory for the web application files, i.e., 'c:\inetpub\webapp'

jobs:
  validate-input:
    runs-on: [ubuntu-20.04]
    steps:
      # TODO:  Update if you don't use all these environments in the Development Subscription
      - name: Clean Environment Input
        id: clean-env
        uses: im-open/map-input-action@v1.0.1
        with:
          input: ${{ github.event.inputs.environment }}
          input_map: '{ "Dev": ["dev", "d", "development"], "QA": ["qa", "q"], "Stage": ["stg", "s", "stage"]  }'
          error_on_no_match: true
          custom_error_message: 'The environment must be Dev, QA or Stage'

  tech-approval:
    if: ${{ github.event.inputs.environment }} != "DEV" && ${{ github.event.inputs.environment }} != "QA"
    runs-on: [ubuntu-20.04]
    environment: tech-approve

  qa-approval:
    if: ${{ github.event.inputs.environment }} != "DEV" && ${{ github.event.inputs.environment }} != "QA"
    needs: tech-approval
    runs-on: [ubuntu-20.04]
    environment: qa-approve

  stakeholder-approval:
    if: ${{ github.event.inputs.environment }} == "PROD"
    needs: [tech-approval, qa-approval]
    runs-on: [ubuntu-20.04]
    environment: stakeholder-approve

  build-deploy:
    needs: [tech-approval, qa-approval, stakeholder-approval]
    runs-on: [self-hosted, windows-2019]
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Open a PagerDuty Maintenance Window
        id: open-window
        uses: im-open/open-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          description: '${{ env.PAGERDUTY_WINDOW_DESC }}'
          minutes: ${{ env.PAGERDUTY_WINDOW_IN_MIN }}
          service-ids: ${{ env.PAGERDUTY_SERVICE_IDS }}

      - run: |
          echo "The maintenance window ID is: ${{ steps.open-window.outputs.maintenance-window-id }}"
          deploy-the-code.sh

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Uncomment this if the site hasn't been created before
      # - name: Create Web Site
      #   uses: im-open/iis-service-action@v1.0.1
      #   with:
      #     server: '${{ secrets.iis_server }}'
      #     service-account-id: '${{secrets.iis_admin_user}}'
      #     service-account-password: '${{secrets.iis_admin_password}}'
      #     website-name: '${{env.WEBSITE_NAME}}'
      #     app-pool-name: '${{ secrets.pool-name }}'
      #     website-path: '${{env.DEPLOYMENT_FOLDER}}'
      #     website-host-header: '${{env.WEBSITE_HOST_HEADER}}'
      #     website-cert-path: '${{ env.WEBSITE_CERT_PATH}}'
      #     website-cert-password: '${{ secrets.site_cert_password }}'
      #     website-cert-friendly-name: '${{env.WEBSITE_CERT_FRIENDLY_NAME}}'
      #     server-public-key: ${{ env.IIS_SERVER_CERT_PATH}}

      # Do NOT upload the DEPLOY_ZIP as an artifact after you've done this!
      # DEPLOY_ZIP will contain all of your sensitive values!
      # If an artifact is uploaded, only upload ARTIFACT_ZIP
      - name: Update appsettings.json with Environment Specific Values
        uses: im-open/add-or-update-json-properties@v1.0.1
        with:
          path-to-json-file: '${{ env.PROJECT_ROOT }}/appsettings.json'
          # TODO:  add any appsettings.json items that need to be updated for the environment.  Format:
          # {"SecretName": "SecretValues"},
          # {"Nested.SecretName": "${{secrets.NESTED_SECRET}}"},
          # {"Auth0.ClientId": "${{ secrets.AUTH0_CLIENT_ID }}"}
          properties-to-update-or-add: |
            [
            ]

      # TODO:  If config transformation is needed for different environments include environment name
      # For example to perform transformations on a web.config using the web.production.config file:
      # dotnet publish --configuration Release /p:EnvironmentName=Production
      - name: Build and Publish
        working-directory: ${{ env.PROJECT_ROOT }}
        run: |
          dotnet build --configuration Release
          dotnet publish -c Release -o ./published_app --no-restore

      - name: Zip the published app for faster deployment and uploads
        working-directory: ${{ env.PROJECT_ROOT }}
        # TODO:  If you plan on uploading artifacts, add this line to the run:
        # (cd published_app && zip -r ../${{env.ARTIFACT_ZIP}} . -x */appsettings*.json appsettings*.json)
        run: |
          (cd published_app && zip -r ../${{env.DEPLOY_ZIP}} .)

      - name: Stop App Pool
        id: app-pool-stop
        if: always()
        runs-on: [self-hosted, windows-2019]
        uses: im-open/app-pool-action@v1.0.0
        with:
          action: 'stop'
          server: ${{ secrets.iis_server }}
          app-pool-name: ${{ secrets.pool-name }}
          service-account-id: ${{secrets.iis_admin_user}}
          service-account-password: ${{secrets.iis_admin_password}}
          server-public-key: ${{ env.IIS_SERVER_CERT_PATH}}

      - name: Deploy deployment package
        if: always && steps.iis-stop.outcome == 'success'
        uses: 'im-open/deploy-on-prem-web-app@v1.0.0'
        with:
          server: ${{secrets.server}}
          service-account-id: ${{secrets.iis_admin_user}}
          service-account-password: ${{secrets.iis_admin_password}}
          source-zip-file-path: ../${{env.DEPLOY_ZIP}}
          deployment-folder-path: ${{env.DEPLOYMENT_FOLDER}}
          clean-deployment-folder: 'true'
          server-public-key: ${{ env.cert-path }}

      - name: Start App Pool
        if: always() && steps.app-pool-stop.outcome == 'success'
        runs-on: [self-hosted, windows-2019]
        uses: im-open/app-pool-action@v1.0.0
        with:
          action: 'start'
          server: ${{ secrets.iis_server }}
          app-pool-name: ${{ secrets.pool-name }}
          service-account-id: ${{secrets.iis_admin_user}}
          service-account-password: ${{secrets.iis_admin_password}}
          server-public-key: ${{ env.IIS_SERVER_CERT_PATH}}

      - name: Close the PagerDuty Maintenance Window
        if: always() && steps.open-window.outcome == 'success'
        uses: im-open/close-pagerduty-maintenance-window@v1.0.0
        with:
          pagerduty-api-key: ${{secrets.PAGERDUTY_API_KEY}}
          maintenance-window-id: ${{steps.open-window.outputs.maintenance-window-id}}

      - name: Delete .zip and appsettings file that contains sensitive info
        continue-on-error: true
        working-directory: ${{ env.PROJECT_ROOT }}
        run: |
          rm -f ${{env.DEPLOY_ZIP}}
          rm -f published_app
          rm -f appsettings*.json

  update-deployment-board-and-send-teams-notification:
    runs-on: [ubuntu-20.04]
    needs: [deploy-code]
    if: always()
    steps:
      - uses: im-open/workflow-conclusion@v1.0.0
        id: conclusion
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Remove if not using an automated deployment project board
      - name: Update Deployment Board
        if: always()
        uses: im-open/update-deployment-board@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN}}
          environment: ${{ github.event.inputs.environment }}
          board-number: ${{ env.DEPLOY_BOARD_NUM}}
          ref: ${{ github.event.inputs.branch-tag-sha }}
          deploy-status: ${{ steps.conclusion.conclusion }}
          timezone: 'america/denver'

      # TODO: Remove if not sending Teams notifications
      - name: Send Status to Teams
        if: always()
        uses: im-open/microsoft-teams-status-update-action@v1.0.0
        with:
          title: Deploying ${{env.AZ_APP_NAME}} to Azure # TODO:  Verify title
          workflow-status: ${{ steps.conclusion.conclusion }}
          workflow-type: Deploy
          teams-uri: ${{ secrets.MS_TEAMS_URI }} # TODO:  Verify this secret exists
          timezone: America/Denver # TODO:  Verify timezone
          # TODO:  Verify the custom facts you want included
          custom-facts: |
            [
              { "name": "Event", "value": "${{github.event_name}}" },
              { "name": "Workflow", "value": "${{github.workflow}}" },
              { "name": "Run", "value": "${{github.run_id}}" }
            ]
          # TODO:  Verify the buttons you want included
          custom-actions: |
            [
              { "name": "View Build Log", "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
            ]
