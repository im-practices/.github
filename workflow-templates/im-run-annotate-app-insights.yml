# Workflow Code: EmpatheticDolphin_v14    DO NOT REMOVE
# Purpose:
#    Creates an ad hoc app insights annotation for a specified
#    environment when someone kicks it off manually.
#
# Frequency:
#    - This workflow should only be used once per repository assuming
#      there is only one app insights instance set up per env
#
# Projects to use this Template with:
#    - Azure App Service or Function (Optional Template)
#    - Azure SQL Database            (Optional Template)
#    - Terraform                     (Optional Template)
#
# TODO: Prerequisites:
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.

name: Runbook - Annotate App Insights
run-name: Annotate ${{ inputs.eventName }} in ${{ inputs.environment }} App Insights
on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment the service is in
        required: true
        default: prod
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod
      category:
        description: The category of the annotation
        required: false
        default: 'Deployment'
      eventName:
        description: The name of the release/tag that will be deployed or the event that will be annotated.  If there are multiple deployables in the repo you should include the project it is for.
        required: true
      customMetadata:
        description: 'The comma separated custom metadata pairs.  Format: name1=value1,name2=value2'
        required: false
        default: ''

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}

jobs:
  create-annotation:
    runs-on: [self-hosted, ubuntu-20.04]
    environment: ${{ github.event.inputs.environment }}
    steps:
      - run: |
          echo $'
          | Build Arguments | Value                                      |
          | ---             |  ---                                       |
          | Environment     | `${{ env.ENVIRONMENT }}`                   |
          | Category        | `${{ github.event.inputs.category }}`      |
          | EventName       | `${{ github.event.inputs.eventName }}`     |
          | Custom Metadata | `${{ github.event.inputs.customMetadata }}`|' >> $GITHUB_STEP_SUMMARY
              
      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables
        id: set-variables
        uses: im-open/set-environment-variables-by-scope@v1.1
        with:
          scope: ${{ github.event.inputs.environment }}
        env:
          # This variable is used to upload and download blobs from blob storage
          RESOURCE_GROUP@dev: ''
          RESOURCE_GROUP@qa: ''
          RESOURCE_GROUP@stage: ''
          RESOURCE_GROUP@demo: ''
          RESOURCE_GROUP@uat: ''
          RESOURCE_GROUP@prod: ''
          # TODO: For the following app insights name inputs, fill in the value if you have the environment and delete the environment if it does not exist
          APP_INSIGHTS_NAME@dev: ''
          APP_INSIGHTS_NAME@qa: ''
          APP_INSIGHTS_NAME@stage: ''
          APP_INSIGHTS_NAME@demo: ''
          APP_INSIGHTS_NAME@uat: ''
          APP_INSIGHTS_NAME@prod: ''

      - name: AZ Login
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # This is an env-level secret

      - name: annotate
        uses: im-open/create-app-insights-annotation@v1.0
        with:
          subscriptionId: ${{ secrets.ARM_SUBSCRIPTION_ID }} # This is an env-level secret
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          appInsightsResourceName: '${{ env.APP_INSIGHTS_NAME }}'
          releaseName: ${{ github.event.inputs.eventName }}
          category: ${{ github.event.inputs.category }}
          customMetadata: ${{ github.event.inputs.customMetadata }}

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear
