# Workflow Code: BubblyGreyhound_v30    DO NOT REMOVE
# Purpose:
#    Checks out the repository and deploys a directory to the
#    specified storage account when someone kicks it off manually.
#
# Frequency:
#    - This workflow can be duplicated for as many storage
#      account deployments that the repository contains
#
# Projects to use this Template with:
#    - Storage Account Deployment (Core Template)
#
# TODO: Prerequisites:
#    - Ensure each of the repo-level and env-level secrets used in this workflow have been populated by an admin in your repository.
#    - Create an entity in this repo's catalog-info.yml that represents what is being deployed if it does not already exist

name: Deploy Files to Azure Storage
run-name: Deploy ${{ inputs.branch-tag-sha }} Files to ${{ inputs.environment }} AZ Storage
# TODO: Evaluate the appropriate triggers
on:
  workflow_dispatch:
    inputs:
      branch-tag-sha:
        description: The branch, tag or sha of the files that should be deployed to the Dev environment.
        required: true
      environment:
        description: The environment to deploy to
        required: true
        type: choice
        options: # TODO: Update for the environments that are available
          - dev
          - qa
          - stage
          - demo
          - uat
          - prod

permissions:
  # Required for secretless azure access and deploys
  id-token: write
  contents: read
  # Required for create-github-deployment
  deployments: write
  actions: read

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  GITHUB_REF: ${{ github.event.inputs.branch-tag-sha }}
  TARGET_CONTAINER: '' # TODO: Add the appropriate target container in the stg account
  SOURCE_DIRECTORY: '' # TODO: Add the appropriate source directory
  
jobs:
  deploy-to-azure:
    runs-on: im-linux

    environment: ${{ github.event.inputs.environment }} # Use inputs context because env context is not available to environment:

    steps:
      - run: |
          echo $'
          | Build Arguments | Value                    |
          | ---             |  ---                     |
          | Environment     | `${{ env.ENVIRONMENT }}` |
          | Branch/Tag/Sha  | `${{ env.GITHUB_REF }}`  |' >> $GITHUB_STEP_SUMMARY

      # For more information and best practices on the usage and options available
      # for this action go to: https://github.com/im-open/set-environment-variables-by-scope#usage-instructions
      - name: Set Variables
        uses: im-open/set-environment-variables-by-scope@v1.2
        with:
          scope: ${{ env.ENVIRONMENT }}
        env:
          # TODO: For the following inputs, fill in the value if you have the environment and delete the environment if it does not exist
          # This variable is used to swap and delete slots
          RESOURCE_GROUP@dev: ''
          RESOURCE_GROUP@qa: ''
          RESOURCE_GROUP@stage: ''
          RESOURCE_GROUP@demo: ''
          RESOURCE_GROUP@uat: ''
          RESOURCE_GROUP@prod: ''
          # This variable is used to deploy to the correct storage account
          STORAGE_ACCOUNT_NAME@dev: ''
          STORAGE_ACCOUNT_NAME@qa: ''
          STORAGE_ACCOUNT_NAME@stage: ''
          STORAGE_ACCOUNT_NAME@demo: ''
          STORAGE_ACCOUNT_NAME@uat: ''
          STORAGE_ACCOUNT_NAME@prod: ''
          # This variable is used to annotate app insights
          APP_INSIGHTS_NAME@dev: ''
          APP_INSIGHTS_NAME@qa: ''
          APP_INSIGHTS_NAME@stage: ''
          APP_INSIGHTS_NAME@demo: ''
          APP_INSIGHTS_NAME@uat: ''
          APP_INSIGHTS_NAME@prod: ''

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}
          fetch-depth: 0

      - name: Verify Tag Exists
        uses: im-open/verify-git-ref@v1.2
        with:
          branch-tag-sha: ${{ env.GITHUB_REF }}

      - name: AZ Login
        id: login
        uses: azure/login@v2
        with:
          # This is an org-level variable
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          # These are env-level variables
          subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          client-id: ${{ vars.ARM_CLIENT_ID }}

      # This call uses RBAC (--auth-mode login) to upload files to the azure storage account.
      # No other key or connection string is needed. In order to push files to a stg account
      # the SP that authenticates in the step above needs an additional permission (Storage
      # Blob Data Contributor).  Without that permission, this call will not succeed.
      # https://docs.microsoft.com/en-us/azure/storage/blobs/assign-azure-role-data-access?tabs=portal
      - name: Upload Files
        run: |
          az storage blob upload-batch \
            --auth-mode login \
            --account-name '${{ env.STORAGE_ACCOUNT_NAME }}' \
            -d '${{ env.TARGET_CONTAINER }}' \
            -s '${{ env.SOURCE_DIRECTORY }}'

      - name: Annotate App Insights
        uses: im-open/create-app-insights-annotation@v1.0
        with:
          subscriptionId: ${{ vars.ARM_SUBSCRIPTION_ID }} # This is an env-level variable
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          appInsightsResourceName: '${{ env.APP_INSIGHTS_NAME }}'
          releaseName: '${{ env.STORAGE_ACCOUNT_NAME }}-File-Deploy'
          category: 'Deployment'
          customMetadata: 'StorageAccountName=${{ env.STORAGE_ACCOUNT_NAME }},TargetContainer=${{ env.TARGET_CONTAINER }},SourceDirectory=${{ env.SOURCE_DIRECTORY }},DeployedBy=${{ github.actor }},RunID=${{ github.run_id }}'

      - name: Send Deployment Event to PagerDuty
        if: always()
        uses: im-open/pagerduty-change-events-action@v1.1
        with:
          integration-key: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }} # This is an env-level secret  # TODO:  Ensure an integration has been created in PagerDuty on each applicable service and the secret added to the environment
          custom-event: '[Deployment] ${{ env.SOURCE_DIRECTORY }}@${{ env.GITHUB_REF }} deployed to ${{ env.STORAGE_ACCOUNT_NAME }} (${{ job.status }})'

      - name: Create GitHub Deployment
        if: always()
        uses: im-open/create-github-deployment@v1.0
        with:
          workflow-actor: ${{ github.actor }} # This will add the user who kicked off the workflow to the deployment payload
          token: ${{ secrets.GITHUB_TOKEN }} # Special per-job token generated by GH for interacting with the repo
          environment: ${{ env.ENVIRONMENT }}
          release-ref: ${{ env.GITHUB_REF }}
          deployment-status: ${{ job.status }}
          deployment-description: 'Deployment to the ${{ env.ENVIRONMENT }} environment of ${{ env.GITHUB_REF }}'
          entity: '' # TODO: The TechHub (catalog-info.yml) entity that is being deployed.  This value should match the metadata.name of the entity defined in catalog-info.yml.
          instance: 'file-storage'

      - name: Azure logout
        if: always() && steps.login.outcome == 'success'
        run: |
          az logout
          az cache purge
          az account clear
